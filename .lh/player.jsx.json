{
    "sourceFile": "player.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1727947542753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1727950321237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,598 +1,576 @@\n-\"use client\";\n-var __defProp = Object.defineProperty;\n-var __getOwnPropSymbols = Object.getOwnPropertySymbols;\n-var __hasOwnProp = Object.prototype.hasOwnProperty;\n-var __propIsEnum = Object.prototype.propertyIsEnumerable;\n-var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\n+'use client'\n+var __defProp = Object.defineProperty\n+var __getOwnPropSymbols = Object.getOwnPropertySymbols\n+var __hasOwnProp = Object.prototype.hasOwnProperty\n+var __propIsEnum = Object.prototype.propertyIsEnumerable\n+var __defNormalProp = (obj, key, value) =>\n+  key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : (obj[key] = value)\n var __spreadValues = (a, b) => {\n-  for (var prop in b || (b = {}))\n-    if (__hasOwnProp.call(b, prop))\n-      __defNormalProp(a, prop, b[prop]);\n+  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop])\n   if (__getOwnPropSymbols)\n     for (var prop of __getOwnPropSymbols(b)) {\n-      if (__propIsEnum.call(b, prop))\n-        __defNormalProp(a, prop, b[prop]);\n+      if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop])\n     }\n-  return a;\n-};\n+  return a\n+}\n var __objRest = (source, exclude) => {\n-  var target = {};\n-  for (var prop in source)\n-    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n-      target[prop] = source[prop];\n+  var target = {}\n+  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop]\n   if (source != null && __getOwnPropSymbols)\n     for (var prop of __getOwnPropSymbols(source)) {\n-      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n-        target[prop] = source[prop];\n+      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop]\n     }\n-  return target;\n-};\n+  return target\n+}\n var __async = (__this, __arguments, generator) => {\n   return new Promise((resolve, reject) => {\n     var fulfilled = (value) => {\n       try {\n-        step(generator.next(value));\n+        step(generator.next(value))\n       } catch (e) {\n-        reject(e);\n+        reject(e)\n       }\n-    };\n+    }\n     var rejected = (value) => {\n       try {\n-        step(generator.throw(value));\n+        step(generator.throw(value))\n       } catch (e) {\n-        reject(e);\n+        reject(e)\n       }\n-    };\n-    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n-    step((generator = generator.apply(__this, __arguments)).next());\n-  });\n-};\n+    }\n+    var step = (x) => (x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected))\n+    step((generator = generator.apply(__this, __arguments)).next())\n+  })\n+}\n \n // src/components/player/StandAlonePlayer.tsx\n-import { useEffect as useEffect6, useMemo, useRef as useRef4, useState as useState7 } from \"react\";\n-import { clippingEvents } from \"@coconut-xr/koestlich\";\n-import { getInputSourceId } from \"@coconut-xr/natuerlich\";\n-import { PointerController, XRCanvas } from \"@coconut-xr/natuerlich/defaults\";\n-import { useXR as useXR3 } from \"@coconut-xr/natuerlich/react\";\n-import Hls from \"hls.js\";\n-import { useInputSources } from \"@coconut-xr/natuerlich/react\";\n+import { useEffect as useEffect6, useMemo, useRef as useRef4, useState as useState7 } from 'react'\n+import { clippingEvents } from '@coconut-xr/koestlich'\n+import { getInputSourceId } from '@coconut-xr/natuerlich'\n+import { PointerController, XRCanvas } from '@coconut-xr/natuerlich/defaults'\n+import { useXR as useXR3 } from '@coconut-xr/natuerlich/react'\n+import Hls from 'hls.js'\n+import { useInputSources } from '@coconut-xr/natuerlich/react'\n \n // src/components/360videoplayer/imageMesh.tsx\n-import { Sphere, useTexture } from \"@react-three/drei\";\n-import { useState, useEffect, useRef } from \"react\";\n-import { BackSide } from \"three\";\n-var ImageMesh = ({\n-  src,\n-  onPointerDown,\n-  onPointerUp,\n-  setImageReady,\n-  mediaId,\n-  isXR\n-}) => {\n-  console.log(\"Set Image Ready\");\n-  console.log(setImageReady);\n+import { Sphere, useTexture } from '@react-three/drei'\n+import { useState, useEffect, useRef } from 'react'\n+import { BackSide } from 'three'\n+var ImageMesh = ({ src, onPointerDown, onPointerUp, setImageReady, mediaId, isXR }) => {\n+  console.log('Set Image Ready')\n+  console.log(setImageReady)\n   const _texture = useTexture(src, (loader) => {\n     if (setImageReady) {\n-      setImageReady(true);\n+      setImageReady(true)\n     }\n-  });\n-  const meshRef = useRef();\n-  const [isAnimating, setIsAnimating] = useState(true);\n-  const imageBuffer = [];\n+  })\n+  const meshRef = useRef()\n+  const [isAnimating, setIsAnimating] = useState(true)\n+  const imageBuffer = []\n   useEffect(() => {\n-    let animationFrameId;\n+    let animationFrameId\n     const animate = () => {\n       if (isAnimating && meshRef.current && isXR) {\n-        meshRef.current.rotation.y += 2e-3;\n+        meshRef.current.rotation.y += 2e-3\n         if (meshRef.current.rotation.y >= Math.PI * 2) {\n-          meshRef.current.rotation.y = Math.PI * 2;\n-          meshRef.current.rotation.y = 0;\n+          meshRef.current.rotation.y = Math.PI * 2\n+          meshRef.current.rotation.y = 0\n         }\n-        animationFrameId = requestAnimationFrame(animate);\n+        animationFrameId = requestAnimationFrame(animate)\n       }\n-    };\n-    animate();\n+    }\n+    animate()\n     return () => {\n       if (animationFrameId) {\n-        cancelAnimationFrame(animationFrameId);\n+        cancelAnimationFrame(animationFrameId)\n       }\n       if (setImageReady) {\n-        setImageReady(true);\n+        setImageReady(true)\n       }\n-    };\n-  }, [isAnimating]);\n+    }\n+  }, [isAnimating])\n   useEffect(() => {\n     if (mediaId) {\n       if (!imageBuffer.length) {\n-        imageBuffer.push(1e3);\n+        imageBuffer.push(1e3)\n       }\n     }\n-  }, []);\n+  }, [])\n   const handleUserPan = () => {\n-    setIsAnimating(false);\n-  };\n+    setIsAnimating(false)\n+  }\n   useEffect(() => {\n-    setIsAnimating(true);\n-    onPointerDown();\n-  }, []);\n-  return <Sphere\n-    args={[100, 100, 100]}\n-    scale-x={-1}\n-    ref={meshRef}\n-    onPointerMove={handleUserPan}\n-    onPointerDown={onPointerDown}\n-    onPointerUp={onPointerUp}\n-  ><meshBasicMaterial map={_texture} toneMapped={false} side={BackSide} /></Sphere>;\n-};\n-var ImageMesh_default = ImageMesh;\n+    setIsAnimating(true)\n+    onPointerDown()\n+  }, [])\n+  return (\n+    <Sphere args={[100, 100, 100]} scale-x={-1} ref={meshRef} onPointerMove={handleUserPan} onPointerDown={onPointerDown} onPointerUp={onPointerUp}>\n+      <meshBasicMaterial map={_texture} toneMapped={false} side={BackSide} />\n+    </Sphere>\n+  )\n+}\n+var ImageMesh_default = ImageMesh\n \n // src/components/player/StandAlonePlayer.tsx\n-import { useThree as useThree2, useFrame } from \"@react-three/fiber\";\n-import { Euler, Matrix4, Vector3 as Vector32 } from \"three\";\n-import { OrbitControls, Sphere as Sphere2 } from \"@react-three/drei\";\n-import { Loader2 } from \"lucide-react\";\n-import { BackSide as BackSide3, VideoTexture } from \"three\";\n-import { SnackbarProvider } from \"notistack\";\n-import { usePathname } from \"next/navigation\";\n+import { useThree as useThree2, useFrame } from '@react-three/fiber'\n+import { Euler, Matrix4, Vector3 as Vector32 } from 'three'\n+import { OrbitControls, Sphere as Sphere2 } from '@react-three/drei'\n+import { Loader2 } from 'lucide-react'\n+import { BackSide as BackSide3, VideoTexture } from 'three'\n+import { SnackbarProvider } from 'notistack'\n+import { usePathname } from 'next/navigation'\n \n import React from 'react'\n \n // src/components/player/NewControls.tsx\n-import {\n-  ChevronLeft,\n-  ChevronRight,\n-  Pause,\n-  Play,\n-  Volume2,\n-  VolumeX\n-} from \"lucide-react\";\n-import { useEffect as useEffect2, useState as useState2, useRef as useRef2 } from \"react\";\n-import { useEnterXR, useXR, useSessionSupported } from \"@coconut-xr/natuerlich/react\";\n+import { ChevronLeft, ChevronRight, Pause, Play, Volume2, VolumeX } from 'lucide-react'\n+import { useEffect as useEffect2, useState as useState2, useRef as useRef2 } from 'react'\n+import { useEnterXR, useXR, useSessionSupported } from '@coconut-xr/natuerlich/react'\n \n // src/lib/utils.ts\n-import { clsx } from \"clsx\";\n+import { clsx } from 'clsx'\n \n // ../../node_modules/.pnpm/tailwind-merge@2.5.2/node_modules/tailwind-merge/dist/bundle-mjs.mjs\n-var CLASS_PART_SEPARATOR = \"-\";\n+var CLASS_PART_SEPARATOR = '-'\n var createClassGroupUtils = (config) => {\n-  const classMap = createClassMap(config);\n-  const {\n-    conflictingClassGroups,\n-    conflictingClassGroupModifiers\n-  } = config;\n+  const classMap = createClassMap(config)\n+  const { conflictingClassGroups, conflictingClassGroupModifiers } = config\n   const getClassGroupId = (className) => {\n-    const classParts = className.split(CLASS_PART_SEPARATOR);\n-    if (classParts[0] === \"\" && classParts.length !== 1) {\n-      classParts.shift();\n+    const classParts = className.split(CLASS_PART_SEPARATOR)\n+    if (classParts[0] === '' && classParts.length !== 1) {\n+      classParts.shift()\n     }\n-    return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);\n-  };\n+    return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className)\n+  }\n   const getConflictingClassGroupIds = (classGroupId, hasPostfixModifier) => {\n-    const conflicts = conflictingClassGroups[classGroupId] || [];\n+    const conflicts = conflictingClassGroups[classGroupId] || []\n     if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {\n-      return [...conflicts, ...conflictingClassGroupModifiers[classGroupId]];\n+      return [...conflicts, ...conflictingClassGroupModifiers[classGroupId]]\n     }\n-    return conflicts;\n-  };\n+    return conflicts\n+  }\n   return {\n     getClassGroupId,\n-    getConflictingClassGroupIds\n-  };\n-};\n+    getConflictingClassGroupIds,\n+  }\n+}\n var getGroupRecursive = (classParts, classPartObject) => {\n-  var _a;\n+  var _a\n   if (classParts.length === 0) {\n-    return classPartObject.classGroupId;\n+    return classPartObject.classGroupId\n   }\n-  const currentClassPart = classParts[0];\n-  const nextClassPartObject = classPartObject.nextPart.get(currentClassPart);\n-  const classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : void 0;\n+  const currentClassPart = classParts[0]\n+  const nextClassPartObject = classPartObject.nextPart.get(currentClassPart)\n+  const classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : void 0\n   if (classGroupFromNextClassPart) {\n-    return classGroupFromNextClassPart;\n+    return classGroupFromNextClassPart\n   }\n   if (classPartObject.validators.length === 0) {\n-    return void 0;\n+    return void 0\n   }\n-  const classRest = classParts.join(CLASS_PART_SEPARATOR);\n-  return (_a = classPartObject.validators.find(({\n-    validator\n-  }) => validator(classRest))) == null ? void 0 : _a.classGroupId;\n-};\n-var arbitraryPropertyRegex = /^\\[(.+)\\]$/;\n+  const classRest = classParts.join(CLASS_PART_SEPARATOR)\n+  return (_a = classPartObject.validators.find(({ validator }) => validator(classRest))) == null ? void 0 : _a.classGroupId\n+}\n+var arbitraryPropertyRegex = /^\\[(.+)\\]$/\n var getGroupIdForArbitraryProperty = (className) => {\n   if (arbitraryPropertyRegex.test(className)) {\n-    const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];\n-    const property = arbitraryPropertyClassName == null ? void 0 : arbitraryPropertyClassName.substring(0, arbitraryPropertyClassName.indexOf(\":\"));\n+    const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1]\n+    const property = arbitraryPropertyClassName == null ? void 0 : arbitraryPropertyClassName.substring(0, arbitraryPropertyClassName.indexOf(':'))\n     if (property) {\n-      return \"arbitrary..\" + property;\n+      return 'arbitrary..' + property\n     }\n   }\n-};\n+}\n var createClassMap = (config) => {\n-  const {\n-    theme,\n-    prefix\n-  } = config;\n+  const { theme, prefix } = config\n   const classMap = {\n     nextPart: /* @__PURE__ */ new Map(),\n-    validators: []\n-  };\n-  const prefixedClassGroupEntries = getPrefixedClassGroupEntries(Object.entries(config.classGroups), prefix);\n+    validators: [],\n+  }\n+  const prefixedClassGroupEntries = getPrefixedClassGroupEntries(Object.entries(config.classGroups), prefix)\n   prefixedClassGroupEntries.forEach(([classGroupId, classGroup]) => {\n-    processClassesRecursively(classGroup, classMap, classGroupId, theme);\n-  });\n-  return classMap;\n-};\n+    processClassesRecursively(classGroup, classMap, classGroupId, theme)\n+  })\n+  return classMap\n+}\n var processClassesRecursively = (classGroup, classPartObject, classGroupId, theme) => {\n   classGroup.forEach((classDefinition) => {\n-    if (typeof classDefinition === \"string\") {\n-      const classPartObjectToEdit = classDefinition === \"\" ? classPartObject : getPart(classPartObject, classDefinition);\n-      classPartObjectToEdit.classGroupId = classGroupId;\n-      return;\n+    if (typeof classDefinition === 'string') {\n+      const classPartObjectToEdit = classDefinition === '' ? classPartObject : getPart(classPartObject, classDefinition)\n+      classPartObjectToEdit.classGroupId = classGroupId\n+      return\n     }\n-    if (typeof classDefinition === \"function\") {\n+    if (typeof classDefinition === 'function') {\n       if (isThemeGetter(classDefinition)) {\n-        processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);\n-        return;\n+        processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme)\n+        return\n       }\n       classPartObject.validators.push({\n         validator: classDefinition,\n-        classGroupId\n-      });\n-      return;\n+        classGroupId,\n+      })\n+      return\n     }\n     Object.entries(classDefinition).forEach(([key, classGroup2]) => {\n-      processClassesRecursively(classGroup2, getPart(classPartObject, key), classGroupId, theme);\n-    });\n-  });\n-};\n+      processClassesRecursively(classGroup2, getPart(classPartObject, key), classGroupId, theme)\n+    })\n+  })\n+}\n var getPart = (classPartObject, path) => {\n-  let currentClassPartObject = classPartObject;\n+  let currentClassPartObject = classPartObject\n   path.split(CLASS_PART_SEPARATOR).forEach((pathPart) => {\n     if (!currentClassPartObject.nextPart.has(pathPart)) {\n       currentClassPartObject.nextPart.set(pathPart, {\n         nextPart: /* @__PURE__ */ new Map(),\n-        validators: []\n-      });\n+        validators: [],\n+      })\n     }\n-    currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);\n-  });\n-  return currentClassPartObject;\n-};\n-var isThemeGetter = (func) => func.isThemeGetter;\n+    currentClassPartObject = currentClassPartObject.nextPart.get(pathPart)\n+  })\n+  return currentClassPartObject\n+}\n+var isThemeGetter = (func) => func.isThemeGetter\n var getPrefixedClassGroupEntries = (classGroupEntries, prefix) => {\n   if (!prefix) {\n-    return classGroupEntries;\n+    return classGroupEntries\n   }\n   return classGroupEntries.map(([classGroupId, classGroup]) => {\n     const prefixedClassGroup = classGroup.map((classDefinition) => {\n-      if (typeof classDefinition === \"string\") {\n-        return prefix + classDefinition;\n+      if (typeof classDefinition === 'string') {\n+        return prefix + classDefinition\n       }\n-      if (typeof classDefinition === \"object\") {\n-        return Object.fromEntries(Object.entries(classDefinition).map(([key, value]) => [prefix + key, value]));\n+      if (typeof classDefinition === 'object') {\n+        return Object.fromEntries(Object.entries(classDefinition).map(([key, value]) => [prefix + key, value]))\n       }\n-      return classDefinition;\n-    });\n-    return [classGroupId, prefixedClassGroup];\n-  });\n-};\n+      return classDefinition\n+    })\n+    return [classGroupId, prefixedClassGroup]\n+  })\n+}\n var createLruCache = (maxCacheSize) => {\n   if (maxCacheSize < 1) {\n     return {\n       get: () => void 0,\n-      set: () => {\n-      }\n-    };\n+      set: () => {},\n+    }\n   }\n-  let cacheSize = 0;\n-  let cache = /* @__PURE__ */ new Map();\n-  let previousCache = /* @__PURE__ */ new Map();\n+  let cacheSize = 0\n+  let cache = /* @__PURE__ */ new Map()\n+  let previousCache = /* @__PURE__ */ new Map()\n   const update = (key, value) => {\n-    cache.set(key, value);\n-    cacheSize++;\n+    cache.set(key, value)\n+    cacheSize++\n     if (cacheSize > maxCacheSize) {\n-      cacheSize = 0;\n-      previousCache = cache;\n-      cache = /* @__PURE__ */ new Map();\n+      cacheSize = 0\n+      previousCache = cache\n+      cache = /* @__PURE__ */ new Map()\n     }\n-  };\n+  }\n   return {\n     get(key) {\n-      let value = cache.get(key);\n+      let value = cache.get(key)\n       if (value !== void 0) {\n-        return value;\n+        return value\n       }\n       if ((value = previousCache.get(key)) !== void 0) {\n-        update(key, value);\n-        return value;\n+        update(key, value)\n+        return value\n       }\n     },\n     set(key, value) {\n       if (cache.has(key)) {\n-        cache.set(key, value);\n+        cache.set(key, value)\n       } else {\n-        update(key, value);\n+        update(key, value)\n       }\n-    }\n-  };\n-};\n-var IMPORTANT_MODIFIER = \"!\";\n+    },\n+  }\n+}\n+var IMPORTANT_MODIFIER = '!'\n var createParseClassName = (config) => {\n-  const {\n-    separator,\n-    experimentalParseClassName\n-  } = config;\n-  const isSeparatorSingleCharacter = separator.length === 1;\n-  const firstSeparatorCharacter = separator[0];\n-  const separatorLength = separator.length;\n+  const { separator, experimentalParseClassName } = config\n+  const isSeparatorSingleCharacter = separator.length === 1\n+  const firstSeparatorCharacter = separator[0]\n+  const separatorLength = separator.length\n   const parseClassName = (className) => {\n-    const modifiers = [];\n-    let bracketDepth = 0;\n-    let modifierStart = 0;\n-    let postfixModifierPosition;\n+    const modifiers = []\n+    let bracketDepth = 0\n+    let modifierStart = 0\n+    let postfixModifierPosition\n     for (let index = 0; index < className.length; index++) {\n-      let currentCharacter = className[index];\n+      let currentCharacter = className[index]\n       if (bracketDepth === 0) {\n         if (currentCharacter === firstSeparatorCharacter && (isSeparatorSingleCharacter || className.slice(index, index + separatorLength) === separator)) {\n-          modifiers.push(className.slice(modifierStart, index));\n-          modifierStart = index + separatorLength;\n-          continue;\n+          modifiers.push(className.slice(modifierStart, index))\n+          modifierStart = index + separatorLength\n+          continue\n         }\n-        if (currentCharacter === \"/\") {\n-          postfixModifierPosition = index;\n-          continue;\n+        if (currentCharacter === '/') {\n+          postfixModifierPosition = index\n+          continue\n         }\n       }\n-      if (currentCharacter === \"[\") {\n-        bracketDepth++;\n-      } else if (currentCharacter === \"]\") {\n-        bracketDepth--;\n+      if (currentCharacter === '[') {\n+        bracketDepth++\n+      } else if (currentCharacter === ']') {\n+        bracketDepth--\n       }\n     }\n-    const baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);\n-    const hasImportantModifier = baseClassNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER);\n-    const baseClassName = hasImportantModifier ? baseClassNameWithImportantModifier.substring(1) : baseClassNameWithImportantModifier;\n-    const maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : void 0;\n+    const baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart)\n+    const hasImportantModifier = baseClassNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER)\n+    const baseClassName = hasImportantModifier ? baseClassNameWithImportantModifier.substring(1) : baseClassNameWithImportantModifier\n+    const maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : void 0\n     return {\n       modifiers,\n       hasImportantModifier,\n       baseClassName,\n-      maybePostfixModifierPosition\n-    };\n-  };\n+      maybePostfixModifierPosition,\n+    }\n+  }\n   if (experimentalParseClassName) {\n-    return (className) => experimentalParseClassName({\n-      className,\n-      parseClassName\n-    });\n+    return (className) =>\n+      experimentalParseClassName({\n+        className,\n+        parseClassName,\n+      })\n   }\n-  return parseClassName;\n-};\n+  return parseClassName\n+}\n var sortModifiers = (modifiers) => {\n   if (modifiers.length <= 1) {\n-    return modifiers;\n+    return modifiers\n   }\n-  const sortedModifiers = [];\n-  let unsortedModifiers = [];\n+  const sortedModifiers = []\n+  let unsortedModifiers = []\n   modifiers.forEach((modifier) => {\n-    const isArbitraryVariant = modifier[0] === \"[\";\n+    const isArbitraryVariant = modifier[0] === '['\n     if (isArbitraryVariant) {\n-      sortedModifiers.push(...unsortedModifiers.sort(), modifier);\n-      unsortedModifiers = [];\n+      sortedModifiers.push(...unsortedModifiers.sort(), modifier)\n+      unsortedModifiers = []\n     } else {\n-      unsortedModifiers.push(modifier);\n+      unsortedModifiers.push(modifier)\n     }\n-  });\n-  sortedModifiers.push(...unsortedModifiers.sort());\n-  return sortedModifiers;\n-};\n-var createConfigUtils = (config) => __spreadValues({\n-  cache: createLruCache(config.cacheSize),\n-  parseClassName: createParseClassName(config)\n-}, createClassGroupUtils(config));\n-var SPLIT_CLASSES_REGEX = /\\s+/;\n+  })\n+  sortedModifiers.push(...unsortedModifiers.sort())\n+  return sortedModifiers\n+}\n+var createConfigUtils = (config) =>\n+  __spreadValues(\n+    {\n+      cache: createLruCache(config.cacheSize),\n+      parseClassName: createParseClassName(config),\n+    },\n+    createClassGroupUtils(config)\n+  )\n+var SPLIT_CLASSES_REGEX = /\\s+/\n var mergeClassList = (classList, configUtils) => {\n-  const {\n-    parseClassName,\n-    getClassGroupId,\n-    getConflictingClassGroupIds\n-  } = configUtils;\n-  const classGroupsInConflict = [];\n-  const classNames = classList.trim().split(SPLIT_CLASSES_REGEX);\n-  let result = \"\";\n+  const { parseClassName, getClassGroupId, getConflictingClassGroupIds } = configUtils\n+  const classGroupsInConflict = []\n+  const classNames = classList.trim().split(SPLIT_CLASSES_REGEX)\n+  let result = ''\n   for (let index = classNames.length - 1; index >= 0; index -= 1) {\n-    const originalClassName = classNames[index];\n-    const {\n-      modifiers,\n-      hasImportantModifier,\n-      baseClassName,\n-      maybePostfixModifierPosition\n-    } = parseClassName(originalClassName);\n-    let hasPostfixModifier = Boolean(maybePostfixModifierPosition);\n-    let classGroupId = getClassGroupId(hasPostfixModifier ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);\n+    const originalClassName = classNames[index]\n+    const { modifiers, hasImportantModifier, baseClassName, maybePostfixModifierPosition } = parseClassName(originalClassName)\n+    let hasPostfixModifier = Boolean(maybePostfixModifierPosition)\n+    let classGroupId = getClassGroupId(hasPostfixModifier ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName)\n     if (!classGroupId) {\n       if (!hasPostfixModifier) {\n-        result = originalClassName + (result.length > 0 ? \" \" + result : result);\n-        continue;\n+        result = originalClassName + (result.length > 0 ? ' ' + result : result)\n+        continue\n       }\n-      classGroupId = getClassGroupId(baseClassName);\n+      classGroupId = getClassGroupId(baseClassName)\n       if (!classGroupId) {\n-        result = originalClassName + (result.length > 0 ? \" \" + result : result);\n-        continue;\n+        result = originalClassName + (result.length > 0 ? ' ' + result : result)\n+        continue\n       }\n-      hasPostfixModifier = false;\n+      hasPostfixModifier = false\n     }\n-    const variantModifier = sortModifiers(modifiers).join(\":\");\n-    const modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;\n-    const classId = modifierId + classGroupId;\n+    const variantModifier = sortModifiers(modifiers).join(':')\n+    const modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier\n+    const classId = modifierId + classGroupId\n     if (classGroupsInConflict.includes(classId)) {\n-      continue;\n+      continue\n     }\n-    classGroupsInConflict.push(classId);\n-    const conflictGroups = getConflictingClassGroupIds(classGroupId, hasPostfixModifier);\n+    classGroupsInConflict.push(classId)\n+    const conflictGroups = getConflictingClassGroupIds(classGroupId, hasPostfixModifier)\n     for (let i = 0; i < conflictGroups.length; ++i) {\n-      const group = conflictGroups[i];\n-      classGroupsInConflict.push(modifierId + group);\n+      const group = conflictGroups[i]\n+      classGroupsInConflict.push(modifierId + group)\n     }\n-    result = originalClassName + (result.length > 0 ? \" \" + result : result);\n+    result = originalClassName + (result.length > 0 ? ' ' + result : result)\n   }\n-  return result;\n-};\n+  return result\n+}\n function twJoin() {\n-  let index = 0;\n-  let argument;\n-  let resolvedValue;\n-  let string = \"\";\n+  let index = 0\n+  let argument\n+  let resolvedValue\n+  let string = ''\n   while (index < arguments.length) {\n-    if (argument = arguments[index++]) {\n-      if (resolvedValue = toValue(argument)) {\n-        string && (string += \" \");\n-        string += resolvedValue;\n+    if ((argument = arguments[index++])) {\n+      if ((resolvedValue = toValue(argument))) {\n+        string && (string += ' ')\n+        string += resolvedValue\n       }\n     }\n   }\n-  return string;\n+  return string\n }\n var toValue = (mix) => {\n-  if (typeof mix === \"string\") {\n-    return mix;\n+  if (typeof mix === 'string') {\n+    return mix\n   }\n-  let resolvedValue;\n-  let string = \"\";\n+  let resolvedValue\n+  let string = ''\n   for (let k = 0; k < mix.length; k++) {\n     if (mix[k]) {\n-      if (resolvedValue = toValue(mix[k])) {\n-        string && (string += \" \");\n-        string += resolvedValue;\n+      if ((resolvedValue = toValue(mix[k]))) {\n+        string && (string += ' ')\n+        string += resolvedValue\n       }\n     }\n   }\n-  return string;\n-};\n+  return string\n+}\n function createTailwindMerge(createConfigFirst, ...createConfigRest) {\n-  let configUtils;\n-  let cacheGet;\n-  let cacheSet;\n-  let functionToCall = initTailwindMerge;\n+  let configUtils\n+  let cacheGet\n+  let cacheSet\n+  let functionToCall = initTailwindMerge\n   function initTailwindMerge(classList) {\n-    const config = createConfigRest.reduce((previousConfig, createConfigCurrent) => createConfigCurrent(previousConfig), createConfigFirst());\n-    configUtils = createConfigUtils(config);\n-    cacheGet = configUtils.cache.get;\n-    cacheSet = configUtils.cache.set;\n-    functionToCall = tailwindMerge;\n-    return tailwindMerge(classList);\n+    const config = createConfigRest.reduce((previousConfig, createConfigCurrent) => createConfigCurrent(previousConfig), createConfigFirst())\n+    configUtils = createConfigUtils(config)\n+    cacheGet = configUtils.cache.get\n+    cacheSet = configUtils.cache.set\n+    functionToCall = tailwindMerge\n+    return tailwindMerge(classList)\n   }\n   function tailwindMerge(classList) {\n-    const cachedResult = cacheGet(classList);\n+    const cachedResult = cacheGet(classList)\n     if (cachedResult) {\n-      return cachedResult;\n+      return cachedResult\n     }\n-    const result = mergeClassList(classList, configUtils);\n-    cacheSet(classList, result);\n-    return result;\n+    const result = mergeClassList(classList, configUtils)\n+    cacheSet(classList, result)\n+    return result\n   }\n   return function callTailwindMerge() {\n-    return functionToCall(twJoin.apply(null, arguments));\n-  };\n+    return functionToCall(twJoin.apply(null, arguments))\n+  }\n }\n var fromTheme = (key) => {\n-  const themeGetter = (theme) => theme[key] || [];\n-  themeGetter.isThemeGetter = true;\n-  return themeGetter;\n-};\n-var arbitraryValueRegex = /^\\[(?:([a-z-]+):)?(.+)\\]$/i;\n-var fractionRegex = /^\\d+\\/\\d+$/;\n-var stringLengths = /* @__PURE__ */ new Set([\"px\", \"full\", \"screen\"]);\n-var tshirtUnitRegex = /^(\\d+(\\.\\d+)?)?(xs|sm|md|lg|xl)$/;\n-var lengthUnitRegex = /\\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\\b(calc|min|max|clamp)\\(.+\\)|^0$/;\n-var colorFunctionRegex = /^(rgba?|hsla?|hwb|(ok)?(lab|lch))\\(.+\\)$/;\n-var shadowRegex = /^(inset_)?-?((\\d+)?\\.?(\\d+)[a-z]+|0)_-?((\\d+)?\\.?(\\d+)[a-z]+|0)/;\n-var imageRegex = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\\(.+\\)$/;\n-var isLength = (value) => isNumber(value) || stringLengths.has(value) || fractionRegex.test(value);\n-var isArbitraryLength = (value) => getIsArbitraryValue(value, \"length\", isLengthOnly);\n-var isNumber = (value) => Boolean(value) && !Number.isNaN(Number(value));\n-var isArbitraryNumber = (value) => getIsArbitraryValue(value, \"number\", isNumber);\n-var isInteger = (value) => Boolean(value) && Number.isInteger(Number(value));\n-var isPercent = (value) => value.endsWith(\"%\") && isNumber(value.slice(0, -1));\n-var isArbitraryValue = (value) => arbitraryValueRegex.test(value);\n-var isTshirtSize = (value) => tshirtUnitRegex.test(value);\n-var sizeLabels = /* @__PURE__ */ new Set([\"length\", \"size\", \"percentage\"]);\n-var isArbitrarySize = (value) => getIsArbitraryValue(value, sizeLabels, isNever);\n-var isArbitraryPosition = (value) => getIsArbitraryValue(value, \"position\", isNever);\n-var imageLabels = /* @__PURE__ */ new Set([\"image\", \"url\"]);\n-var isArbitraryImage = (value) => getIsArbitraryValue(value, imageLabels, isImage);\n-var isArbitraryShadow = (value) => getIsArbitraryValue(value, \"\", isShadow);\n-var isAny = () => true;\n+  const themeGetter = (theme) => theme[key] || []\n+  themeGetter.isThemeGetter = true\n+  return themeGetter\n+}\n+var arbitraryValueRegex = /^\\[(?:([a-z-]+):)?(.+)\\]$/i\n+var fractionRegex = /^\\d+\\/\\d+$/\n+var stringLengths = /* @__PURE__ */ new Set(['px', 'full', 'screen'])\n+var tshirtUnitRegex = /^(\\d+(\\.\\d+)?)?(xs|sm|md|lg|xl)$/\n+var lengthUnitRegex = /\\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\\b(calc|min|max|clamp)\\(.+\\)|^0$/\n+var colorFunctionRegex = /^(rgba?|hsla?|hwb|(ok)?(lab|lch))\\(.+\\)$/\n+var shadowRegex = /^(inset_)?-?((\\d+)?\\.?(\\d+)[a-z]+|0)_-?((\\d+)?\\.?(\\d+)[a-z]+|0)/\n+var imageRegex = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\\(.+\\)$/\n+var isLength = (value) => isNumber(value) || stringLengths.has(value) || fractionRegex.test(value)\n+var isArbitraryLength = (value) => getIsArbitraryValue(value, 'length', isLengthOnly)\n+var isNumber = (value) => Boolean(value) && !Number.isNaN(Number(value))\n+var isArbitraryNumber = (value) => getIsArbitraryValue(value, 'number', isNumber)\n+var isInteger = (value) => Boolean(value) && Number.isInteger(Number(value))\n+var isPercent = (value) => value.endsWith('%') && isNumber(value.slice(0, -1))\n+var isArbitraryValue = (value) => arbitraryValueRegex.test(value)\n+var isTshirtSize = (value) => tshirtUnitRegex.test(value)\n+var sizeLabels = /* @__PURE__ */ new Set(['length', 'size', 'percentage'])\n+var isArbitrarySize = (value) => getIsArbitraryValue(value, sizeLabels, isNever)\n+var isArbitraryPosition = (value) => getIsArbitraryValue(value, 'position', isNever)\n+var imageLabels = /* @__PURE__ */ new Set(['image', 'url'])\n+var isArbitraryImage = (value) => getIsArbitraryValue(value, imageLabels, isImage)\n+var isArbitraryShadow = (value) => getIsArbitraryValue(value, '', isShadow)\n+var isAny = () => true\n var getIsArbitraryValue = (value, label, testValue) => {\n-  const result = arbitraryValueRegex.exec(value);\n+  const result = arbitraryValueRegex.exec(value)\n   if (result) {\n     if (result[1]) {\n-      return typeof label === \"string\" ? result[1] === label : label.has(result[1]);\n+      return typeof label === 'string' ? result[1] === label : label.has(result[1])\n     }\n-    return testValue(result[2]);\n+    return testValue(result[2])\n   }\n-  return false;\n-};\n-var isLengthOnly = (value) => (\n+  return false\n+}\n+var isLengthOnly = (value) =>\n   // `colorFunctionRegex` check is necessary because color functions can have percentages in them which which would be incorrectly classified as lengths.\n   // For example, `hsl(0 0% 0%)` would be classified as a length without this check.\n   // I could also use lookbehind assertion in `lengthUnitRegex` but that isn't supported widely enough.\n   lengthUnitRegex.test(value) && !colorFunctionRegex.test(value)\n-);\n-var isNever = () => false;\n-var isShadow = (value) => shadowRegex.test(value);\n-var isImage = (value) => imageRegex.test(value);\n+var isNever = () => false\n+var isShadow = (value) => shadowRegex.test(value)\n+var isImage = (value) => imageRegex.test(value)\n var getDefaultConfig = () => {\n-  const colors = fromTheme(\"colors\");\n-  const spacing = fromTheme(\"spacing\");\n-  const blur = fromTheme(\"blur\");\n-  const brightness = fromTheme(\"brightness\");\n-  const borderColor = fromTheme(\"borderColor\");\n-  const borderRadius = fromTheme(\"borderRadius\");\n-  const borderSpacing = fromTheme(\"borderSpacing\");\n-  const borderWidth = fromTheme(\"borderWidth\");\n-  const contrast = fromTheme(\"contrast\");\n-  const grayscale = fromTheme(\"grayscale\");\n-  const hueRotate = fromTheme(\"hueRotate\");\n-  const invert = fromTheme(\"invert\");\n-  const gap = fromTheme(\"gap\");\n-  const gradientColorStops = fromTheme(\"gradientColorStops\");\n-  const gradientColorStopPositions = fromTheme(\"gradientColorStopPositions\");\n-  const inset = fromTheme(\"inset\");\n-  const margin = fromTheme(\"margin\");\n-  const opacity = fromTheme(\"opacity\");\n-  const padding = fromTheme(\"padding\");\n-  const saturate = fromTheme(\"saturate\");\n-  const scale = fromTheme(\"scale\");\n-  const sepia = fromTheme(\"sepia\");\n-  const skew = fromTheme(\"skew\");\n-  const space = fromTheme(\"space\");\n-  const translate = fromTheme(\"translate\");\n-  const getOverscroll = () => [\"auto\", \"contain\", \"none\"];\n-  const getOverflow = () => [\"auto\", \"hidden\", \"clip\", \"visible\", \"scroll\"];\n-  const getSpacingWithAutoAndArbitrary = () => [\"auto\", isArbitraryValue, spacing];\n-  const getSpacingWithArbitrary = () => [isArbitraryValue, spacing];\n-  const getLengthWithEmptyAndArbitrary = () => [\"\", isLength, isArbitraryLength];\n-  const getNumberWithAutoAndArbitrary = () => [\"auto\", isNumber, isArbitraryValue];\n-  const getPositions = () => [\"bottom\", \"center\", \"left\", \"left-bottom\", \"left-top\", \"right\", \"right-bottom\", \"right-top\", \"top\"];\n-  const getLineStyles = () => [\"solid\", \"dashed\", \"dotted\", \"double\", \"none\"];\n-  const getBlendModes = () => [\"normal\", \"multiply\", \"screen\", \"overlay\", \"darken\", \"lighten\", \"color-dodge\", \"color-burn\", \"hard-light\", \"soft-light\", \"difference\", \"exclusion\", \"hue\", \"saturation\", \"color\", \"luminosity\"];\n-  const getAlign = () => [\"start\", \"end\", \"center\", \"between\", \"around\", \"evenly\", \"stretch\"];\n-  const getZeroAndEmpty = () => [\"\", \"0\", isArbitraryValue];\n-  const getBreaks = () => [\"auto\", \"avoid\", \"all\", \"avoid-page\", \"page\", \"left\", \"right\", \"column\"];\n-  const getNumberAndArbitrary = () => [isNumber, isArbitraryValue];\n+  const colors = fromTheme('colors')\n+  const spacing = fromTheme('spacing')\n+  const blur = fromTheme('blur')\n+  const brightness = fromTheme('brightness')\n+  const borderColor = fromTheme('borderColor')\n+  const borderRadius = fromTheme('borderRadius')\n+  const borderSpacing = fromTheme('borderSpacing')\n+  const borderWidth = fromTheme('borderWidth')\n+  const contrast = fromTheme('contrast')\n+  const grayscale = fromTheme('grayscale')\n+  const hueRotate = fromTheme('hueRotate')\n+  const invert = fromTheme('invert')\n+  const gap = fromTheme('gap')\n+  const gradientColorStops = fromTheme('gradientColorStops')\n+  const gradientColorStopPositions = fromTheme('gradientColorStopPositions')\n+  const inset = fromTheme('inset')\n+  const margin = fromTheme('margin')\n+  const opacity = fromTheme('opacity')\n+  const padding = fromTheme('padding')\n+  const saturate = fromTheme('saturate')\n+  const scale = fromTheme('scale')\n+  const sepia = fromTheme('sepia')\n+  const skew = fromTheme('skew')\n+  const space = fromTheme('space')\n+  const translate = fromTheme('translate')\n+  const getOverscroll = () => ['auto', 'contain', 'none']\n+  const getOverflow = () => ['auto', 'hidden', 'clip', 'visible', 'scroll']\n+  const getSpacingWithAutoAndArbitrary = () => ['auto', isArbitraryValue, spacing]\n+  const getSpacingWithArbitrary = () => [isArbitraryValue, spacing]\n+  const getLengthWithEmptyAndArbitrary = () => ['', isLength, isArbitraryLength]\n+  const getNumberWithAutoAndArbitrary = () => ['auto', isNumber, isArbitraryValue]\n+  const getPositions = () => ['bottom', 'center', 'left', 'left-bottom', 'left-top', 'right', 'right-bottom', 'right-top', 'top']\n+  const getLineStyles = () => ['solid', 'dashed', 'dotted', 'double', 'none']\n+  const getBlendModes = () => [\n+    'normal',\n+    'multiply',\n+    'screen',\n+    'overlay',\n+    'darken',\n+    'lighten',\n+    'color-dodge',\n+    'color-burn',\n+    'hard-light',\n+    'soft-light',\n+    'difference',\n+    'exclusion',\n+    'hue',\n+    'saturation',\n+    'color',\n+    'luminosity',\n+  ]\n+  const getAlign = () => ['start', 'end', 'center', 'between', 'around', 'evenly', 'stretch']\n+  const getZeroAndEmpty = () => ['', '0', isArbitraryValue]\n+  const getBreaks = () => ['auto', 'avoid', 'all', 'avoid-page', 'page', 'left', 'right', 'column']\n+  const getNumberAndArbitrary = () => [isNumber, isArbitraryValue]\n   return {\n     cacheSize: 500,\n-    separator: \":\",\n+    separator: ':',\n     theme: {\n       colors: [isAny],\n       spacing: [isLength, isArbitraryLength],\n-      blur: [\"none\", \"\", isTshirtSize, isArbitraryValue],\n+      blur: ['none', '', isTshirtSize, isArbitraryValue],\n       brightness: getNumberAndArbitrary(),\n       borderColor: [colors],\n-      borderRadius: [\"none\", \"\", \"full\", isTshirtSize, isArbitraryValue],\n+      borderRadius: ['none', '', 'full', isTshirtSize, isArbitraryValue],\n       borderSpacing: getSpacingWithArbitrary(),\n       borderWidth: getLengthWithEmptyAndArbitrary(),\n       contrast: getNumberAndArbitrary(),\n       grayscale: getZeroAndEmpty(),\n@@ -609,2921 +587,3584 @@\n       scale: getNumberAndArbitrary(),\n       sepia: getZeroAndEmpty(),\n       skew: getNumberAndArbitrary(),\n       space: getSpacingWithArbitrary(),\n-      translate: getSpacingWithArbitrary()\n+      translate: getSpacingWithArbitrary(),\n     },\n     classGroups: {\n       // Layout\n       /**\n        * Aspect Ratio\n        * @see https://tailwindcss.com/docs/aspect-ratio\n        */\n-      aspect: [{\n-        aspect: [\"auto\", \"square\", \"video\", isArbitraryValue]\n-      }],\n+      aspect: [\n+        {\n+          aspect: ['auto', 'square', 'video', isArbitraryValue],\n+        },\n+      ],\n       /**\n        * Container\n        * @see https://tailwindcss.com/docs/container\n        */\n-      container: [\"container\"],\n+      container: ['container'],\n       /**\n        * Columns\n        * @see https://tailwindcss.com/docs/columns\n        */\n-      columns: [{\n-        columns: [isTshirtSize]\n-      }],\n+      columns: [\n+        {\n+          columns: [isTshirtSize],\n+        },\n+      ],\n       /**\n        * Break After\n        * @see https://tailwindcss.com/docs/break-after\n        */\n-      \"break-after\": [{\n-        \"break-after\": getBreaks()\n-      }],\n+      'break-after': [\n+        {\n+          'break-after': getBreaks(),\n+        },\n+      ],\n       /**\n        * Break Before\n        * @see https://tailwindcss.com/docs/break-before\n        */\n-      \"break-before\": [{\n-        \"break-before\": getBreaks()\n-      }],\n+      'break-before': [\n+        {\n+          'break-before': getBreaks(),\n+        },\n+      ],\n       /**\n        * Break Inside\n        * @see https://tailwindcss.com/docs/break-inside\n        */\n-      \"break-inside\": [{\n-        \"break-inside\": [\"auto\", \"avoid\", \"avoid-page\", \"avoid-column\"]\n-      }],\n+      'break-inside': [\n+        {\n+          'break-inside': ['auto', 'avoid', 'avoid-page', 'avoid-column'],\n+        },\n+      ],\n       /**\n        * Box Decoration Break\n        * @see https://tailwindcss.com/docs/box-decoration-break\n        */\n-      \"box-decoration\": [{\n-        \"box-decoration\": [\"slice\", \"clone\"]\n-      }],\n+      'box-decoration': [\n+        {\n+          'box-decoration': ['slice', 'clone'],\n+        },\n+      ],\n       /**\n        * Box Sizing\n        * @see https://tailwindcss.com/docs/box-sizing\n        */\n-      box: [{\n-        box: [\"border\", \"content\"]\n-      }],\n+      box: [\n+        {\n+          box: ['border', 'content'],\n+        },\n+      ],\n       /**\n        * Display\n        * @see https://tailwindcss.com/docs/display\n        */\n-      display: [\"block\", \"inline-block\", \"inline\", \"flex\", \"inline-flex\", \"table\", \"inline-table\", \"table-caption\", \"table-cell\", \"table-column\", \"table-column-group\", \"table-footer-group\", \"table-header-group\", \"table-row-group\", \"table-row\", \"flow-root\", \"grid\", \"inline-grid\", \"contents\", \"list-item\", \"hidden\"],\n+      display: [\n+        'block',\n+        'inline-block',\n+        'inline',\n+        'flex',\n+        'inline-flex',\n+        'table',\n+        'inline-table',\n+        'table-caption',\n+        'table-cell',\n+        'table-column',\n+        'table-column-group',\n+        'table-footer-group',\n+        'table-header-group',\n+        'table-row-group',\n+        'table-row',\n+        'flow-root',\n+        'grid',\n+        'inline-grid',\n+        'contents',\n+        'list-item',\n+        'hidden',\n+      ],\n       /**\n        * Floats\n        * @see https://tailwindcss.com/docs/float\n        */\n-      float: [{\n-        float: [\"right\", \"left\", \"none\", \"start\", \"end\"]\n-      }],\n+      float: [\n+        {\n+          float: ['right', 'left', 'none', 'start', 'end'],\n+        },\n+      ],\n       /**\n        * Clear\n        * @see https://tailwindcss.com/docs/clear\n        */\n-      clear: [{\n-        clear: [\"left\", \"right\", \"both\", \"none\", \"start\", \"end\"]\n-      }],\n+      clear: [\n+        {\n+          clear: ['left', 'right', 'both', 'none', 'start', 'end'],\n+        },\n+      ],\n       /**\n        * Isolation\n        * @see https://tailwindcss.com/docs/isolation\n        */\n-      isolation: [\"isolate\", \"isolation-auto\"],\n+      isolation: ['isolate', 'isolation-auto'],\n       /**\n        * Object Fit\n        * @see https://tailwindcss.com/docs/object-fit\n        */\n-      \"object-fit\": [{\n-        object: [\"contain\", \"cover\", \"fill\", \"none\", \"scale-down\"]\n-      }],\n+      'object-fit': [\n+        {\n+          object: ['contain', 'cover', 'fill', 'none', 'scale-down'],\n+        },\n+      ],\n       /**\n        * Object Position\n        * @see https://tailwindcss.com/docs/object-position\n        */\n-      \"object-position\": [{\n-        object: [...getPositions(), isArbitraryValue]\n-      }],\n+      'object-position': [\n+        {\n+          object: [...getPositions(), isArbitraryValue],\n+        },\n+      ],\n       /**\n        * Overflow\n        * @see https://tailwindcss.com/docs/overflow\n        */\n-      overflow: [{\n-        overflow: getOverflow()\n-      }],\n+      overflow: [\n+        {\n+          overflow: getOverflow(),\n+        },\n+      ],\n       /**\n        * Overflow X\n        * @see https://tailwindcss.com/docs/overflow\n        */\n-      \"overflow-x\": [{\n-        \"overflow-x\": getOverflow()\n-      }],\n+      'overflow-x': [\n+        {\n+          'overflow-x': getOverflow(),\n+        },\n+      ],\n       /**\n        * Overflow Y\n        * @see https://tailwindcss.com/docs/overflow\n        */\n-      \"overflow-y\": [{\n-        \"overflow-y\": getOverflow()\n-      }],\n+      'overflow-y': [\n+        {\n+          'overflow-y': getOverflow(),\n+        },\n+      ],\n       /**\n        * Overscroll Behavior\n        * @see https://tailwindcss.com/docs/overscroll-behavior\n        */\n-      overscroll: [{\n-        overscroll: getOverscroll()\n-      }],\n+      overscroll: [\n+        {\n+          overscroll: getOverscroll(),\n+        },\n+      ],\n       /**\n        * Overscroll Behavior X\n        * @see https://tailwindcss.com/docs/overscroll-behavior\n        */\n-      \"overscroll-x\": [{\n-        \"overscroll-x\": getOverscroll()\n-      }],\n+      'overscroll-x': [\n+        {\n+          'overscroll-x': getOverscroll(),\n+        },\n+      ],\n       /**\n        * Overscroll Behavior Y\n        * @see https://tailwindcss.com/docs/overscroll-behavior\n        */\n-      \"overscroll-y\": [{\n-        \"overscroll-y\": getOverscroll()\n-      }],\n+      'overscroll-y': [\n+        {\n+          'overscroll-y': getOverscroll(),\n+        },\n+      ],\n       /**\n        * Position\n        * @see https://tailwindcss.com/docs/position\n        */\n-      position: [\"static\", \"fixed\", \"absolute\", \"relative\", \"sticky\"],\n+      position: ['static', 'fixed', 'absolute', 'relative', 'sticky'],\n       /**\n        * Top / Right / Bottom / Left\n        * @see https://tailwindcss.com/docs/top-right-bottom-left\n        */\n-      inset: [{\n-        inset: [inset]\n-      }],\n+      inset: [\n+        {\n+          inset: [inset],\n+        },\n+      ],\n       /**\n        * Right / Left\n        * @see https://tailwindcss.com/docs/top-right-bottom-left\n        */\n-      \"inset-x\": [{\n-        \"inset-x\": [inset]\n-      }],\n+      'inset-x': [\n+        {\n+          'inset-x': [inset],\n+        },\n+      ],\n       /**\n        * Top / Bottom\n        * @see https://tailwindcss.com/docs/top-right-bottom-left\n        */\n-      \"inset-y\": [{\n-        \"inset-y\": [inset]\n-      }],\n+      'inset-y': [\n+        {\n+          'inset-y': [inset],\n+        },\n+      ],\n       /**\n        * Start\n        * @see https://tailwindcss.com/docs/top-right-bottom-left\n        */\n-      start: [{\n-        start: [inset]\n-      }],\n+      start: [\n+        {\n+          start: [inset],\n+        },\n+      ],\n       /**\n        * End\n        * @see https://tailwindcss.com/docs/top-right-bottom-left\n        */\n-      end: [{\n-        end: [inset]\n-      }],\n+      end: [\n+        {\n+          end: [inset],\n+        },\n+      ],\n       /**\n        * Top\n        * @see https://tailwindcss.com/docs/top-right-bottom-left\n        */\n-      top: [{\n-        top: [inset]\n-      }],\n+      top: [\n+        {\n+          top: [inset],\n+        },\n+      ],\n       /**\n        * Right\n        * @see https://tailwindcss.com/docs/top-right-bottom-left\n        */\n-      right: [{\n-        right: [inset]\n-      }],\n+      right: [\n+        {\n+          right: [inset],\n+        },\n+      ],\n       /**\n        * Bottom\n        * @see https://tailwindcss.com/docs/top-right-bottom-left\n        */\n-      bottom: [{\n-        bottom: [inset]\n-      }],\n+      bottom: [\n+        {\n+          bottom: [inset],\n+        },\n+      ],\n       /**\n        * Left\n        * @see https://tailwindcss.com/docs/top-right-bottom-left\n        */\n-      left: [{\n-        left: [inset]\n-      }],\n+      left: [\n+        {\n+          left: [inset],\n+        },\n+      ],\n       /**\n        * Visibility\n        * @see https://tailwindcss.com/docs/visibility\n        */\n-      visibility: [\"visible\", \"invisible\", \"collapse\"],\n+      visibility: ['visible', 'invisible', 'collapse'],\n       /**\n        * Z-Index\n        * @see https://tailwindcss.com/docs/z-index\n        */\n-      z: [{\n-        z: [\"auto\", isInteger, isArbitraryValue]\n-      }],\n+      z: [\n+        {\n+          z: ['auto', isInteger, isArbitraryValue],\n+        },\n+      ],\n       // Flexbox and Grid\n       /**\n        * Flex Basis\n        * @see https://tailwindcss.com/docs/flex-basis\n        */\n-      basis: [{\n-        basis: getSpacingWithAutoAndArbitrary()\n-      }],\n+      basis: [\n+        {\n+          basis: getSpacingWithAutoAndArbitrary(),\n+        },\n+      ],\n       /**\n        * Flex Direction\n        * @see https://tailwindcss.com/docs/flex-direction\n        */\n-      \"flex-direction\": [{\n-        flex: [\"row\", \"row-reverse\", \"col\", \"col-reverse\"]\n-      }],\n+      'flex-direction': [\n+        {\n+          flex: ['row', 'row-reverse', 'col', 'col-reverse'],\n+        },\n+      ],\n       /**\n        * Flex Wrap\n        * @see https://tailwindcss.com/docs/flex-wrap\n        */\n-      \"flex-wrap\": [{\n-        flex: [\"wrap\", \"wrap-reverse\", \"nowrap\"]\n-      }],\n+      'flex-wrap': [\n+        {\n+          flex: ['wrap', 'wrap-reverse', 'nowrap'],\n+        },\n+      ],\n       /**\n        * Flex\n        * @see https://tailwindcss.com/docs/flex\n        */\n-      flex: [{\n-        flex: [\"1\", \"auto\", \"initial\", \"none\", isArbitraryValue]\n-      }],\n+      flex: [\n+        {\n+          flex: ['1', 'auto', 'initial', 'none', isArbitraryValue],\n+        },\n+      ],\n       /**\n        * Flex Grow\n        * @see https://tailwindcss.com/docs/flex-grow\n        */\n-      grow: [{\n-        grow: getZeroAndEmpty()\n-      }],\n+      grow: [\n+        {\n+          grow: getZeroAndEmpty(),\n+        },\n+      ],\n       /**\n        * Flex Shrink\n        * @see https://tailwindcss.com/docs/flex-shrink\n        */\n-      shrink: [{\n-        shrink: getZeroAndEmpty()\n-      }],\n+      shrink: [\n+        {\n+          shrink: getZeroAndEmpty(),\n+        },\n+      ],\n       /**\n        * Order\n        * @see https://tailwindcss.com/docs/order\n        */\n-      order: [{\n-        order: [\"first\", \"last\", \"none\", isInteger, isArbitraryValue]\n-      }],\n+      order: [\n+        {\n+          order: ['first', 'last', 'none', isInteger, isArbitraryValue],\n+        },\n+      ],\n       /**\n        * Grid Template Columns\n        * @see https://tailwindcss.com/docs/grid-template-columns\n        */\n-      \"grid-cols\": [{\n-        \"grid-cols\": [isAny]\n-      }],\n+      'grid-cols': [\n+        {\n+          'grid-cols': [isAny],\n+        },\n+      ],\n       /**\n        * Grid Column Start / End\n        * @see https://tailwindcss.com/docs/grid-column\n        */\n-      \"col-start-end\": [{\n-        col: [\"auto\", {\n-          span: [\"full\", isInteger, isArbitraryValue]\n-        }, isArbitraryValue]\n-      }],\n+      'col-start-end': [\n+        {\n+          col: [\n+            'auto',\n+            {\n+              span: ['full', isInteger, isArbitraryValue],\n+            },\n+            isArbitraryValue,\n+          ],\n+        },\n+      ],\n       /**\n        * Grid Column Start\n        * @see https://tailwindcss.com/docs/grid-column\n        */\n-      \"col-start\": [{\n-        \"col-start\": getNumberWithAutoAndArbitrary()\n-      }],\n+      'col-start': [\n+        {\n+          'col-start': getNumberWithAutoAndArbitrary(),\n+        },\n+      ],\n       /**\n        * Grid Column End\n        * @see https://tailwindcss.com/docs/grid-column\n        */\n-      \"col-end\": [{\n-        \"col-end\": getNumberWithAutoAndArbitrary()\n-      }],\n+      'col-end': [\n+        {\n+          'col-end': getNumberWithAutoAndArbitrary(),\n+        },\n+      ],\n       /**\n        * Grid Template Rows\n        * @see https://tailwindcss.com/docs/grid-template-rows\n        */\n-      \"grid-rows\": [{\n-        \"grid-rows\": [isAny]\n-      }],\n+      'grid-rows': [\n+        {\n+          'grid-rows': [isAny],\n+        },\n+      ],\n       /**\n        * Grid Row Start / End\n        * @see https://tailwindcss.com/docs/grid-row\n        */\n-      \"row-start-end\": [{\n-        row: [\"auto\", {\n-          span: [isInteger, isArbitraryValue]\n-        }, isArbitraryValue]\n-      }],\n+      'row-start-end': [\n+        {\n+          row: [\n+            'auto',\n+            {\n+              span: [isInteger, isArbitraryValue],\n+            },\n+            isArbitraryValue,\n+          ],\n+        },\n+      ],\n       /**\n        * Grid Row Start\n        * @see https://tailwindcss.com/docs/grid-row\n        */\n-      \"row-start\": [{\n-        \"row-start\": getNumberWithAutoAndArbitrary()\n-      }],\n+      'row-start': [\n+        {\n+          'row-start': getNumberWithAutoAndArbitrary(),\n+        },\n+      ],\n       /**\n        * Grid Row End\n        * @see https://tailwindcss.com/docs/grid-row\n        */\n-      \"row-end\": [{\n-        \"row-end\": getNumberWithAutoAndArbitrary()\n-      }],\n+      'row-end': [\n+        {\n+          'row-end': getNumberWithAutoAndArbitrary(),\n+        },\n+      ],\n       /**\n        * Grid Auto Flow\n        * @see https://tailwindcss.com/docs/grid-auto-flow\n        */\n-      \"grid-flow\": [{\n-        \"grid-flow\": [\"row\", \"col\", \"dense\", \"row-dense\", \"col-dense\"]\n-      }],\n+      'grid-flow': [\n+        {\n+          'grid-flow': ['row', 'col', 'dense', 'row-dense', 'col-dense'],\n+        },\n+      ],\n       /**\n        * Grid Auto Columns\n        * @see https://tailwindcss.com/docs/grid-auto-columns\n        */\n-      \"auto-cols\": [{\n-        \"auto-cols\": [\"auto\", \"min\", \"max\", \"fr\", isArbitraryValue]\n-      }],\n+      'auto-cols': [\n+        {\n+          'auto-cols': ['auto', 'min', 'max', 'fr', isArbitraryValue],\n+        },\n+      ],\n       /**\n        * Grid Auto Rows\n        * @see https://tailwindcss.com/docs/grid-auto-rows\n        */\n-      \"auto-rows\": [{\n-        \"auto-rows\": [\"auto\", \"min\", \"max\", \"fr\", isArbitraryValue]\n-      }],\n+      'auto-rows': [\n+        {\n+          'auto-rows': ['auto', 'min', 'max', 'fr', isArbitraryValue],\n+        },\n+      ],\n       /**\n        * Gap\n        * @see https://tailwindcss.com/docs/gap\n        */\n-      gap: [{\n-        gap: [gap]\n-      }],\n+      gap: [\n+        {\n+          gap: [gap],\n+        },\n+      ],\n       /**\n        * Gap X\n        * @see https://tailwindcss.com/docs/gap\n        */\n-      \"gap-x\": [{\n-        \"gap-x\": [gap]\n-      }],\n+      'gap-x': [\n+        {\n+          'gap-x': [gap],\n+        },\n+      ],\n       /**\n        * Gap Y\n        * @see https://tailwindcss.com/docs/gap\n        */\n-      \"gap-y\": [{\n-        \"gap-y\": [gap]\n-      }],\n+      'gap-y': [\n+        {\n+          'gap-y': [gap],\n+        },\n+      ],\n       /**\n        * Justify Content\n        * @see https://tailwindcss.com/docs/justify-content\n        */\n-      \"justify-content\": [{\n-        justify: [\"normal\", ...getAlign()]\n-      }],\n+      'justify-content': [\n+        {\n+          justify: ['normal', ...getAlign()],\n+        },\n+      ],\n       /**\n        * Justify Items\n        * @see https://tailwindcss.com/docs/justify-items\n        */\n-      \"justify-items\": [{\n-        \"justify-items\": [\"start\", \"end\", \"center\", \"stretch\"]\n-      }],\n+      'justify-items': [\n+        {\n+          'justify-items': ['start', 'end', 'center', 'stretch'],\n+        },\n+      ],\n       /**\n        * Justify Self\n        * @see https://tailwindcss.com/docs/justify-self\n        */\n-      \"justify-self\": [{\n-        \"justify-self\": [\"auto\", \"start\", \"end\", \"center\", \"stretch\"]\n-      }],\n+      'justify-self': [\n+        {\n+          'justify-self': ['auto', 'start', 'end', 'center', 'stretch'],\n+        },\n+      ],\n       /**\n        * Align Content\n        * @see https://tailwindcss.com/docs/align-content\n        */\n-      \"align-content\": [{\n-        content: [\"normal\", ...getAlign(), \"baseline\"]\n-      }],\n+      'align-content': [\n+        {\n+          content: ['normal', ...getAlign(), 'baseline'],\n+        },\n+      ],\n       /**\n        * Align Items\n        * @see https://tailwindcss.com/docs/align-items\n        */\n-      \"align-items\": [{\n-        items: [\"start\", \"end\", \"center\", \"baseline\", \"stretch\"]\n-      }],\n+      'align-items': [\n+        {\n+          items: ['start', 'end', 'center', 'baseline', 'stretch'],\n+        },\n+      ],\n       /**\n        * Align Self\n        * @see https://tailwindcss.com/docs/align-self\n        */\n-      \"align-self\": [{\n-        self: [\"auto\", \"start\", \"end\", \"center\", \"stretch\", \"baseline\"]\n-      }],\n+      'align-self': [\n+        {\n+          self: ['auto', 'start', 'end', 'center', 'stretch', 'baseline'],\n+        },\n+      ],\n       /**\n        * Place Content\n        * @see https://tailwindcss.com/docs/place-content\n        */\n-      \"place-content\": [{\n-        \"place-content\": [...getAlign(), \"baseline\"]\n-      }],\n+      'place-content': [\n+        {\n+          'place-content': [...getAlign(), 'baseline'],\n+        },\n+      ],\n       /**\n        * Place Items\n        * @see https://tailwindcss.com/docs/place-items\n        */\n-      \"place-items\": [{\n-        \"place-items\": [\"start\", \"end\", \"center\", \"baseline\", \"stretch\"]\n-      }],\n+      'place-items': [\n+        {\n+          'place-items': ['start', 'end', 'center', 'baseline', 'stretch'],\n+        },\n+      ],\n       /**\n        * Place Self\n        * @see https://tailwindcss.com/docs/place-self\n        */\n-      \"place-self\": [{\n-        \"place-self\": [\"auto\", \"start\", \"end\", \"center\", \"stretch\"]\n-      }],\n+      'place-self': [\n+        {\n+          'place-self': ['auto', 'start', 'end', 'center', 'stretch'],\n+        },\n+      ],\n       // Spacing\n       /**\n        * Padding\n        * @see https://tailwindcss.com/docs/padding\n        */\n-      p: [{\n-        p: [padding]\n-      }],\n+      p: [\n+        {\n+          p: [padding],\n+        },\n+      ],\n       /**\n        * Padding X\n        * @see https://tailwindcss.com/docs/padding\n        */\n-      px: [{\n-        px: [padding]\n-      }],\n+      px: [\n+        {\n+          px: [padding],\n+        },\n+      ],\n       /**\n        * Padding Y\n        * @see https://tailwindcss.com/docs/padding\n        */\n-      py: [{\n-        py: [padding]\n-      }],\n+      py: [\n+        {\n+          py: [padding],\n+        },\n+      ],\n       /**\n        * Padding Start\n        * @see https://tailwindcss.com/docs/padding\n        */\n-      ps: [{\n-        ps: [padding]\n-      }],\n+      ps: [\n+        {\n+          ps: [padding],\n+        },\n+      ],\n       /**\n        * Padding End\n        * @see https://tailwindcss.com/docs/padding\n        */\n-      pe: [{\n-        pe: [padding]\n-      }],\n+      pe: [\n+        {\n+          pe: [padding],\n+        },\n+      ],\n       /**\n        * Padding Top\n        * @see https://tailwindcss.com/docs/padding\n        */\n-      pt: [{\n-        pt: [padding]\n-      }],\n+      pt: [\n+        {\n+          pt: [padding],\n+        },\n+      ],\n       /**\n        * Padding Right\n        * @see https://tailwindcss.com/docs/padding\n        */\n-      pr: [{\n-        pr: [padding]\n-      }],\n+      pr: [\n+        {\n+          pr: [padding],\n+        },\n+      ],\n       /**\n        * Padding Bottom\n        * @see https://tailwindcss.com/docs/padding\n        */\n-      pb: [{\n-        pb: [padding]\n-      }],\n+      pb: [\n+        {\n+          pb: [padding],\n+        },\n+      ],\n       /**\n        * Padding Left\n        * @see https://tailwindcss.com/docs/padding\n        */\n-      pl: [{\n-        pl: [padding]\n-      }],\n+      pl: [\n+        {\n+          pl: [padding],\n+        },\n+      ],\n       /**\n        * Margin\n        * @see https://tailwindcss.com/docs/margin\n        */\n-      m: [{\n-        m: [margin]\n-      }],\n+      m: [\n+        {\n+          m: [margin],\n+        },\n+      ],\n       /**\n        * Margin X\n        * @see https://tailwindcss.com/docs/margin\n        */\n-      mx: [{\n-        mx: [margin]\n-      }],\n+      mx: [\n+        {\n+          mx: [margin],\n+        },\n+      ],\n       /**\n        * Margin Y\n        * @see https://tailwindcss.com/docs/margin\n        */\n-      my: [{\n-        my: [margin]\n-      }],\n+      my: [\n+        {\n+          my: [margin],\n+        },\n+      ],\n       /**\n        * Margin Start\n        * @see https://tailwindcss.com/docs/margin\n        */\n-      ms: [{\n-        ms: [margin]\n-      }],\n+      ms: [\n+        {\n+          ms: [margin],\n+        },\n+      ],\n       /**\n        * Margin End\n        * @see https://tailwindcss.com/docs/margin\n        */\n-      me: [{\n-        me: [margin]\n-      }],\n+      me: [\n+        {\n+          me: [margin],\n+        },\n+      ],\n       /**\n        * Margin Top\n        * @see https://tailwindcss.com/docs/margin\n        */\n-      mt: [{\n-        mt: [margin]\n-      }],\n+      mt: [\n+        {\n+          mt: [margin],\n+        },\n+      ],\n       /**\n        * Margin Right\n        * @see https://tailwindcss.com/docs/margin\n        */\n-      mr: [{\n-        mr: [margin]\n-      }],\n+      mr: [\n+        {\n+          mr: [margin],\n+        },\n+      ],\n       /**\n        * Margin Bottom\n        * @see https://tailwindcss.com/docs/margin\n        */\n-      mb: [{\n-        mb: [margin]\n-      }],\n+      mb: [\n+        {\n+          mb: [margin],\n+        },\n+      ],\n       /**\n        * Margin Left\n        * @see https://tailwindcss.com/docs/margin\n        */\n-      ml: [{\n-        ml: [margin]\n-      }],\n+      ml: [\n+        {\n+          ml: [margin],\n+        },\n+      ],\n       /**\n        * Space Between X\n        * @see https://tailwindcss.com/docs/space\n        */\n-      \"space-x\": [{\n-        \"space-x\": [space]\n-      }],\n+      'space-x': [\n+        {\n+          'space-x': [space],\n+        },\n+      ],\n       /**\n        * Space Between X Reverse\n        * @see https://tailwindcss.com/docs/space\n        */\n-      \"space-x-reverse\": [\"space-x-reverse\"],\n+      'space-x-reverse': ['space-x-reverse'],\n       /**\n        * Space Between Y\n        * @see https://tailwindcss.com/docs/space\n        */\n-      \"space-y\": [{\n-        \"space-y\": [space]\n-      }],\n+      'space-y': [\n+        {\n+          'space-y': [space],\n+        },\n+      ],\n       /**\n        * Space Between Y Reverse\n        * @see https://tailwindcss.com/docs/space\n        */\n-      \"space-y-reverse\": [\"space-y-reverse\"],\n+      'space-y-reverse': ['space-y-reverse'],\n       // Sizing\n       /**\n        * Width\n        * @see https://tailwindcss.com/docs/width\n        */\n-      w: [{\n-        w: [\"auto\", \"min\", \"max\", \"fit\", \"svw\", \"lvw\", \"dvw\", isArbitraryValue, spacing]\n-      }],\n+      w: [\n+        {\n+          w: ['auto', 'min', 'max', 'fit', 'svw', 'lvw', 'dvw', isArbitraryValue, spacing],\n+        },\n+      ],\n       /**\n        * Min-Width\n        * @see https://tailwindcss.com/docs/min-width\n        */\n-      \"min-w\": [{\n-        \"min-w\": [isArbitraryValue, spacing, \"min\", \"max\", \"fit\"]\n-      }],\n+      'min-w': [\n+        {\n+          'min-w': [isArbitraryValue, spacing, 'min', 'max', 'fit'],\n+        },\n+      ],\n       /**\n        * Max-Width\n        * @see https://tailwindcss.com/docs/max-width\n        */\n-      \"max-w\": [{\n-        \"max-w\": [isArbitraryValue, spacing, \"none\", \"full\", \"min\", \"max\", \"fit\", \"prose\", {\n-          screen: [isTshirtSize]\n-        }, isTshirtSize]\n-      }],\n+      'max-w': [\n+        {\n+          'max-w': [\n+            isArbitraryValue,\n+            spacing,\n+            'none',\n+            'full',\n+            'min',\n+            'max',\n+            'fit',\n+            'prose',\n+            {\n+              screen: [isTshirtSize],\n+            },\n+            isTshirtSize,\n+          ],\n+        },\n+      ],\n       /**\n        * Height\n        * @see https://tailwindcss.com/docs/height\n        */\n-      h: [{\n-        h: [isArbitraryValue, spacing, \"auto\", \"min\", \"max\", \"fit\", \"svh\", \"lvh\", \"dvh\"]\n-      }],\n+      h: [\n+        {\n+          h: [isArbitraryValue, spacing, 'auto', 'min', 'max', 'fit', 'svh', 'lvh', 'dvh'],\n+        },\n+      ],\n       /**\n        * Min-Height\n        * @see https://tailwindcss.com/docs/min-height\n        */\n-      \"min-h\": [{\n-        \"min-h\": [isArbitraryValue, spacing, \"min\", \"max\", \"fit\", \"svh\", \"lvh\", \"dvh\"]\n-      }],\n+      'min-h': [\n+        {\n+          'min-h': [isArbitraryValue, spacing, 'min', 'max', 'fit', 'svh', 'lvh', 'dvh'],\n+        },\n+      ],\n       /**\n        * Max-Height\n        * @see https://tailwindcss.com/docs/max-height\n        */\n-      \"max-h\": [{\n-        \"max-h\": [isArbitraryValue, spacing, \"min\", \"max\", \"fit\", \"svh\", \"lvh\", \"dvh\"]\n-      }],\n+      'max-h': [\n+        {\n+          'max-h': [isArbitraryValue, spacing, 'min', 'max', 'fit', 'svh', 'lvh', 'dvh'],\n+        },\n+      ],\n       /**\n        * Size\n        * @see https://tailwindcss.com/docs/size\n        */\n-      size: [{\n-        size: [isArbitraryValue, spacing, \"auto\", \"min\", \"max\", \"fit\"]\n-      }],\n+      size: [\n+        {\n+          size: [isArbitraryValue, spacing, 'auto', 'min', 'max', 'fit'],\n+        },\n+      ],\n       // Typography\n       /**\n        * Font Size\n        * @see https://tailwindcss.com/docs/font-size\n        */\n-      \"font-size\": [{\n-        text: [\"base\", isTshirtSize, isArbitraryLength]\n-      }],\n+      'font-size': [\n+        {\n+          text: ['base', isTshirtSize, isArbitraryLength],\n+        },\n+      ],\n       /**\n        * Font Smoothing\n        * @see https://tailwindcss.com/docs/font-smoothing\n        */\n-      \"font-smoothing\": [\"antialiased\", \"subpixel-antialiased\"],\n+      'font-smoothing': ['antialiased', 'subpixel-antialiased'],\n       /**\n        * Font Style\n        * @see https://tailwindcss.com/docs/font-style\n        */\n-      \"font-style\": [\"italic\", \"not-italic\"],\n+      'font-style': ['italic', 'not-italic'],\n       /**\n        * Font Weight\n        * @see https://tailwindcss.com/docs/font-weight\n        */\n-      \"font-weight\": [{\n-        font: [\"thin\", \"extralight\", \"light\", \"normal\", \"medium\", \"semibold\", \"bold\", \"extrabold\", \"black\", isArbitraryNumber]\n-      }],\n+      'font-weight': [\n+        {\n+          font: ['thin', 'extralight', 'light', 'normal', 'medium', 'semibold', 'bold', 'extrabold', 'black', isArbitraryNumber],\n+        },\n+      ],\n       /**\n        * Font Family\n        * @see https://tailwindcss.com/docs/font-family\n        */\n-      \"font-family\": [{\n-        font: [isAny]\n-      }],\n+      'font-family': [\n+        {\n+          font: [isAny],\n+        },\n+      ],\n       /**\n        * Font Variant Numeric\n        * @see https://tailwindcss.com/docs/font-variant-numeric\n        */\n-      \"fvn-normal\": [\"normal-nums\"],\n+      'fvn-normal': ['normal-nums'],\n       /**\n        * Font Variant Numeric\n        * @see https://tailwindcss.com/docs/font-variant-numeric\n        */\n-      \"fvn-ordinal\": [\"ordinal\"],\n+      'fvn-ordinal': ['ordinal'],\n       /**\n        * Font Variant Numeric\n        * @see https://tailwindcss.com/docs/font-variant-numeric\n        */\n-      \"fvn-slashed-zero\": [\"slashed-zero\"],\n+      'fvn-slashed-zero': ['slashed-zero'],\n       /**\n        * Font Variant Numeric\n        * @see https://tailwindcss.com/docs/font-variant-numeric\n        */\n-      \"fvn-figure\": [\"lining-nums\", \"oldstyle-nums\"],\n+      'fvn-figure': ['lining-nums', 'oldstyle-nums'],\n       /**\n        * Font Variant Numeric\n        * @see https://tailwindcss.com/docs/font-variant-numeric\n        */\n-      \"fvn-spacing\": [\"proportional-nums\", \"tabular-nums\"],\n+      'fvn-spacing': ['proportional-nums', 'tabular-nums'],\n       /**\n        * Font Variant Numeric\n        * @see https://tailwindcss.com/docs/font-variant-numeric\n        */\n-      \"fvn-fraction\": [\"diagonal-fractions\", \"stacked-fractons\"],\n+      'fvn-fraction': ['diagonal-fractions', 'stacked-fractons'],\n       /**\n        * Letter Spacing\n        * @see https://tailwindcss.com/docs/letter-spacing\n        */\n-      tracking: [{\n-        tracking: [\"tighter\", \"tight\", \"normal\", \"wide\", \"wider\", \"widest\", isArbitraryValue]\n-      }],\n+      tracking: [\n+        {\n+          tracking: ['tighter', 'tight', 'normal', 'wide', 'wider', 'widest', isArbitraryValue],\n+        },\n+      ],\n       /**\n        * Line Clamp\n        * @see https://tailwindcss.com/docs/line-clamp\n        */\n-      \"line-clamp\": [{\n-        \"line-clamp\": [\"none\", isNumber, isArbitraryNumber]\n-      }],\n+      'line-clamp': [\n+        {\n+          'line-clamp': ['none', isNumber, isArbitraryNumber],\n+        },\n+      ],\n       /**\n        * Line Height\n        * @see https://tailwindcss.com/docs/line-height\n        */\n-      leading: [{\n-        leading: [\"none\", \"tight\", \"snug\", \"normal\", \"relaxed\", \"loose\", isLength, isArbitraryValue]\n-      }],\n+      leading: [\n+        {\n+          leading: ['none', 'tight', 'snug', 'normal', 'relaxed', 'loose', isLength, isArbitraryValue],\n+        },\n+      ],\n       /**\n        * List Style Image\n        * @see https://tailwindcss.com/docs/list-style-image\n        */\n-      \"list-image\": [{\n-        \"list-image\": [\"none\", isArbitraryValue]\n-      }],\n+      'list-image': [\n+        {\n+          'list-image': ['none', isArbitraryValue],\n+        },\n+      ],\n       /**\n        * List Style Type\n        * @see https://tailwindcss.com/docs/list-style-type\n        */\n-      \"list-style-type\": [{\n-        list: [\"none\", \"disc\", \"decimal\", isArbitraryValue]\n-      }],\n+      'list-style-type': [\n+        {\n+          list: ['none', 'disc', 'decimal', isArbitraryValue],\n+        },\n+      ],\n       /**\n        * List Style Position\n        * @see https://tailwindcss.com/docs/list-style-position\n        */\n-      \"list-style-position\": [{\n-        list: [\"inside\", \"outside\"]\n-      }],\n+      'list-style-position': [\n+        {\n+          list: ['inside', 'outside'],\n+        },\n+      ],\n       /**\n        * Placeholder Color\n        * @deprecated since Tailwind CSS v3.0.0\n        * @see https://tailwindcss.com/docs/placeholder-color\n        */\n-      \"placeholder-color\": [{\n-        placeholder: [colors]\n-      }],\n+      'placeholder-color': [\n+        {\n+          placeholder: [colors],\n+        },\n+      ],\n       /**\n        * Placeholder Opacity\n        * @see https://tailwindcss.com/docs/placeholder-opacity\n        */\n-      \"placeholder-opacity\": [{\n-        \"placeholder-opacity\": [opacity]\n-      }],\n+      'placeholder-opacity': [\n+        {\n+          'placeholder-opacity': [opacity],\n+        },\n+      ],\n       /**\n        * Text Alignment\n        * @see https://tailwindcss.com/docs/text-align\n        */\n-      \"text-alignment\": [{\n-        text: [\"left\", \"center\", \"right\", \"justify\", \"start\", \"end\"]\n-      }],\n+      'text-alignment': [\n+        {\n+          text: ['left', 'center', 'right', 'justify', 'start', 'end'],\n+        },\n+      ],\n       /**\n        * Text Color\n        * @see https://tailwindcss.com/docs/text-color\n        */\n-      \"text-color\": [{\n-        text: [colors]\n-      }],\n+      'text-color': [\n+        {\n+          text: [colors],\n+        },\n+      ],\n       /**\n        * Text Opacity\n        * @see https://tailwindcss.com/docs/text-opacity\n        */\n-      \"text-opacity\": [{\n-        \"text-opacity\": [opacity]\n-      }],\n+      'text-opacity': [\n+        {\n+          'text-opacity': [opacity],\n+        },\n+      ],\n       /**\n        * Text Decoration\n        * @see https://tailwindcss.com/docs/text-decoration\n        */\n-      \"text-decoration\": [\"underline\", \"overline\", \"line-through\", \"no-underline\"],\n+      'text-decoration': ['underline', 'overline', 'line-through', 'no-underline'],\n       /**\n        * Text Decoration Style\n        * @see https://tailwindcss.com/docs/text-decoration-style\n        */\n-      \"text-decoration-style\": [{\n-        decoration: [...getLineStyles(), \"wavy\"]\n-      }],\n+      'text-decoration-style': [\n+        {\n+          decoration: [...getLineStyles(), 'wavy'],\n+        },\n+      ],\n       /**\n        * Text Decoration Thickness\n        * @see https://tailwindcss.com/docs/text-decoration-thickness\n        */\n-      \"text-decoration-thickness\": [{\n-        decoration: [\"auto\", \"from-font\", isLength, isArbitraryLength]\n-      }],\n+      'text-decoration-thickness': [\n+        {\n+          decoration: ['auto', 'from-font', isLength, isArbitraryLength],\n+        },\n+      ],\n       /**\n        * Text Underline Offset\n        * @see https://tailwindcss.com/docs/text-underline-offset\n        */\n-      \"underline-offset\": [{\n-        \"underline-offset\": [\"auto\", isLength, isArbitraryValue]\n-      }],\n+      'underline-offset': [\n+        {\n+          'underline-offset': ['auto', isLength, isArbitraryValue],\n+        },\n+      ],\n       /**\n        * Text Decoration Color\n        * @see https://tailwindcss.com/docs/text-decoration-color\n        */\n-      \"text-decoration-color\": [{\n-        decoration: [colors]\n-      }],\n+      'text-decoration-color': [\n+        {\n+          decoration: [colors],\n+        },\n+      ],\n       /**\n        * Text Transform\n        * @see https://tailwindcss.com/docs/text-transform\n        */\n-      \"text-transform\": [\"uppercase\", \"lowercase\", \"capitalize\", \"normal-case\"],\n+      'text-transform': ['uppercase', 'lowercase', 'capitalize', 'normal-case'],\n       /**\n        * Text Overflow\n        * @see https://tailwindcss.com/docs/text-overflow\n        */\n-      \"text-overflow\": [\"truncate\", \"text-ellipsis\", \"text-clip\"],\n+      'text-overflow': ['truncate', 'text-ellipsis', 'text-clip'],\n       /**\n        * Text Wrap\n        * @see https://tailwindcss.com/docs/text-wrap\n        */\n-      \"text-wrap\": [{\n-        text: [\"wrap\", \"nowrap\", \"balance\", \"pretty\"]\n-      }],\n+      'text-wrap': [\n+        {\n+          text: ['wrap', 'nowrap', 'balance', 'pretty'],\n+        },\n+      ],\n       /**\n        * Text Indent\n        * @see https://tailwindcss.com/docs/text-indent\n        */\n-      indent: [{\n-        indent: getSpacingWithArbitrary()\n-      }],\n+      indent: [\n+        {\n+          indent: getSpacingWithArbitrary(),\n+        },\n+      ],\n       /**\n        * Vertical Alignment\n        * @see https://tailwindcss.com/docs/vertical-align\n        */\n-      \"vertical-align\": [{\n-        align: [\"baseline\", \"top\", \"middle\", \"bottom\", \"text-top\", \"text-bottom\", \"sub\", \"super\", isArbitraryValue]\n-      }],\n+      'vertical-align': [\n+        {\n+          align: ['baseline', 'top', 'middle', 'bottom', 'text-top', 'text-bottom', 'sub', 'super', isArbitraryValue],\n+        },\n+      ],\n       /**\n        * Whitespace\n        * @see https://tailwindcss.com/docs/whitespace\n        */\n-      whitespace: [{\n-        whitespace: [\"normal\", \"nowrap\", \"pre\", \"pre-line\", \"pre-wrap\", \"break-spaces\"]\n-      }],\n+      whitespace: [\n+        {\n+          whitespace: ['normal', 'nowrap', 'pre', 'pre-line', 'pre-wrap', 'break-spaces'],\n+        },\n+      ],\n       /**\n        * Word Break\n        * @see https://tailwindcss.com/docs/word-break\n        */\n-      break: [{\n-        break: [\"normal\", \"words\", \"all\", \"keep\"]\n-      }],\n+      break: [\n+        {\n+          break: ['normal', 'words', 'all', 'keep'],\n+        },\n+      ],\n       /**\n        * Hyphens\n        * @see https://tailwindcss.com/docs/hyphens\n        */\n-      hyphens: [{\n-        hyphens: [\"none\", \"manual\", \"auto\"]\n-      }],\n+      hyphens: [\n+        {\n+          hyphens: ['none', 'manual', 'auto'],\n+        },\n+      ],\n       /**\n        * Content\n        * @see https://tailwindcss.com/docs/content\n        */\n-      content: [{\n-        content: [\"none\", isArbitraryValue]\n-      }],\n+      content: [\n+        {\n+          content: ['none', isArbitraryValue],\n+        },\n+      ],\n       // Backgrounds\n       /**\n        * Background Attachment\n        * @see https://tailwindcss.com/docs/background-attachment\n        */\n-      \"bg-attachment\": [{\n-        bg: [\"fixed\", \"local\", \"scroll\"]\n-      }],\n+      'bg-attachment': [\n+        {\n+          bg: ['fixed', 'local', 'scroll'],\n+        },\n+      ],\n       /**\n        * Background Clip\n        * @see https://tailwindcss.com/docs/background-clip\n        */\n-      \"bg-clip\": [{\n-        \"bg-clip\": [\"border\", \"padding\", \"content\", \"text\"]\n-      }],\n+      'bg-clip': [\n+        {\n+          'bg-clip': ['border', 'padding', 'content', 'text'],\n+        },\n+      ],\n       /**\n        * Background Opacity\n        * @deprecated since Tailwind CSS v3.0.0\n        * @see https://tailwindcss.com/docs/background-opacity\n        */\n-      \"bg-opacity\": [{\n-        \"bg-opacity\": [opacity]\n-      }],\n+      'bg-opacity': [\n+        {\n+          'bg-opacity': [opacity],\n+        },\n+      ],\n       /**\n        * Background Origin\n        * @see https://tailwindcss.com/docs/background-origin\n        */\n-      \"bg-origin\": [{\n-        \"bg-origin\": [\"border\", \"padding\", \"content\"]\n-      }],\n+      'bg-origin': [\n+        {\n+          'bg-origin': ['border', 'padding', 'content'],\n+        },\n+      ],\n       /**\n        * Background Position\n        * @see https://tailwindcss.com/docs/background-position\n        */\n-      \"bg-position\": [{\n-        bg: [...getPositions(), isArbitraryPosition]\n-      }],\n+      'bg-position': [\n+        {\n+          bg: [...getPositions(), isArbitraryPosition],\n+        },\n+      ],\n       /**\n        * Background Repeat\n        * @see https://tailwindcss.com/docs/background-repeat\n        */\n-      \"bg-repeat\": [{\n-        bg: [\"no-repeat\", {\n-          repeat: [\"\", \"x\", \"y\", \"round\", \"space\"]\n-        }]\n-      }],\n+      'bg-repeat': [\n+        {\n+          bg: [\n+            'no-repeat',\n+            {\n+              repeat: ['', 'x', 'y', 'round', 'space'],\n+            },\n+          ],\n+        },\n+      ],\n       /**\n        * Background Size\n        * @see https://tailwindcss.com/docs/background-size\n        */\n-      \"bg-size\": [{\n-        bg: [\"auto\", \"cover\", \"contain\", isArbitrarySize]\n-      }],\n+      'bg-size': [\n+        {\n+          bg: ['auto', 'cover', 'contain', isArbitrarySize],\n+        },\n+      ],\n       /**\n        * Background Image\n        * @see https://tailwindcss.com/docs/background-image\n        */\n-      \"bg-image\": [{\n-        bg: [\"none\", {\n-          \"gradient-to\": [\"t\", \"tr\", \"r\", \"br\", \"b\", \"bl\", \"l\", \"tl\"]\n-        }, isArbitraryImage]\n-      }],\n+      'bg-image': [\n+        {\n+          bg: [\n+            'none',\n+            {\n+              'gradient-to': ['t', 'tr', 'r', 'br', 'b', 'bl', 'l', 'tl'],\n+            },\n+            isArbitraryImage,\n+          ],\n+        },\n+      ],\n       /**\n        * Background Color\n        * @see https://tailwindcss.com/docs/background-color\n        */\n-      \"bg-color\": [{\n-        bg: [colors]\n-      }],\n+      'bg-color': [\n+        {\n+          bg: [colors],\n+        },\n+      ],\n       /**\n        * Gradient Color Stops From Position\n        * @see https://tailwindcss.com/docs/gradient-color-stops\n        */\n-      \"gradient-from-pos\": [{\n-        from: [gradientColorStopPositions]\n-      }],\n+      'gradient-from-pos': [\n+        {\n+          from: [gradientColorStopPositions],\n+        },\n+      ],\n       /**\n        * Gradient Color Stops Via Position\n        * @see https://tailwindcss.com/docs/gradient-color-stops\n        */\n-      \"gradient-via-pos\": [{\n-        via: [gradientColorStopPositions]\n-      }],\n+      'gradient-via-pos': [\n+        {\n+          via: [gradientColorStopPositions],\n+        },\n+      ],\n       /**\n        * Gradient Color Stops To Position\n        * @see https://tailwindcss.com/docs/gradient-color-stops\n        */\n-      \"gradient-to-pos\": [{\n-        to: [gradientColorStopPositions]\n-      }],\n+      'gradient-to-pos': [\n+        {\n+          to: [gradientColorStopPositions],\n+        },\n+      ],\n       /**\n        * Gradient Color Stops From\n        * @see https://tailwindcss.com/docs/gradient-color-stops\n        */\n-      \"gradient-from\": [{\n-        from: [gradientColorStops]\n-      }],\n+      'gradient-from': [\n+        {\n+          from: [gradientColorStops],\n+        },\n+      ],\n       /**\n        * Gradient Color Stops Via\n        * @see https://tailwindcss.com/docs/gradient-color-stops\n        */\n-      \"gradient-via\": [{\n-        via: [gradientColorStops]\n-      }],\n+      'gradient-via': [\n+        {\n+          via: [gradientColorStops],\n+        },\n+      ],\n       /**\n        * Gradient Color Stops To\n        * @see https://tailwindcss.com/docs/gradient-color-stops\n        */\n-      \"gradient-to\": [{\n-        to: [gradientColorStops]\n-      }],\n+      'gradient-to': [\n+        {\n+          to: [gradientColorStops],\n+        },\n+      ],\n       // Borders\n       /**\n        * Border Radius\n        * @see https://tailwindcss.com/docs/border-radius\n        */\n-      rounded: [{\n-        rounded: [borderRadius]\n-      }],\n+      rounded: [\n+        {\n+          rounded: [borderRadius],\n+        },\n+      ],\n       /**\n        * Border Radius Start\n        * @see https://tailwindcss.com/docs/border-radius\n        */\n-      \"rounded-s\": [{\n-        \"rounded-s\": [borderRadius]\n-      }],\n+      'rounded-s': [\n+        {\n+          'rounded-s': [borderRadius],\n+        },\n+      ],\n       /**\n        * Border Radius End\n        * @see https://tailwindcss.com/docs/border-radius\n        */\n-      \"rounded-e\": [{\n-        \"rounded-e\": [borderRadius]\n-      }],\n+      'rounded-e': [\n+        {\n+          'rounded-e': [borderRadius],\n+        },\n+      ],\n       /**\n        * Border Radius Top\n        * @see https://tailwindcss.com/docs/border-radius\n        */\n-      \"rounded-t\": [{\n-        \"rounded-t\": [borderRadius]\n-      }],\n+      'rounded-t': [\n+        {\n+          'rounded-t': [borderRadius],\n+        },\n+      ],\n       /**\n        * Border Radius Right\n        * @see https://tailwindcss.com/docs/border-radius\n        */\n-      \"rounded-r\": [{\n-        \"rounded-r\": [borderRadius]\n-      }],\n+      'rounded-r': [\n+        {\n+          'rounded-r': [borderRadius],\n+        },\n+      ],\n       /**\n        * Border Radius Bottom\n        * @see https://tailwindcss.com/docs/border-radius\n        */\n-      \"rounded-b\": [{\n-        \"rounded-b\": [borderRadius]\n-      }],\n+      'rounded-b': [\n+        {\n+          'rounded-b': [borderRadius],\n+        },\n+      ],\n       /**\n        * Border Radius Left\n        * @see https://tailwindcss.com/docs/border-radius\n        */\n-      \"rounded-l\": [{\n-        \"rounded-l\": [borderRadius]\n-      }],\n+      'rounded-l': [\n+        {\n+          'rounded-l': [borderRadius],\n+        },\n+      ],\n       /**\n        * Border Radius Start Start\n        * @see https://tailwindcss.com/docs/border-radius\n        */\n-      \"rounded-ss\": [{\n-        \"rounded-ss\": [borderRadius]\n-      }],\n+      'rounded-ss': [\n+        {\n+          'rounded-ss': [borderRadius],\n+        },\n+      ],\n       /**\n        * Border Radius Start End\n        * @see https://tailwindcss.com/docs/border-radius\n        */\n-      \"rounded-se\": [{\n-        \"rounded-se\": [borderRadius]\n-      }],\n+      'rounded-se': [\n+        {\n+          'rounded-se': [borderRadius],\n+        },\n+      ],\n       /**\n        * Border Radius End End\n        * @see https://tailwindcss.com/docs/border-radius\n        */\n-      \"rounded-ee\": [{\n-        \"rounded-ee\": [borderRadius]\n-      }],\n+      'rounded-ee': [\n+        {\n+          'rounded-ee': [borderRadius],\n+        },\n+      ],\n       /**\n        * Border Radius End Start\n        * @see https://tailwindcss.com/docs/border-radius\n        */\n-      \"rounded-es\": [{\n-        \"rounded-es\": [borderRadius]\n-      }],\n+      'rounded-es': [\n+        {\n+          'rounded-es': [borderRadius],\n+        },\n+      ],\n       /**\n        * Border Radius Top Left\n        * @see https://tailwindcss.com/docs/border-radius\n        */\n-      \"rounded-tl\": [{\n-        \"rounded-tl\": [borderRadius]\n-      }],\n+      'rounded-tl': [\n+        {\n+          'rounded-tl': [borderRadius],\n+        },\n+      ],\n       /**\n        * Border Radius Top Right\n        * @see https://tailwindcss.com/docs/border-radius\n        */\n-      \"rounded-tr\": [{\n-        \"rounded-tr\": [borderRadius]\n-      }],\n+      'rounded-tr': [\n+        {\n+          'rounded-tr': [borderRadius],\n+        },\n+      ],\n       /**\n        * Border Radius Bottom Right\n        * @see https://tailwindcss.com/docs/border-radius\n        */\n-      \"rounded-br\": [{\n-        \"rounded-br\": [borderRadius]\n-      }],\n+      'rounded-br': [\n+        {\n+          'rounded-br': [borderRadius],\n+        },\n+      ],\n       /**\n        * Border Radius Bottom Left\n        * @see https://tailwindcss.com/docs/border-radius\n        */\n-      \"rounded-bl\": [{\n-        \"rounded-bl\": [borderRadius]\n-      }],\n+      'rounded-bl': [\n+        {\n+          'rounded-bl': [borderRadius],\n+        },\n+      ],\n       /**\n        * Border Width\n        * @see https://tailwindcss.com/docs/border-width\n        */\n-      \"border-w\": [{\n-        border: [borderWidth]\n-      }],\n+      'border-w': [\n+        {\n+          border: [borderWidth],\n+        },\n+      ],\n       /**\n        * Border Width X\n        * @see https://tailwindcss.com/docs/border-width\n        */\n-      \"border-w-x\": [{\n-        \"border-x\": [borderWidth]\n-      }],\n+      'border-w-x': [\n+        {\n+          'border-x': [borderWidth],\n+        },\n+      ],\n       /**\n        * Border Width Y\n        * @see https://tailwindcss.com/docs/border-width\n        */\n-      \"border-w-y\": [{\n-        \"border-y\": [borderWidth]\n-      }],\n+      'border-w-y': [\n+        {\n+          'border-y': [borderWidth],\n+        },\n+      ],\n       /**\n        * Border Width Start\n        * @see https://tailwindcss.com/docs/border-width\n        */\n-      \"border-w-s\": [{\n-        \"border-s\": [borderWidth]\n-      }],\n+      'border-w-s': [\n+        {\n+          'border-s': [borderWidth],\n+        },\n+      ],\n       /**\n        * Border Width End\n        * @see https://tailwindcss.com/docs/border-width\n        */\n-      \"border-w-e\": [{\n-        \"border-e\": [borderWidth]\n-      }],\n+      'border-w-e': [\n+        {\n+          'border-e': [borderWidth],\n+        },\n+      ],\n       /**\n        * Border Width Top\n        * @see https://tailwindcss.com/docs/border-width\n        */\n-      \"border-w-t\": [{\n-        \"border-t\": [borderWidth]\n-      }],\n+      'border-w-t': [\n+        {\n+          'border-t': [borderWidth],\n+        },\n+      ],\n       /**\n        * Border Width Right\n        * @see https://tailwindcss.com/docs/border-width\n        */\n-      \"border-w-r\": [{\n-        \"border-r\": [borderWidth]\n-      }],\n+      'border-w-r': [\n+        {\n+          'border-r': [borderWidth],\n+        },\n+      ],\n       /**\n        * Border Width Bottom\n        * @see https://tailwindcss.com/docs/border-width\n        */\n-      \"border-w-b\": [{\n-        \"border-b\": [borderWidth]\n-      }],\n+      'border-w-b': [\n+        {\n+          'border-b': [borderWidth],\n+        },\n+      ],\n       /**\n        * Border Width Left\n        * @see https://tailwindcss.com/docs/border-width\n        */\n-      \"border-w-l\": [{\n-        \"border-l\": [borderWidth]\n-      }],\n+      'border-w-l': [\n+        {\n+          'border-l': [borderWidth],\n+        },\n+      ],\n       /**\n        * Border Opacity\n        * @see https://tailwindcss.com/docs/border-opacity\n        */\n-      \"border-opacity\": [{\n-        \"border-opacity\": [opacity]\n-      }],\n+      'border-opacity': [\n+        {\n+          'border-opacity': [opacity],\n+        },\n+      ],\n       /**\n        * Border Style\n        * @see https://tailwindcss.com/docs/border-style\n        */\n-      \"border-style\": [{\n-        border: [...getLineStyles(), \"hidden\"]\n-      }],\n+      'border-style': [\n+        {\n+          border: [...getLineStyles(), 'hidden'],\n+        },\n+      ],\n       /**\n        * Divide Width X\n        * @see https://tailwindcss.com/docs/divide-width\n        */\n-      \"divide-x\": [{\n-        \"divide-x\": [borderWidth]\n-      }],\n+      'divide-x': [\n+        {\n+          'divide-x': [borderWidth],\n+        },\n+      ],\n       /**\n        * Divide Width X Reverse\n        * @see https://tailwindcss.com/docs/divide-width\n        */\n-      \"divide-x-reverse\": [\"divide-x-reverse\"],\n+      'divide-x-reverse': ['divide-x-reverse'],\n       /**\n        * Divide Width Y\n        * @see https://tailwindcss.com/docs/divide-width\n        */\n-      \"divide-y\": [{\n-        \"divide-y\": [borderWidth]\n-      }],\n+      'divide-y': [\n+        {\n+          'divide-y': [borderWidth],\n+        },\n+      ],\n       /**\n        * Divide Width Y Reverse\n        * @see https://tailwindcss.com/docs/divide-width\n        */\n-      \"divide-y-reverse\": [\"divide-y-reverse\"],\n+      'divide-y-reverse': ['divide-y-reverse'],\n       /**\n        * Divide Opacity\n        * @see https://tailwindcss.com/docs/divide-opacity\n        */\n-      \"divide-opacity\": [{\n-        \"divide-opacity\": [opacity]\n-      }],\n+      'divide-opacity': [\n+        {\n+          'divide-opacity': [opacity],\n+        },\n+      ],\n       /**\n        * Divide Style\n        * @see https://tailwindcss.com/docs/divide-style\n        */\n-      \"divide-style\": [{\n-        divide: getLineStyles()\n-      }],\n+      'divide-style': [\n+        {\n+          divide: getLineStyles(),\n+        },\n+      ],\n       /**\n        * Border Color\n        * @see https://tailwindcss.com/docs/border-color\n        */\n-      \"border-color\": [{\n-        border: [borderColor]\n-      }],\n+      'border-color': [\n+        {\n+          border: [borderColor],\n+        },\n+      ],\n       /**\n        * Border Color X\n        * @see https://tailwindcss.com/docs/border-color\n        */\n-      \"border-color-x\": [{\n-        \"border-x\": [borderColor]\n-      }],\n+      'border-color-x': [\n+        {\n+          'border-x': [borderColor],\n+        },\n+      ],\n       /**\n        * Border Color Y\n        * @see https://tailwindcss.com/docs/border-color\n        */\n-      \"border-color-y\": [{\n-        \"border-y\": [borderColor]\n-      }],\n+      'border-color-y': [\n+        {\n+          'border-y': [borderColor],\n+        },\n+      ],\n       /**\n        * Border Color Top\n        * @see https://tailwindcss.com/docs/border-color\n        */\n-      \"border-color-t\": [{\n-        \"border-t\": [borderColor]\n-      }],\n+      'border-color-t': [\n+        {\n+          'border-t': [borderColor],\n+        },\n+      ],\n       /**\n        * Border Color Right\n        * @see https://tailwindcss.com/docs/border-color\n        */\n-      \"border-color-r\": [{\n-        \"border-r\": [borderColor]\n-      }],\n+      'border-color-r': [\n+        {\n+          'border-r': [borderColor],\n+        },\n+      ],\n       /**\n        * Border Color Bottom\n        * @see https://tailwindcss.com/docs/border-color\n        */\n-      \"border-color-b\": [{\n-        \"border-b\": [borderColor]\n-      }],\n+      'border-color-b': [\n+        {\n+          'border-b': [borderColor],\n+        },\n+      ],\n       /**\n        * Border Color Left\n        * @see https://tailwindcss.com/docs/border-color\n        */\n-      \"border-color-l\": [{\n-        \"border-l\": [borderColor]\n-      }],\n+      'border-color-l': [\n+        {\n+          'border-l': [borderColor],\n+        },\n+      ],\n       /**\n        * Divide Color\n        * @see https://tailwindcss.com/docs/divide-color\n        */\n-      \"divide-color\": [{\n-        divide: [borderColor]\n-      }],\n+      'divide-color': [\n+        {\n+          divide: [borderColor],\n+        },\n+      ],\n       /**\n        * Outline Style\n        * @see https://tailwindcss.com/docs/outline-style\n        */\n-      \"outline-style\": [{\n-        outline: [\"\", ...getLineStyles()]\n-      }],\n+      'outline-style': [\n+        {\n+          outline: ['', ...getLineStyles()],\n+        },\n+      ],\n       /**\n        * Outline Offset\n        * @see https://tailwindcss.com/docs/outline-offset\n        */\n-      \"outline-offset\": [{\n-        \"outline-offset\": [isLength, isArbitraryValue]\n-      }],\n+      'outline-offset': [\n+        {\n+          'outline-offset': [isLength, isArbitraryValue],\n+        },\n+      ],\n       /**\n        * Outline Width\n        * @see https://tailwindcss.com/docs/outline-width\n        */\n-      \"outline-w\": [{\n-        outline: [isLength, isArbitraryLength]\n-      }],\n+      'outline-w': [\n+        {\n+          outline: [isLength, isArbitraryLength],\n+        },\n+      ],\n       /**\n        * Outline Color\n        * @see https://tailwindcss.com/docs/outline-color\n        */\n-      \"outline-color\": [{\n-        outline: [colors]\n-      }],\n+      'outline-color': [\n+        {\n+          outline: [colors],\n+        },\n+      ],\n       /**\n        * Ring Width\n        * @see https://tailwindcss.com/docs/ring-width\n        */\n-      \"ring-w\": [{\n-        ring: getLengthWithEmptyAndArbitrary()\n-      }],\n+      'ring-w': [\n+        {\n+          ring: getLengthWithEmptyAndArbitrary(),\n+        },\n+      ],\n       /**\n        * Ring Width Inset\n        * @see https://tailwindcss.com/docs/ring-width\n        */\n-      \"ring-w-inset\": [\"ring-inset\"],\n+      'ring-w-inset': ['ring-inset'],\n       /**\n        * Ring Color\n        * @see https://tailwindcss.com/docs/ring-color\n        */\n-      \"ring-color\": [{\n-        ring: [colors]\n-      }],\n+      'ring-color': [\n+        {\n+          ring: [colors],\n+        },\n+      ],\n       /**\n        * Ring Opacity\n        * @see https://tailwindcss.com/docs/ring-opacity\n        */\n-      \"ring-opacity\": [{\n-        \"ring-opacity\": [opacity]\n-      }],\n+      'ring-opacity': [\n+        {\n+          'ring-opacity': [opacity],\n+        },\n+      ],\n       /**\n        * Ring Offset Width\n        * @see https://tailwindcss.com/docs/ring-offset-width\n        */\n-      \"ring-offset-w\": [{\n-        \"ring-offset\": [isLength, isArbitraryLength]\n-      }],\n+      'ring-offset-w': [\n+        {\n+          'ring-offset': [isLength, isArbitraryLength],\n+        },\n+      ],\n       /**\n        * Ring Offset Color\n        * @see https://tailwindcss.com/docs/ring-offset-color\n        */\n-      \"ring-offset-color\": [{\n-        \"ring-offset\": [colors]\n-      }],\n+      'ring-offset-color': [\n+        {\n+          'ring-offset': [colors],\n+        },\n+      ],\n       // Effects\n       /**\n        * Box Shadow\n        * @see https://tailwindcss.com/docs/box-shadow\n        */\n-      shadow: [{\n-        shadow: [\"\", \"inner\", \"none\", isTshirtSize, isArbitraryShadow]\n-      }],\n+      shadow: [\n+        {\n+          shadow: ['', 'inner', 'none', isTshirtSize, isArbitraryShadow],\n+        },\n+      ],\n       /**\n        * Box Shadow Color\n        * @see https://tailwindcss.com/docs/box-shadow-color\n        */\n-      \"shadow-color\": [{\n-        shadow: [isAny]\n-      }],\n+      'shadow-color': [\n+        {\n+          shadow: [isAny],\n+        },\n+      ],\n       /**\n        * Opacity\n        * @see https://tailwindcss.com/docs/opacity\n        */\n-      opacity: [{\n-        opacity: [opacity]\n-      }],\n+      opacity: [\n+        {\n+          opacity: [opacity],\n+        },\n+      ],\n       /**\n        * Mix Blend Mode\n        * @see https://tailwindcss.com/docs/mix-blend-mode\n        */\n-      \"mix-blend\": [{\n-        \"mix-blend\": [...getBlendModes(), \"plus-lighter\", \"plus-darker\"]\n-      }],\n+      'mix-blend': [\n+        {\n+          'mix-blend': [...getBlendModes(), 'plus-lighter', 'plus-darker'],\n+        },\n+      ],\n       /**\n        * Background Blend Mode\n        * @see https://tailwindcss.com/docs/background-blend-mode\n        */\n-      \"bg-blend\": [{\n-        \"bg-blend\": getBlendModes()\n-      }],\n+      'bg-blend': [\n+        {\n+          'bg-blend': getBlendModes(),\n+        },\n+      ],\n       // Filters\n       /**\n        * Filter\n        * @deprecated since Tailwind CSS v3.0.0\n        * @see https://tailwindcss.com/docs/filter\n        */\n-      filter: [{\n-        filter: [\"\", \"none\"]\n-      }],\n+      filter: [\n+        {\n+          filter: ['', 'none'],\n+        },\n+      ],\n       /**\n        * Blur\n        * @see https://tailwindcss.com/docs/blur\n        */\n-      blur: [{\n-        blur: [blur]\n-      }],\n+      blur: [\n+        {\n+          blur: [blur],\n+        },\n+      ],\n       /**\n        * Brightness\n        * @see https://tailwindcss.com/docs/brightness\n        */\n-      brightness: [{\n-        brightness: [brightness]\n-      }],\n+      brightness: [\n+        {\n+          brightness: [brightness],\n+        },\n+      ],\n       /**\n        * Contrast\n        * @see https://tailwindcss.com/docs/contrast\n        */\n-      contrast: [{\n-        contrast: [contrast]\n-      }],\n+      contrast: [\n+        {\n+          contrast: [contrast],\n+        },\n+      ],\n       /**\n        * Drop Shadow\n        * @see https://tailwindcss.com/docs/drop-shadow\n        */\n-      \"drop-shadow\": [{\n-        \"drop-shadow\": [\"\", \"none\", isTshirtSize, isArbitraryValue]\n-      }],\n+      'drop-shadow': [\n+        {\n+          'drop-shadow': ['', 'none', isTshirtSize, isArbitraryValue],\n+        },\n+      ],\n       /**\n        * Grayscale\n        * @see https://tailwindcss.com/docs/grayscale\n        */\n-      grayscale: [{\n-        grayscale: [grayscale]\n-      }],\n+      grayscale: [\n+        {\n+          grayscale: [grayscale],\n+        },\n+      ],\n       /**\n        * Hue Rotate\n        * @see https://tailwindcss.com/docs/hue-rotate\n        */\n-      \"hue-rotate\": [{\n-        \"hue-rotate\": [hueRotate]\n-      }],\n+      'hue-rotate': [\n+        {\n+          'hue-rotate': [hueRotate],\n+        },\n+      ],\n       /**\n        * Invert\n        * @see https://tailwindcss.com/docs/invert\n        */\n-      invert: [{\n-        invert: [invert]\n-      }],\n+      invert: [\n+        {\n+          invert: [invert],\n+        },\n+      ],\n       /**\n        * Saturate\n        * @see https://tailwindcss.com/docs/saturate\n        */\n-      saturate: [{\n-        saturate: [saturate]\n-      }],\n+      saturate: [\n+        {\n+          saturate: [saturate],\n+        },\n+      ],\n       /**\n        * Sepia\n        * @see https://tailwindcss.com/docs/sepia\n        */\n-      sepia: [{\n-        sepia: [sepia]\n-      }],\n+      sepia: [\n+        {\n+          sepia: [sepia],\n+        },\n+      ],\n       /**\n        * Backdrop Filter\n        * @deprecated since Tailwind CSS v3.0.0\n        * @see https://tailwindcss.com/docs/backdrop-filter\n        */\n-      \"backdrop-filter\": [{\n-        \"backdrop-filter\": [\"\", \"none\"]\n-      }],\n+      'backdrop-filter': [\n+        {\n+          'backdrop-filter': ['', 'none'],\n+        },\n+      ],\n       /**\n        * Backdrop Blur\n        * @see https://tailwindcss.com/docs/backdrop-blur\n        */\n-      \"backdrop-blur\": [{\n-        \"backdrop-blur\": [blur]\n-      }],\n+      'backdrop-blur': [\n+        {\n+          'backdrop-blur': [blur],\n+        },\n+      ],\n       /**\n        * Backdrop Brightness\n        * @see https://tailwindcss.com/docs/backdrop-brightness\n        */\n-      \"backdrop-brightness\": [{\n-        \"backdrop-brightness\": [brightness]\n-      }],\n+      'backdrop-brightness': [\n+        {\n+          'backdrop-brightness': [brightness],\n+        },\n+      ],\n       /**\n        * Backdrop Contrast\n        * @see https://tailwindcss.com/docs/backdrop-contrast\n        */\n-      \"backdrop-contrast\": [{\n-        \"backdrop-contrast\": [contrast]\n-      }],\n+      'backdrop-contrast': [\n+        {\n+          'backdrop-contrast': [contrast],\n+        },\n+      ],\n       /**\n        * Backdrop Grayscale\n        * @see https://tailwindcss.com/docs/backdrop-grayscale\n        */\n-      \"backdrop-grayscale\": [{\n-        \"backdrop-grayscale\": [grayscale]\n-      }],\n+      'backdrop-grayscale': [\n+        {\n+          'backdrop-grayscale': [grayscale],\n+        },\n+      ],\n       /**\n        * Backdrop Hue Rotate\n        * @see https://tailwindcss.com/docs/backdrop-hue-rotate\n        */\n-      \"backdrop-hue-rotate\": [{\n-        \"backdrop-hue-rotate\": [hueRotate]\n-      }],\n+      'backdrop-hue-rotate': [\n+        {\n+          'backdrop-hue-rotate': [hueRotate],\n+        },\n+      ],\n       /**\n        * Backdrop Invert\n        * @see https://tailwindcss.com/docs/backdrop-invert\n        */\n-      \"backdrop-invert\": [{\n-        \"backdrop-invert\": [invert]\n-      }],\n+      'backdrop-invert': [\n+        {\n+          'backdrop-invert': [invert],\n+        },\n+      ],\n       /**\n        * Backdrop Opacity\n        * @see https://tailwindcss.com/docs/backdrop-opacity\n        */\n-      \"backdrop-opacity\": [{\n-        \"backdrop-opacity\": [opacity]\n-      }],\n+      'backdrop-opacity': [\n+        {\n+          'backdrop-opacity': [opacity],\n+        },\n+      ],\n       /**\n        * Backdrop Saturate\n        * @see https://tailwindcss.com/docs/backdrop-saturate\n        */\n-      \"backdrop-saturate\": [{\n-        \"backdrop-saturate\": [saturate]\n-      }],\n+      'backdrop-saturate': [\n+        {\n+          'backdrop-saturate': [saturate],\n+        },\n+      ],\n       /**\n        * Backdrop Sepia\n        * @see https://tailwindcss.com/docs/backdrop-sepia\n        */\n-      \"backdrop-sepia\": [{\n-        \"backdrop-sepia\": [sepia]\n-      }],\n+      'backdrop-sepia': [\n+        {\n+          'backdrop-sepia': [sepia],\n+        },\n+      ],\n       // Tables\n       /**\n        * Border Collapse\n        * @see https://tailwindcss.com/docs/border-collapse\n        */\n-      \"border-collapse\": [{\n-        border: [\"collapse\", \"separate\"]\n-      }],\n+      'border-collapse': [\n+        {\n+          border: ['collapse', 'separate'],\n+        },\n+      ],\n       /**\n        * Border Spacing\n        * @see https://tailwindcss.com/docs/border-spacing\n        */\n-      \"border-spacing\": [{\n-        \"border-spacing\": [borderSpacing]\n-      }],\n+      'border-spacing': [\n+        {\n+          'border-spacing': [borderSpacing],\n+        },\n+      ],\n       /**\n        * Border Spacing X\n        * @see https://tailwindcss.com/docs/border-spacing\n        */\n-      \"border-spacing-x\": [{\n-        \"border-spacing-x\": [borderSpacing]\n-      }],\n+      'border-spacing-x': [\n+        {\n+          'border-spacing-x': [borderSpacing],\n+        },\n+      ],\n       /**\n        * Border Spacing Y\n        * @see https://tailwindcss.com/docs/border-spacing\n        */\n-      \"border-spacing-y\": [{\n-        \"border-spacing-y\": [borderSpacing]\n-      }],\n+      'border-spacing-y': [\n+        {\n+          'border-spacing-y': [borderSpacing],\n+        },\n+      ],\n       /**\n        * Table Layout\n        * @see https://tailwindcss.com/docs/table-layout\n        */\n-      \"table-layout\": [{\n-        table: [\"auto\", \"fixed\"]\n-      }],\n+      'table-layout': [\n+        {\n+          table: ['auto', 'fixed'],\n+        },\n+      ],\n       /**\n        * Caption Side\n        * @see https://tailwindcss.com/docs/caption-side\n        */\n-      caption: [{\n-        caption: [\"top\", \"bottom\"]\n-      }],\n+      caption: [\n+        {\n+          caption: ['top', 'bottom'],\n+        },\n+      ],\n       // Transitions and Animation\n       /**\n        * Tranisition Property\n        * @see https://tailwindcss.com/docs/transition-property\n        */\n-      transition: [{\n-        transition: [\"none\", \"all\", \"\", \"colors\", \"opacity\", \"shadow\", \"transform\", isArbitraryValue]\n-      }],\n+      transition: [\n+        {\n+          transition: ['none', 'all', '', 'colors', 'opacity', 'shadow', 'transform', isArbitraryValue],\n+        },\n+      ],\n       /**\n        * Transition Duration\n        * @see https://tailwindcss.com/docs/transition-duration\n        */\n-      duration: [{\n-        duration: getNumberAndArbitrary()\n-      }],\n+      duration: [\n+        {\n+          duration: getNumberAndArbitrary(),\n+        },\n+      ],\n       /**\n        * Transition Timing Function\n        * @see https://tailwindcss.com/docs/transition-timing-function\n        */\n-      ease: [{\n-        ease: [\"linear\", \"in\", \"out\", \"in-out\", isArbitraryValue]\n-      }],\n+      ease: [\n+        {\n+          ease: ['linear', 'in', 'out', 'in-out', isArbitraryValue],\n+        },\n+      ],\n       /**\n        * Transition Delay\n        * @see https://tailwindcss.com/docs/transition-delay\n        */\n-      delay: [{\n-        delay: getNumberAndArbitrary()\n-      }],\n+      delay: [\n+        {\n+          delay: getNumberAndArbitrary(),\n+        },\n+      ],\n       /**\n        * Animation\n        * @see https://tailwindcss.com/docs/animation\n        */\n-      animate: [{\n-        animate: [\"none\", \"spin\", \"ping\", \"pulse\", \"bounce\", isArbitraryValue]\n-      }],\n+      animate: [\n+        {\n+          animate: ['none', 'spin', 'ping', 'pulse', 'bounce', isArbitraryValue],\n+        },\n+      ],\n       // Transforms\n       /**\n        * Transform\n        * @see https://tailwindcss.com/docs/transform\n        */\n-      transform: [{\n-        transform: [\"\", \"gpu\", \"none\"]\n-      }],\n+      transform: [\n+        {\n+          transform: ['', 'gpu', 'none'],\n+        },\n+      ],\n       /**\n        * Scale\n        * @see https://tailwindcss.com/docs/scale\n        */\n-      scale: [{\n-        scale: [scale]\n-      }],\n+      scale: [\n+        {\n+          scale: [scale],\n+        },\n+      ],\n       /**\n        * Scale X\n        * @see https://tailwindcss.com/docs/scale\n        */\n-      \"scale-x\": [{\n-        \"scale-x\": [scale]\n-      }],\n+      'scale-x': [\n+        {\n+          'scale-x': [scale],\n+        },\n+      ],\n       /**\n        * Scale Y\n        * @see https://tailwindcss.com/docs/scale\n        */\n-      \"scale-y\": [{\n-        \"scale-y\": [scale]\n-      }],\n+      'scale-y': [\n+        {\n+          'scale-y': [scale],\n+        },\n+      ],\n       /**\n        * Rotate\n        * @see https://tailwindcss.com/docs/rotate\n        */\n-      rotate: [{\n-        rotate: [isInteger, isArbitraryValue]\n-      }],\n+      rotate: [\n+        {\n+          rotate: [isInteger, isArbitraryValue],\n+        },\n+      ],\n       /**\n        * Translate X\n        * @see https://tailwindcss.com/docs/translate\n        */\n-      \"translate-x\": [{\n-        \"translate-x\": [translate]\n-      }],\n+      'translate-x': [\n+        {\n+          'translate-x': [translate],\n+        },\n+      ],\n       /**\n        * Translate Y\n        * @see https://tailwindcss.com/docs/translate\n        */\n-      \"translate-y\": [{\n-        \"translate-y\": [translate]\n-      }],\n+      'translate-y': [\n+        {\n+          'translate-y': [translate],\n+        },\n+      ],\n       /**\n        * Skew X\n        * @see https://tailwindcss.com/docs/skew\n        */\n-      \"skew-x\": [{\n-        \"skew-x\": [skew]\n-      }],\n+      'skew-x': [\n+        {\n+          'skew-x': [skew],\n+        },\n+      ],\n       /**\n        * Skew Y\n        * @see https://tailwindcss.com/docs/skew\n        */\n-      \"skew-y\": [{\n-        \"skew-y\": [skew]\n-      }],\n+      'skew-y': [\n+        {\n+          'skew-y': [skew],\n+        },\n+      ],\n       /**\n        * Transform Origin\n        * @see https://tailwindcss.com/docs/transform-origin\n        */\n-      \"transform-origin\": [{\n-        origin: [\"center\", \"top\", \"top-right\", \"right\", \"bottom-right\", \"bottom\", \"bottom-left\", \"left\", \"top-left\", isArbitraryValue]\n-      }],\n+      'transform-origin': [\n+        {\n+          origin: ['center', 'top', 'top-right', 'right', 'bottom-right', 'bottom', 'bottom-left', 'left', 'top-left', isArbitraryValue],\n+        },\n+      ],\n       // Interactivity\n       /**\n        * Accent Color\n        * @see https://tailwindcss.com/docs/accent-color\n        */\n-      accent: [{\n-        accent: [\"auto\", colors]\n-      }],\n+      accent: [\n+        {\n+          accent: ['auto', colors],\n+        },\n+      ],\n       /**\n        * Appearance\n        * @see https://tailwindcss.com/docs/appearance\n        */\n-      appearance: [{\n-        appearance: [\"none\", \"auto\"]\n-      }],\n+      appearance: [\n+        {\n+          appearance: ['none', 'auto'],\n+        },\n+      ],\n       /**\n        * Cursor\n        * @see https://tailwindcss.com/docs/cursor\n        */\n-      cursor: [{\n-        cursor: [\"auto\", \"default\", \"pointer\", \"wait\", \"text\", \"move\", \"help\", \"not-allowed\", \"none\", \"context-menu\", \"progress\", \"cell\", \"crosshair\", \"vertical-text\", \"alias\", \"copy\", \"no-drop\", \"grab\", \"grabbing\", \"all-scroll\", \"col-resize\", \"row-resize\", \"n-resize\", \"e-resize\", \"s-resize\", \"w-resize\", \"ne-resize\", \"nw-resize\", \"se-resize\", \"sw-resize\", \"ew-resize\", \"ns-resize\", \"nesw-resize\", \"nwse-resize\", \"zoom-in\", \"zoom-out\", isArbitraryValue]\n-      }],\n+      cursor: [\n+        {\n+          cursor: [\n+            'auto',\n+            'default',\n+            'pointer',\n+            'wait',\n+            'text',\n+            'move',\n+            'help',\n+            'not-allowed',\n+            'none',\n+            'context-menu',\n+            'progress',\n+            'cell',\n+            'crosshair',\n+            'vertical-text',\n+            'alias',\n+            'copy',\n+            'no-drop',\n+            'grab',\n+            'grabbing',\n+            'all-scroll',\n+            'col-resize',\n+            'row-resize',\n+            'n-resize',\n+            'e-resize',\n+            's-resize',\n+            'w-resize',\n+            'ne-resize',\n+            'nw-resize',\n+            'se-resize',\n+            'sw-resize',\n+            'ew-resize',\n+            'ns-resize',\n+            'nesw-resize',\n+            'nwse-resize',\n+            'zoom-in',\n+            'zoom-out',\n+            isArbitraryValue,\n+          ],\n+        },\n+      ],\n       /**\n        * Caret Color\n        * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities\n        */\n-      \"caret-color\": [{\n-        caret: [colors]\n-      }],\n+      'caret-color': [\n+        {\n+          caret: [colors],\n+        },\n+      ],\n       /**\n        * Pointer Events\n        * @see https://tailwindcss.com/docs/pointer-events\n        */\n-      \"pointer-events\": [{\n-        \"pointer-events\": [\"none\", \"auto\"]\n-      }],\n+      'pointer-events': [\n+        {\n+          'pointer-events': ['none', 'auto'],\n+        },\n+      ],\n       /**\n        * Resize\n        * @see https://tailwindcss.com/docs/resize\n        */\n-      resize: [{\n-        resize: [\"none\", \"y\", \"x\", \"\"]\n-      }],\n+      resize: [\n+        {\n+          resize: ['none', 'y', 'x', ''],\n+        },\n+      ],\n       /**\n        * Scroll Behavior\n        * @see https://tailwindcss.com/docs/scroll-behavior\n        */\n-      \"scroll-behavior\": [{\n-        scroll: [\"auto\", \"smooth\"]\n-      }],\n+      'scroll-behavior': [\n+        {\n+          scroll: ['auto', 'smooth'],\n+        },\n+      ],\n       /**\n        * Scroll Margin\n        * @see https://tailwindcss.com/docs/scroll-margin\n        */\n-      \"scroll-m\": [{\n-        \"scroll-m\": getSpacingWithArbitrary()\n-      }],\n+      'scroll-m': [\n+        {\n+          'scroll-m': getSpacingWithArbitrary(),\n+        },\n+      ],\n       /**\n        * Scroll Margin X\n        * @see https://tailwindcss.com/docs/scroll-margin\n        */\n-      \"scroll-mx\": [{\n-        \"scroll-mx\": getSpacingWithArbitrary()\n-      }],\n+      'scroll-mx': [\n+        {\n+          'scroll-mx': getSpacingWithArbitrary(),\n+        },\n+      ],\n       /**\n        * Scroll Margin Y\n        * @see https://tailwindcss.com/docs/scroll-margin\n        */\n-      \"scroll-my\": [{\n-        \"scroll-my\": getSpacingWithArbitrary()\n-      }],\n+      'scroll-my': [\n+        {\n+          'scroll-my': getSpacingWithArbitrary(),\n+        },\n+      ],\n       /**\n        * Scroll Margin Start\n        * @see https://tailwindcss.com/docs/scroll-margin\n        */\n-      \"scroll-ms\": [{\n-        \"scroll-ms\": getSpacingWithArbitrary()\n-      }],\n+      'scroll-ms': [\n+        {\n+          'scroll-ms': getSpacingWithArbitrary(),\n+        },\n+      ],\n       /**\n        * Scroll Margin End\n        * @see https://tailwindcss.com/docs/scroll-margin\n        */\n-      \"scroll-me\": [{\n-        \"scroll-me\": getSpacingWithArbitrary()\n-      }],\n+      'scroll-me': [\n+        {\n+          'scroll-me': getSpacingWithArbitrary(),\n+        },\n+      ],\n       /**\n        * Scroll Margin Top\n        * @see https://tailwindcss.com/docs/scroll-margin\n        */\n-      \"scroll-mt\": [{\n-        \"scroll-mt\": getSpacingWithArbitrary()\n-      }],\n+      'scroll-mt': [\n+        {\n+          'scroll-mt': getSpacingWithArbitrary(),\n+        },\n+      ],\n       /**\n        * Scroll Margin Right\n        * @see https://tailwindcss.com/docs/scroll-margin\n        */\n-      \"scroll-mr\": [{\n-        \"scroll-mr\": getSpacingWithArbitrary()\n-      }],\n+      'scroll-mr': [\n+        {\n+          'scroll-mr': getSpacingWithArbitrary(),\n+        },\n+      ],\n       /**\n        * Scroll Margin Bottom\n        * @see https://tailwindcss.com/docs/scroll-margin\n        */\n-      \"scroll-mb\": [{\n-        \"scroll-mb\": getSpacingWithArbitrary()\n-      }],\n+      'scroll-mb': [\n+        {\n+          'scroll-mb': getSpacingWithArbitrary(),\n+        },\n+      ],\n       /**\n        * Scroll Margin Left\n        * @see https://tailwindcss.com/docs/scroll-margin\n        */\n-      \"scroll-ml\": [{\n-        \"scroll-ml\": getSpacingWithArbitrary()\n-      }],\n+      'scroll-ml': [\n+        {\n+          'scroll-ml': getSpacingWithArbitrary(),\n+        },\n+      ],\n       /**\n        * Scroll Padding\n        * @see https://tailwindcss.com/docs/scroll-padding\n        */\n-      \"scroll-p\": [{\n-        \"scroll-p\": getSpacingWithArbitrary()\n-      }],\n+      'scroll-p': [\n+        {\n+          'scroll-p': getSpacingWithArbitrary(),\n+        },\n+      ],\n       /**\n        * Scroll Padding X\n        * @see https://tailwindcss.com/docs/scroll-padding\n        */\n-      \"scroll-px\": [{\n-        \"scroll-px\": getSpacingWithArbitrary()\n-      }],\n+      'scroll-px': [\n+        {\n+          'scroll-px': getSpacingWithArbitrary(),\n+        },\n+      ],\n       /**\n        * Scroll Padding Y\n        * @see https://tailwindcss.com/docs/scroll-padding\n        */\n-      \"scroll-py\": [{\n-        \"scroll-py\": getSpacingWithArbitrary()\n-      }],\n+      'scroll-py': [\n+        {\n+          'scroll-py': getSpacingWithArbitrary(),\n+        },\n+      ],\n       /**\n        * Scroll Padding Start\n        * @see https://tailwindcss.com/docs/scroll-padding\n        */\n-      \"scroll-ps\": [{\n-        \"scroll-ps\": getSpacingWithArbitrary()\n-      }],\n+      'scroll-ps': [\n+        {\n+          'scroll-ps': getSpacingWithArbitrary(),\n+        },\n+      ],\n       /**\n        * Scroll Padding End\n        * @see https://tailwindcss.com/docs/scroll-padding\n        */\n-      \"scroll-pe\": [{\n-        \"scroll-pe\": getSpacingWithArbitrary()\n-      }],\n+      'scroll-pe': [\n+        {\n+          'scroll-pe': getSpacingWithArbitrary(),\n+        },\n+      ],\n       /**\n        * Scroll Padding Top\n        * @see https://tailwindcss.com/docs/scroll-padding\n        */\n-      \"scroll-pt\": [{\n-        \"scroll-pt\": getSpacingWithArbitrary()\n-      }],\n+      'scroll-pt': [\n+        {\n+          'scroll-pt': getSpacingWithArbitrary(),\n+        },\n+      ],\n       /**\n        * Scroll Padding Right\n        * @see https://tailwindcss.com/docs/scroll-padding\n        */\n-      \"scroll-pr\": [{\n-        \"scroll-pr\": getSpacingWithArbitrary()\n-      }],\n+      'scroll-pr': [\n+        {\n+          'scroll-pr': getSpacingWithArbitrary(),\n+        },\n+      ],\n       /**\n        * Scroll Padding Bottom\n        * @see https://tailwindcss.com/docs/scroll-padding\n        */\n-      \"scroll-pb\": [{\n-        \"scroll-pb\": getSpacingWithArbitrary()\n-      }],\n+      'scroll-pb': [\n+        {\n+          'scroll-pb': getSpacingWithArbitrary(),\n+        },\n+      ],\n       /**\n        * Scroll Padding Left\n        * @see https://tailwindcss.com/docs/scroll-padding\n        */\n-      \"scroll-pl\": [{\n-        \"scroll-pl\": getSpacingWithArbitrary()\n-      }],\n+      'scroll-pl': [\n+        {\n+          'scroll-pl': getSpacingWithArbitrary(),\n+        },\n+      ],\n       /**\n        * Scroll Snap Align\n        * @see https://tailwindcss.com/docs/scroll-snap-align\n        */\n-      \"snap-align\": [{\n-        snap: [\"start\", \"end\", \"center\", \"align-none\"]\n-      }],\n+      'snap-align': [\n+        {\n+          snap: ['start', 'end', 'center', 'align-none'],\n+        },\n+      ],\n       /**\n        * Scroll Snap Stop\n        * @see https://tailwindcss.com/docs/scroll-snap-stop\n        */\n-      \"snap-stop\": [{\n-        snap: [\"normal\", \"always\"]\n-      }],\n+      'snap-stop': [\n+        {\n+          snap: ['normal', 'always'],\n+        },\n+      ],\n       /**\n        * Scroll Snap Type\n        * @see https://tailwindcss.com/docs/scroll-snap-type\n        */\n-      \"snap-type\": [{\n-        snap: [\"none\", \"x\", \"y\", \"both\"]\n-      }],\n+      'snap-type': [\n+        {\n+          snap: ['none', 'x', 'y', 'both'],\n+        },\n+      ],\n       /**\n        * Scroll Snap Type Strictness\n        * @see https://tailwindcss.com/docs/scroll-snap-type\n        */\n-      \"snap-strictness\": [{\n-        snap: [\"mandatory\", \"proximity\"]\n-      }],\n+      'snap-strictness': [\n+        {\n+          snap: ['mandatory', 'proximity'],\n+        },\n+      ],\n       /**\n        * Touch Action\n        * @see https://tailwindcss.com/docs/touch-action\n        */\n-      touch: [{\n-        touch: [\"auto\", \"none\", \"manipulation\"]\n-      }],\n+      touch: [\n+        {\n+          touch: ['auto', 'none', 'manipulation'],\n+        },\n+      ],\n       /**\n        * Touch Action X\n        * @see https://tailwindcss.com/docs/touch-action\n        */\n-      \"touch-x\": [{\n-        \"touch-pan\": [\"x\", \"left\", \"right\"]\n-      }],\n+      'touch-x': [\n+        {\n+          'touch-pan': ['x', 'left', 'right'],\n+        },\n+      ],\n       /**\n        * Touch Action Y\n        * @see https://tailwindcss.com/docs/touch-action\n        */\n-      \"touch-y\": [{\n-        \"touch-pan\": [\"y\", \"up\", \"down\"]\n-      }],\n+      'touch-y': [\n+        {\n+          'touch-pan': ['y', 'up', 'down'],\n+        },\n+      ],\n       /**\n        * Touch Action Pinch Zoom\n        * @see https://tailwindcss.com/docs/touch-action\n        */\n-      \"touch-pz\": [\"touch-pinch-zoom\"],\n+      'touch-pz': ['touch-pinch-zoom'],\n       /**\n        * User Select\n        * @see https://tailwindcss.com/docs/user-select\n        */\n-      select: [{\n-        select: [\"none\", \"text\", \"all\", \"auto\"]\n-      }],\n+      select: [\n+        {\n+          select: ['none', 'text', 'all', 'auto'],\n+        },\n+      ],\n       /**\n        * Will Change\n        * @see https://tailwindcss.com/docs/will-change\n        */\n-      \"will-change\": [{\n-        \"will-change\": [\"auto\", \"scroll\", \"contents\", \"transform\", isArbitraryValue]\n-      }],\n+      'will-change': [\n+        {\n+          'will-change': ['auto', 'scroll', 'contents', 'transform', isArbitraryValue],\n+        },\n+      ],\n       // SVG\n       /**\n        * Fill\n        * @see https://tailwindcss.com/docs/fill\n        */\n-      fill: [{\n-        fill: [colors, \"none\"]\n-      }],\n+      fill: [\n+        {\n+          fill: [colors, 'none'],\n+        },\n+      ],\n       /**\n        * Stroke Width\n        * @see https://tailwindcss.com/docs/stroke-width\n        */\n-      \"stroke-w\": [{\n-        stroke: [isLength, isArbitraryLength, isArbitraryNumber]\n-      }],\n+      'stroke-w': [\n+        {\n+          stroke: [isLength, isArbitraryLength, isArbitraryNumber],\n+        },\n+      ],\n       /**\n        * Stroke\n        * @see https://tailwindcss.com/docs/stroke\n        */\n-      stroke: [{\n-        stroke: [colors, \"none\"]\n-      }],\n+      stroke: [\n+        {\n+          stroke: [colors, 'none'],\n+        },\n+      ],\n       // Accessibility\n       /**\n        * Screen Readers\n        * @see https://tailwindcss.com/docs/screen-readers\n        */\n-      sr: [\"sr-only\", \"not-sr-only\"],\n+      sr: ['sr-only', 'not-sr-only'],\n       /**\n        * Forced Color Adjust\n        * @see https://tailwindcss.com/docs/forced-color-adjust\n        */\n-      \"forced-color-adjust\": [{\n-        \"forced-color-adjust\": [\"auto\", \"none\"]\n-      }]\n+      'forced-color-adjust': [\n+        {\n+          'forced-color-adjust': ['auto', 'none'],\n+        },\n+      ],\n     },\n     conflictingClassGroups: {\n-      overflow: [\"overflow-x\", \"overflow-y\"],\n-      overscroll: [\"overscroll-x\", \"overscroll-y\"],\n-      inset: [\"inset-x\", \"inset-y\", \"start\", \"end\", \"top\", \"right\", \"bottom\", \"left\"],\n-      \"inset-x\": [\"right\", \"left\"],\n-      \"inset-y\": [\"top\", \"bottom\"],\n-      flex: [\"basis\", \"grow\", \"shrink\"],\n-      gap: [\"gap-x\", \"gap-y\"],\n-      p: [\"px\", \"py\", \"ps\", \"pe\", \"pt\", \"pr\", \"pb\", \"pl\"],\n-      px: [\"pr\", \"pl\"],\n-      py: [\"pt\", \"pb\"],\n-      m: [\"mx\", \"my\", \"ms\", \"me\", \"mt\", \"mr\", \"mb\", \"ml\"],\n-      mx: [\"mr\", \"ml\"],\n-      my: [\"mt\", \"mb\"],\n-      size: [\"w\", \"h\"],\n-      \"font-size\": [\"leading\"],\n-      \"fvn-normal\": [\"fvn-ordinal\", \"fvn-slashed-zero\", \"fvn-figure\", \"fvn-spacing\", \"fvn-fraction\"],\n-      \"fvn-ordinal\": [\"fvn-normal\"],\n-      \"fvn-slashed-zero\": [\"fvn-normal\"],\n-      \"fvn-figure\": [\"fvn-normal\"],\n-      \"fvn-spacing\": [\"fvn-normal\"],\n-      \"fvn-fraction\": [\"fvn-normal\"],\n-      \"line-clamp\": [\"display\", \"overflow\"],\n-      rounded: [\"rounded-s\", \"rounded-e\", \"rounded-t\", \"rounded-r\", \"rounded-b\", \"rounded-l\", \"rounded-ss\", \"rounded-se\", \"rounded-ee\", \"rounded-es\", \"rounded-tl\", \"rounded-tr\", \"rounded-br\", \"rounded-bl\"],\n-      \"rounded-s\": [\"rounded-ss\", \"rounded-es\"],\n-      \"rounded-e\": [\"rounded-se\", \"rounded-ee\"],\n-      \"rounded-t\": [\"rounded-tl\", \"rounded-tr\"],\n-      \"rounded-r\": [\"rounded-tr\", \"rounded-br\"],\n-      \"rounded-b\": [\"rounded-br\", \"rounded-bl\"],\n-      \"rounded-l\": [\"rounded-tl\", \"rounded-bl\"],\n-      \"border-spacing\": [\"border-spacing-x\", \"border-spacing-y\"],\n-      \"border-w\": [\"border-w-s\", \"border-w-e\", \"border-w-t\", \"border-w-r\", \"border-w-b\", \"border-w-l\"],\n-      \"border-w-x\": [\"border-w-r\", \"border-w-l\"],\n-      \"border-w-y\": [\"border-w-t\", \"border-w-b\"],\n-      \"border-color\": [\"border-color-t\", \"border-color-r\", \"border-color-b\", \"border-color-l\"],\n-      \"border-color-x\": [\"border-color-r\", \"border-color-l\"],\n-      \"border-color-y\": [\"border-color-t\", \"border-color-b\"],\n-      \"scroll-m\": [\"scroll-mx\", \"scroll-my\", \"scroll-ms\", \"scroll-me\", \"scroll-mt\", \"scroll-mr\", \"scroll-mb\", \"scroll-ml\"],\n-      \"scroll-mx\": [\"scroll-mr\", \"scroll-ml\"],\n-      \"scroll-my\": [\"scroll-mt\", \"scroll-mb\"],\n-      \"scroll-p\": [\"scroll-px\", \"scroll-py\", \"scroll-ps\", \"scroll-pe\", \"scroll-pt\", \"scroll-pr\", \"scroll-pb\", \"scroll-pl\"],\n-      \"scroll-px\": [\"scroll-pr\", \"scroll-pl\"],\n-      \"scroll-py\": [\"scroll-pt\", \"scroll-pb\"],\n-      touch: [\"touch-x\", \"touch-y\", \"touch-pz\"],\n-      \"touch-x\": [\"touch\"],\n-      \"touch-y\": [\"touch\"],\n-      \"touch-pz\": [\"touch\"]\n+      overflow: ['overflow-x', 'overflow-y'],\n+      overscroll: ['overscroll-x', 'overscroll-y'],\n+      inset: ['inset-x', 'inset-y', 'start', 'end', 'top', 'right', 'bottom', 'left'],\n+      'inset-x': ['right', 'left'],\n+      'inset-y': ['top', 'bottom'],\n+      flex: ['basis', 'grow', 'shrink'],\n+      gap: ['gap-x', 'gap-y'],\n+      p: ['px', 'py', 'ps', 'pe', 'pt', 'pr', 'pb', 'pl'],\n+      px: ['pr', 'pl'],\n+      py: ['pt', 'pb'],\n+      m: ['mx', 'my', 'ms', 'me', 'mt', 'mr', 'mb', 'ml'],\n+      mx: ['mr', 'ml'],\n+      my: ['mt', 'mb'],\n+      size: ['w', 'h'],\n+      'font-size': ['leading'],\n+      'fvn-normal': ['fvn-ordinal', 'fvn-slashed-zero', 'fvn-figure', 'fvn-spacing', 'fvn-fraction'],\n+      'fvn-ordinal': ['fvn-normal'],\n+      'fvn-slashed-zero': ['fvn-normal'],\n+      'fvn-figure': ['fvn-normal'],\n+      'fvn-spacing': ['fvn-normal'],\n+      'fvn-fraction': ['fvn-normal'],\n+      'line-clamp': ['display', 'overflow'],\n+      rounded: [\n+        'rounded-s',\n+        'rounded-e',\n+        'rounded-t',\n+        'rounded-r',\n+        'rounded-b',\n+        'rounded-l',\n+        'rounded-ss',\n+        'rounded-se',\n+        'rounded-ee',\n+        'rounded-es',\n+        'rounded-tl',\n+        'rounded-tr',\n+        'rounded-br',\n+        'rounded-bl',\n+      ],\n+      'rounded-s': ['rounded-ss', 'rounded-es'],\n+      'rounded-e': ['rounded-se', 'rounded-ee'],\n+      'rounded-t': ['rounded-tl', 'rounded-tr'],\n+      'rounded-r': ['rounded-tr', 'rounded-br'],\n+      'rounded-b': ['rounded-br', 'rounded-bl'],\n+      'rounded-l': ['rounded-tl', 'rounded-bl'],\n+      'border-spacing': ['border-spacing-x', 'border-spacing-y'],\n+      'border-w': ['border-w-s', 'border-w-e', 'border-w-t', 'border-w-r', 'border-w-b', 'border-w-l'],\n+      'border-w-x': ['border-w-r', 'border-w-l'],\n+      'border-w-y': ['border-w-t', 'border-w-b'],\n+      'border-color': ['border-color-t', 'border-color-r', 'border-color-b', 'border-color-l'],\n+      'border-color-x': ['border-color-r', 'border-color-l'],\n+      'border-color-y': ['border-color-t', 'border-color-b'],\n+      'scroll-m': ['scroll-mx', 'scroll-my', 'scroll-ms', 'scroll-me', 'scroll-mt', 'scroll-mr', 'scroll-mb', 'scroll-ml'],\n+      'scroll-mx': ['scroll-mr', 'scroll-ml'],\n+      'scroll-my': ['scroll-mt', 'scroll-mb'],\n+      'scroll-p': ['scroll-px', 'scroll-py', 'scroll-ps', 'scroll-pe', 'scroll-pt', 'scroll-pr', 'scroll-pb', 'scroll-pl'],\n+      'scroll-px': ['scroll-pr', 'scroll-pl'],\n+      'scroll-py': ['scroll-pt', 'scroll-pb'],\n+      touch: ['touch-x', 'touch-y', 'touch-pz'],\n+      'touch-x': ['touch'],\n+      'touch-y': ['touch'],\n+      'touch-pz': ['touch'],\n     },\n     conflictingClassGroupModifiers: {\n-      \"font-size\": [\"leading\"]\n-    }\n-  };\n-};\n-var twMerge = /* @__PURE__ */ createTailwindMerge(getDefaultConfig);\n+      'font-size': ['leading'],\n+    },\n+  }\n+}\n+var twMerge = /* @__PURE__ */ createTailwindMerge(getDefaultConfig)\n \n // src/lib/utils.ts\n function cn(...inputs) {\n-  return twMerge(clsx(inputs));\n+  return twMerge(clsx(inputs))\n }\n \n // src/components/MaxWidthWrapper.tsx\n-import { useRouter } from \"next/navigation\";\n-var MaxWidthWrapper = ({\n-  className,\n-  children,\n-  styles\n-}) => {\n-  const router = useRouter();\n-  return <div\n-    className={cn(\n-      \"mx-auto w-full max-w-screen-xl px-2 md:px-10\",\n-      className\n-    )}\n-    style={styles}\n-  >{children}</div>;\n-};\n-var MaxWidthWrapper_default = MaxWidthWrapper;\n+import { useRouter } from 'next/navigation'\n+var MaxWidthWrapper = ({ className, children, styles }) => {\n+  const router = useRouter()\n+  return (\n+    <div className={cn('mx-auto w-full max-w-screen-xl px-2 md:px-10', className)} style={styles}>\n+      {children}\n+    </div>\n+  )\n+}\n+var MaxWidthWrapper_default = MaxWidthWrapper\n \n // src/components/ui/button.tsx\n-import * as React2 from \"react\";\n-import { Slot } from \"@radix-ui/react-slot\";\n-import { cva } from \"class-variance-authority\";\n+import * as React2 from 'react'\n+import { Slot } from '@radix-ui/react-slot'\n+import { cva } from 'class-variance-authority'\n var buttonVariants = cva(\n-  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n+  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',\n   {\n     variants: {\n       variant: {\n-        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n-        destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n-        outline: \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n-        secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n-        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n-        link: \"text-primary underline-offset-4 hover:underline\"\n+        default: 'bg-primary text-primary-foreground hover:bg-primary/90',\n+        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',\n+        outline: 'border border-input bg-background hover:bg-accent hover:text-accent-foreground',\n+        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',\n+        ghost: 'hover:bg-accent hover:text-accent-foreground',\n+        link: 'text-primary underline-offset-4 hover:underline',\n       },\n       size: {\n-        default: \"h-10 px-4 py-2\",\n-        sm: \"h-9 rounded-md px-3\",\n-        lg: \"h-11 rounded-md px-8\",\n-        icon: \"h-10 w-10\"\n-      }\n+        default: 'h-10 px-4 py-2',\n+        sm: 'h-9 rounded-md px-3',\n+        lg: 'h-11 rounded-md px-8',\n+        icon: 'h-10 w-10',\n+      },\n     },\n     defaultVariants: {\n-      variant: \"default\",\n-      size: \"default\"\n-    }\n+      variant: 'default',\n+      size: 'default',\n+    },\n   }\n-);\n-var Button = React2.forwardRef(\n-  (_a, ref) => {\n-    var _b = _a, { className, variant, size, asChild = false } = _b, props = __objRest(_b, [\"className\", \"variant\", \"size\", \"asChild\"]);\n-    const Comp = asChild ? Slot : \"button\";\n-    return <Comp\n-      className={cn(buttonVariants({ variant, size, className }))}\n-      ref={ref}\n-      {...props}\n-    />;\n-  }\n-);\n-Button.displayName = \"Button\";\n+)\n+var Button = React2.forwardRef((_a, ref) => {\n+  var _b = _a,\n+    { className, variant, size, asChild = false } = _b,\n+    props = __objRest(_b, ['className', 'variant', 'size', 'asChild'])\n+  const Comp = asChild ? Slot : 'button'\n+  return <Comp className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} />\n+})\n+Button.displayName = 'Button'\n \n // src/components/player/NewControls.tsx\n var sessionOptionsMain = {\n-  requiredFeatures: [\"local-floor\"],\n-  optionalFeatures: [\"bounded-floor\", \"hand-tracking\"]\n-};\n+  requiredFeatures: ['local-floor'],\n+  optionalFeatures: ['bounded-floor', 'hand-tracking'],\n+}\n var Controls = ({ moments, isSingle, videoTexture, video, viewOnly, isXR, handleNextClick, handlePrevClick, crm }) => {\n-  var _a, _b, _c, _d;\n-  const [isPaused, setPaused] = useState2(false);\n-  const [isMuted, setMuted] = useState2(true);\n-  const [currentTime, setCurrentTime] = useState2(0);\n-  const [currentPlaying, setCurrentPlaying] = useState2(0);\n-  const totalMedia = (_a = moments == null ? void 0 : moments.media) == null ? void 0 : _a.length;\n-  let currentMedia = (_c = (_b = moments == null ? void 0 : moments.media) == null ? void 0 : _b[currentPlaying]) != null ? _c : moments == null ? void 0 : moments.media;\n+  var _a, _b, _c, _d\n+  const [isPaused, setPaused] = useState2(false)\n+  const [isMuted, setMuted] = useState2(true)\n+  const [currentTime, setCurrentTime] = useState2(0)\n+  const [currentPlaying, setCurrentPlaying] = useState2(0)\n+  const totalMedia = (_a = moments == null ? void 0 : moments.media) == null ? void 0 : _a.length\n+  let currentMedia =\n+    (_c = (_b = moments == null ? void 0 : moments.media) == null ? void 0 : _b[currentPlaying]) != null ? _c : moments == null ? void 0 : moments.media\n   if (!((_d = moments == null ? void 0 : moments.media) == null ? void 0 : _d.length)) {\n-    currentMedia = crm;\n+    currentMedia = crm\n   }\n-  const isVR = currentMedia == null ? void 0 : currentMedia.xr;\n-  const enterAR = useEnterXR(\"immersive-ar\", sessionOptionsMain);\n-  const xrState = useXR.getState();\n-  const supported = useSessionSupported(\"immersive-vr\");\n-  const videoElementRef = useRef2(null);\n+  const isVR = currentMedia == null ? void 0 : currentMedia.xr\n+  const enterAR = useEnterXR('immersive-ar', sessionOptionsMain)\n+  const xrState = useXR.getState()\n+  const supported = useSessionSupported('immersive-vr')\n+  const videoElementRef = useRef2(null)\n   useEffect2(() => {\n     if (video) {\n       if (isMuted !== video.muted) {\n-        video.muted = isMuted;\n+        video.muted = isMuted\n       }\n-      videoElementRef.current = video;\n+      videoElementRef.current = video\n       const updateCurrentTime = () => {\n-        setCurrentTime(video.currentTime);\n-      };\n-      video.addEventListener(\"timeupdate\", updateCurrentTime);\n+        setCurrentTime(video.currentTime)\n+      }\n+      video.addEventListener('timeupdate', updateCurrentTime)\n       return () => {\n-        video.removeEventListener(\"timeupdate\", updateCurrentTime);\n-      };\n+        video.removeEventListener('timeupdate', updateCurrentTime)\n+      }\n     }\n-  }, [video]);\n+  }, [video])\n   const handlePausePlay = () => {\n     if (videoElementRef.current) {\n-      if (currentMedia.type === \"video\") {\n+      if (currentMedia.type === 'video') {\n         if (videoElementRef.current.paused) {\n-          videoElementRef.current.play();\n-          setPaused(false);\n+          videoElementRef.current.play()\n+          setPaused(false)\n         } else {\n-          videoElementRef.current.pause();\n-          setPaused(true);\n+          videoElementRef.current.pause()\n+          setPaused(true)\n         }\n       } else {\n-        setPaused(!isPaused);\n+        setPaused(!isPaused)\n       }\n     }\n-  };\n+  }\n   const handleMuteUnmute = () => {\n     if (videoElementRef.current) {\n-      videoElementRef.current.muted = !videoElementRef.current.muted;\n-      setMuted(videoElementRef.current.muted);\n+      videoElementRef.current.muted = !videoElementRef.current.muted\n+      setMuted(videoElementRef.current.muted)\n     }\n-  };\n+  }\n   const handleSeek = (event) => {\n-    const newTime = parseFloat(event.target.value);\n+    const newTime = parseFloat(event.target.value)\n     if (videoElementRef.current) {\n-      videoElementRef.current.currentTime = newTime;\n-      setCurrentTime(newTime);\n+      videoElementRef.current.currentTime = newTime\n+      setCurrentTime(newTime)\n     }\n-  };\n+  }\n   const formatTime = (time) => {\n-    if (isNaN(time))\n-      return \"0:00\";\n-    const minutes = Math.floor(time / 60);\n-    const seconds = Math.floor(time % 60);\n-    return `${minutes}:${seconds < 10 ? \"0\" : \"\"}${seconds}`;\n-  };\n-  const handleEnterVR = () => __async(void 0, null, function* () {\n-    try {\n-      yield enterAR();\n-    } catch (error) {\n-      console.error(\"Failed to enter VR:\", error);\n-    }\n-  });\n-  return <div className=\"fixed left-0 bottom-0 z-30 w-full gradient-controls from-zinc-900 to-zinc-900\"><MaxWidthWrapper_default className=\"pb-10 px-4 flex flex-col items-center justify-center\"><div className=\"w-full flex flex-row justify-between items-center mb-4\">{(isXR || (currentMedia == null ? void 0 : currentMedia.type) === \"video\" || !isSingle) && <div className=\"flex gap-2 md:gap-5 items-center justify-center w-full\"><div className=\"flex items-center bg-black bg-opacity-20 backdrop-blur-md rounded-full px-4 py-2 justify-center\">\n-    <div className=\"flex gap-2 md:gap-5\">\n-      {\n-        /* Prev Button */\n+    if (isNaN(time)) return '0:00'\n+    const minutes = Math.floor(time / 60)\n+    const seconds = Math.floor(time % 60)\n+    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`\n+  }\n+  const handleEnterVR = () =>\n+    __async(void 0, null, function* () {\n+      try {\n+        yield enterAR()\n+      } catch (error) {\n+        console.error('Failed to enter VR:', error)\n       }\n-      {!isSingle && totalMedia > 1 && <div\n-        onClick={handlePrevClick}\n-        className=\"inline-flex w-10 h-10 md:w-12 md:h-12 cursor-pointer justify-center items-center gap-2.5 hover:bg-opacity-40 transition-all duration-300 ease-in-out\"\n-      ><ChevronLeft className=\"w-6 h-6 text-white z-20\" /></div>}\n-      {\n-        /* Play/Pause Button */\n-      }\n-      <div\n-        onClick={handlePausePlay}\n-        className=\"w-10 h-10 md:w-12 md:h-12 cursor-pointer justify-center items-center gap-2.5 inline-flex hover:bg-opacity-40 transition-all duration-300 ease-in-out\"\n-      >{isPaused ? <Play className=\"md:w-6 md:h-6 w-5 h-5 text-white z-20\" /> : <Pause className=\"md:w-6 md:h-6 w-5 h-5 text-white z-20\" />}</div>\n-      {\n-        /* Next Button */\n-      }\n-      {!isSingle && totalMedia > 1 && <div\n-        onClick={handleNextClick}\n-        className=\"inline-flex w-10 h-10 md:w-12 md:h-12 cursor-pointer justify-center items-center gap-2.5 hover:bg-opacity-40 transition-all duration-300 ease-in-out\"\n-      ><ChevronRight className=\"w-6 h-6 text-white z-20\" /></div>}\n+    })\n+  return (\n+    <div className=\"fixed left-0 bottom-0 z-30 w-full gradient-controls from-zinc-900 to-zinc-900\">\n+      <MaxWidthWrapper_default className=\"pb-10 px-4 flex flex-col items-center justify-center\">\n+        <div className=\"w-full flex flex-row justify-between items-center mb-4\">\n+          {(isXR || (currentMedia == null ? void 0 : currentMedia.type) === 'video' || !isSingle) && (\n+            <div className=\"flex gap-2 md:gap-5 items-center justify-center w-full\">\n+              <div className=\"flex items-center bg-black bg-opacity-20 backdrop-blur-md rounded-full px-4 py-2 justify-center\">\n+                <div className=\"flex gap-2 md:gap-5\">\n+                  {/* Prev Button */}\n+                  {!isSingle && totalMedia > 1 && (\n+                    <div\n+                      onClick={handlePrevClick}\n+                      className=\"inline-flex w-10 h-10 md:w-12 md:h-12 cursor-pointer justify-center items-center gap-2.5 hover:bg-opacity-40 transition-all duration-300 ease-in-out\"\n+                    >\n+                      <ChevronLeft className=\"w-6 h-6 text-white z-20\" />\n+                    </div>\n+                  )}\n+                  {/* Play/Pause Button */}\n+                  <div\n+                    onClick={handlePausePlay}\n+                    className=\"w-10 h-10 md:w-12 md:h-12 cursor-pointer justify-center items-center gap-2.5 inline-flex hover:bg-opacity-40 transition-all duration-300 ease-in-out\"\n+                  >\n+                    {isPaused ? <Play className=\"md:w-6 md:h-6 w-5 h-5 text-white z-20\" /> : <Pause className=\"md:w-6 md:h-6 w-5 h-5 text-white z-20\" />}\n+                  </div>\n+                  {/* Next Button */}\n+                  {!isSingle && totalMedia > 1 && (\n+                    <div\n+                      onClick={handleNextClick}\n+                      className=\"inline-flex w-10 h-10 md:w-12 md:h-12 cursor-pointer justify-center items-center gap-2.5 hover:bg-opacity-40 transition-all duration-300 ease-in-out\"\n+                    >\n+                      <ChevronRight className=\"w-6 h-6 text-white z-20\" />\n+                    </div>\n+                  )}\n+                </div>\n+                {/* Time and Seek Bar */}\n+                {(crm == null ? void 0 : crm.type) === 'video' && (\n+                  <div className=\"w-3/5 flex justify-center items-center\">\n+                    <span className=\"text-white mr-2\" style={{ width: '50px', textAlign: 'center' }}>\n+                      {formatTime(currentTime)}\n+                    </span>\n+                    <input\n+                      type=\"range\"\n+                      min=\"0\"\n+                      max={(video == null ? void 0 : video.duration) || 0}\n+                      value={currentTime}\n+                      onChange={handleSeek}\n+                      className=\"w-full h-2 appearance-none cursor-pointer\"\n+                      style={{\n+                        background: `linear-gradient(to right, white ${\n+                          (currentTime / (video == null ? void 0 : video.duration)) * 100\n+                        }%, rgba(255, 255, 255, 0.5) ${(currentTime / (video == null ? void 0 : video.duration)) * 100}%)`,\n+                        borderRadius: '14px',\n+                        height: '8px',\n+                        transition: 'background 0.3s ease',\n+                      }}\n+                    />\n+                    <span className=\"text-white ml-2\" style={{ width: '50px', textAlign: 'center' }}>\n+                      {formatTime((video == null ? void 0 : video.duration) || 0)}\n+                    </span>\n+                  </div>\n+                )}\n+                {/* Mute/Unmute Button */}\n+                <div\n+                  onClick={handleMuteUnmute}\n+                  className=\"w-10 h-10 md:w-12 md:h-12 cursor-pointer justify-center items-center gap-2.5 inline-flex hover:bg-opacity-40 transition-all duration-300 ease-in-out\"\n+                >\n+                  {isMuted ? <VolumeX className=\"md:w-6 md:h-6 w-5 h-5 text-white z-20\" /> : <Volume2 className=\"md:w-6 md:h-6 w-5 h-5 text-white z-20\" />}\n+                </div>\n+                {isVR && supported && !(xrState == null ? void 0 : xrState.session) && (\n+                  <Button onClick={handleEnterVR} className=\"rounded-full p-6 text-zinc-900 bg-white hover:bg-white/75\">\n+                    <div className=\"text-sm font-semibold uppercase leading-tight tracking-wide\">Enter VR</div>\n+                  </Button>\n+                )}\n+              </div>\n+            </div>\n+          )}\n+        </div>\n+      </MaxWidthWrapper_default>\n     </div>\n-    {\n-      /* Time and Seek Bar */\n-    }\n-    {(crm == null ? void 0 : crm.type) === \"video\" && <div className=\"w-3/5 flex justify-center items-center\">\n-      <span className=\"text-white mr-2\" style={{ width: \"50px\", textAlign: \"center\" }}>{formatTime(currentTime)}</span>\n-      <input\n-        type=\"range\"\n-        min=\"0\"\n-        max={(video == null ? void 0 : video.duration) || 0}\n-        value={currentTime}\n-        onChange={handleSeek}\n-        className=\"w-full h-2 appearance-none cursor-pointer\"\n-        style={{\n-          background: `linear-gradient(to right, white ${currentTime / (video == null ? void 0 : video.duration) * 100}%, rgba(255, 255, 255, 0.5) ${currentTime / (video == null ? void 0 : video.duration) * 100}%)`,\n-          borderRadius: \"14px\",\n-          height: \"8px\",\n-          transition: \"background 0.3s ease\"\n-        }}\n-      />\n-      <span className=\"text-white ml-2\" style={{ width: \"50px\", textAlign: \"center\" }}>{formatTime((video == null ? void 0 : video.duration) || 0)}</span>\n-    </div>}\n-    {\n-      /* Mute/Unmute Button */\n-    }\n-    <div\n-      onClick={handleMuteUnmute}\n-      className=\"w-10 h-10 md:w-12 md:h-12 cursor-pointer justify-center items-center gap-2.5 inline-flex hover:bg-opacity-40 transition-all duration-300 ease-in-out\"\n-    >{isMuted ? <VolumeX className=\"md:w-6 md:h-6 w-5 h-5 text-white z-20\" /> : <Volume2 className=\"md:w-6 md:h-6 w-5 h-5 text-white z-20\" />}</div>\n-    {isVR && supported && !(xrState == null ? void 0 : xrState.session) && <Button\n-      onClick={handleEnterVR}\n-      className=\"rounded-full p-6 text-zinc-900 bg-white hover:bg-white/75\"\n-    ><div className=\"text-sm font-semibold uppercase leading-tight tracking-wide\">Enter VR</div></Button>}\n-  </div></div>}</div></MaxWidthWrapper_default></div>;\n-};\n-var NewControls_default = Controls;\n+  )\n+}\n+var NewControls_default = Controls\n \n // src/components/360videoplayer/Rectangle.tsx\n-import { useRef as useRef3, useState as useState5, useEffect as useEffect4, Suspense } from \"react\";\n-import { useThree } from \"@react-three/fiber\";\n+import { useRef as useRef3, useState as useState5, useEffect as useEffect4, Suspense } from 'react'\n+import { useThree } from '@react-three/fiber'\n import {\n   Play as Play2,\n   Pause as Pause2,\n   Volume2 as Volume22,\n   VolumeX as VolumeX2,\n   ChevronLeft as ChevronLeft2,\n-  ChevronRight as ChevronRight2\n-} from \"@coconut-xr/lucide-koestlich\";\n-import { Container as Container4, RootContainer, Text as Text2 } from \"@coconut-xr/koestlich\";\n+  ChevronRight as ChevronRight2,\n+} from '@coconut-xr/lucide-koestlich'\n+import { Container as Container4, RootContainer, Text as Text2 } from '@coconut-xr/koestlich'\n \n // src/components/360videoplayer/Glass.tsx\n-import { Container } from \"@coconut-xr/koestlich\";\n-import { makeBorderMaterial } from \"@coconut-xr/xmaterials\";\n-import { MeshPhongMaterial } from \"three\";\n+import { Container } from '@coconut-xr/koestlich'\n+import { makeBorderMaterial } from '@coconut-xr/xmaterials'\n+import { MeshPhongMaterial } from 'three'\n var GlassMaterial = makeBorderMaterial(MeshPhongMaterial, {\n-  specular: \"#555\",\n-  shininess: 100\n-});\n+  specular: '#555',\n+  shininess: 100,\n+})\n function Glass(_a) {\n-  var _b = _a, { backgroundColor = 8947848 } = _b, props = __objRest(_b, [\"backgroundColor\"]);\n-  return <Container\n-    backgroundColor={backgroundColor}\n-    backgroundOpacity={0.8}\n-    borderColor={backgroundColor}\n-    border={4}\n-    borderOpacity={0.8}\n-    borderBend={0.3}\n-    material={GlassMaterial}\n-    {...props}\n-  />;\n+  var _b = _a,\n+    { backgroundColor = 8947848 } = _b,\n+    props = __objRest(_b, ['backgroundColor'])\n+  return (\n+    <Container\n+      backgroundColor={backgroundColor}\n+      backgroundOpacity={0.8}\n+      borderColor={backgroundColor}\n+      border={4}\n+      borderOpacity={0.8}\n+      borderBend={0.3}\n+      material={GlassMaterial}\n+      {...props}\n+    />\n+  )\n }\n-var Glass_default = Glass;\n+var Glass_default = Glass\n \n // src/components/360videoplayer/IconButton.tsx\n-import { Container as Container2 } from \"@coconut-xr/koestlich\";\n-import { useState as useState3 } from \"react\";\n+import { Container as Container2 } from '@coconut-xr/koestlich'\n+import { useState as useState3 } from 'react'\n function IconButton(_a) {\n-  var _b = _a, { active, size = \"medium\" } = _b, props = __objRest(_b, [\"active\", \"size\"]);\n-  const [hoverCount, setHoverCount] = useState3(0);\n-  const radius = { small: 20, medium: 24, large: 28 }[size];\n-  return <Container2\n-    height={2 * radius}\n-    width={2 * radius}\n-    borderRadius={radius}\n-    justifyContent=\"center\"\n-    alignItems=\"center\"\n-    backgroundColor=\"white\"\n-    backgroundOpacity={active ? 0.2 : hoverCount > 0 ? 0.1 : 0}\n-    onPointerEnter={() => {\n-    }}\n-    onPointerLeave={() => {\n-    }}\n-    {...props}\n-  />;\n+  var _b = _a,\n+    { active, size = 'medium' } = _b,\n+    props = __objRest(_b, ['active', 'size'])\n+  const [hoverCount, setHoverCount] = useState3(0)\n+  const radius = { small: 20, medium: 24, large: 28 }[size]\n+  return (\n+    <Container2\n+      height={2 * radius}\n+      width={2 * radius}\n+      borderRadius={radius}\n+      justifyContent=\"center\"\n+      alignItems=\"center\"\n+      backgroundColor=\"white\"\n+      backgroundOpacity={active ? 0.2 : hoverCount > 0 ? 0.1 : 0}\n+      onPointerEnter={() => {}}\n+      onPointerLeave={() => {}}\n+      {...props}\n+    />\n+  )\n }\n-var IconButton_default = IconButton;\n+var IconButton_default = IconButton\n \n // src/components/360videoplayer/RangeBar.tsx\n-import { Slider } from \"@coconut-xr/apfel-kruemel\";\n-import { Container as Container3 } from \"@coconut-xr/koestlich\";\n-import { Text } from \"@coconut-xr/koestlich\";\n-import { useEffect as useEffect3, useState as useState4 } from \"react\";\n+import { Slider } from '@coconut-xr/apfel-kruemel'\n+import { Container as Container3 } from '@coconut-xr/koestlich'\n+import { Text } from '@coconut-xr/koestlich'\n+import { useEffect as useEffect3, useState as useState4 } from 'react'\n var Seekbar = ({ video, onClick }) => {\n-  const [currentTime, setCurrentTime] = useState4(0);\n-  const [duration, setDuration] = useState4(video.duration);\n+  const [currentTime, setCurrentTime] = useState4(0)\n+  const [duration, setDuration] = useState4(video.duration)\n   useEffect3(() => {\n-    console.log(\"Video Changing Duration\");\n-    const handleTimeUpdate = () => setCurrentTime((video == null ? void 0 : video.currentTime) || 0);\n-    video.addEventListener(\"timeupdate\", handleTimeUpdate);\n+    console.log('Video Changing Duration')\n+    const handleTimeUpdate = () => setCurrentTime((video == null ? void 0 : video.currentTime) || 0)\n+    video.addEventListener('timeupdate', handleTimeUpdate)\n     if (video.readyState >= 1) {\n-      setDuration((video == null ? void 0 : video.duration) || 0);\n-      setCurrentTime((video == null ? void 0 : video.currentTime) || 0);\n+      setDuration((video == null ? void 0 : video.duration) || 0)\n+      setCurrentTime((video == null ? void 0 : video.currentTime) || 0)\n     }\n     return () => {\n-      video.removeEventListener(\"timeupdate\", handleTimeUpdate);\n-    };\n-  }, [video]);\n+      video.removeEventListener('timeupdate', handleTimeUpdate)\n+    }\n+  }, [video])\n   const formatTime = (time) => {\n-    const minutes = Math.floor(time / 60);\n-    const seconds = Math.floor(time % 60);\n-    return `${minutes}:${seconds < 10 ? \"0\" : \"\"}${seconds}`;\n-  };\n+    const minutes = Math.floor(time / 60)\n+    const seconds = Math.floor(time % 60)\n+    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`\n+  }\n   const updateProgress = (value) => {\n-    const newTime = value / 100 * video.duration;\n+    const newTime = (value / 100) * video.duration\n     if (video.readyState >= 2) {\n-      video.currentTime = newTime;\n+      video.currentTime = newTime\n     } else {\n       const seekListener = () => {\n-        video.currentTime = newTime;\n-        video.removeEventListener(\"canplay\", seekListener);\n-      };\n-      video.addEventListener(\"canplay\", seekListener);\n+        video.currentTime = newTime\n+        video.removeEventListener('canplay', seekListener)\n+      }\n+      video.addEventListener('canplay', seekListener)\n     }\n-  };\n-  const progressValue = duration > 0 ? currentTime / duration : 0;\n-  const width = Math.max(100, duration * 10);\n-  return <Container3 width={200} height={40} flexDirection=\"row\" alignItems=\"center\"><Container3 flexDirection=\"row\" justifyContent=\"space-between\" alignItems=\"center\" width=\"100%\">\n-    <Text color=\"white\">{formatTime(currentTime)}</Text>\n-    <Container3\n-      width={100}\n-      height={40}\n-      flexDirection=\"row\"\n-      alignItems=\"center\"\n-      onPointerEnter={() => {\n-      }}\n-      onPointerLeave={() => {\n-      }}\n-    ><Slider size=\"xs\" width={100} minWidth={0} range={100} maxWidth={100} onValueChange={updateProgress} value={progressValue * 100} /></Container3>\n-    <Text color=\"white\">{formatTime(duration)}</Text>\n-  </Container3></Container3>;\n-};\n-var RangeBar_default = Seekbar;\n+  }\n+  const progressValue = duration > 0 ? currentTime / duration : 0\n+  const width = Math.max(100, duration * 10)\n+  return (\n+    <Container3 width={200} height={40} flexDirection=\"row\" alignItems=\"center\">\n+      <Container3 flexDirection=\"row\" justifyContent=\"space-between\" alignItems=\"center\" width=\"100%\">\n+        <Text color=\"white\">{formatTime(currentTime)}</Text>\n+        <Container3 width={100} height={40} flexDirection=\"row\" alignItems=\"center\" onPointerEnter={() => {}} onPointerLeave={() => {}}>\n+          <Slider size=\"xs\" width={100} minWidth={0} range={100} maxWidth={100} onValueChange={updateProgress} value={progressValue * 100} />\n+        </Container3>\n+        <Text color=\"white\">{formatTime(duration)}</Text>\n+      </Container3>\n+    </Container3>\n+  )\n+}\n+var RangeBar_default = Seekbar\n \n // src/components/360videoplayer/Rectangle.tsx\n-import { useXR as useXR2 } from \"@coconut-xr/natuerlich/react\";\n-import * as THREE from \"three\";\n-var StickyRectangle = ({\n-  moments,\n-  isSingle,\n-  video,\n-  videoRef,\n-  videoTexture,\n-  originalCameraState,\n-  controlsRefrence,\n-  handleNextClick,\n-  handlePrevClick,\n-  crm\n-}) => {\n-  var _a, _b, _c, _d;\n-  const controlRef = useRef3(null);\n-  let orbitControls = null;\n-  const { camera, size, scene, gl, controls } = useThree();\n-  const [isPaused, setPaused] = useState5(false);\n-  const [isMuted, setMuted] = useState5(true);\n-  const [currentTime, setCurrentTime] = useState5(0);\n-  const [currentPlaying, setCurrentPlaying] = useState5(0);\n-  let currentMedia = (_b = (_a = moments == null ? void 0 : moments.media) == null ? void 0 : _a[currentPlaying]) != null ? _b : moments == null ? void 0 : moments.media;\n+import { useXR as useXR2 } from '@coconut-xr/natuerlich/react'\n+import * as THREE from 'three'\n+var StickyRectangle = ({ moments, isSingle, video, videoRef, videoTexture, originalCameraState, controlsRefrence, handleNextClick, handlePrevClick, crm }) => {\n+  var _a, _b, _c, _d\n+  const controlRef = useRef3(null)\n+  let orbitControls = null\n+  const { camera, size, scene, gl, controls } = useThree()\n+  const [isPaused, setPaused] = useState5(false)\n+  const [isMuted, setMuted] = useState5(true)\n+  const [currentTime, setCurrentTime] = useState5(0)\n+  const [currentPlaying, setCurrentPlaying] = useState5(0)\n+  let currentMedia =\n+    (_b = (_a = moments == null ? void 0 : moments.media) == null ? void 0 : _a[currentPlaying]) != null ? _b : moments == null ? void 0 : moments.media\n   if (!((_c = moments == null ? void 0 : moments.media) == null ? void 0 : _c.length)) {\n-    currentMedia = crm;\n+    currentMedia = crm\n   }\n-  const aspectRatio = size.width / size.height;\n-  const xrState = useXR2.getState();\n-  const totalMedia = (_d = moments == null ? void 0 : moments.media) == null ? void 0 : _d.length;\n-  const [controlsVisible, setControlsVisible] = useState5(true);\n-  const [isInteracting, setIsInteracting] = useState5(false);\n-  const interactionTimeout = useRef3(null);\n-  const videoElementRef = useRef3(null);\n+  const aspectRatio = size.width / size.height\n+  const xrState = useXR2.getState()\n+  const totalMedia = (_d = moments == null ? void 0 : moments.media) == null ? void 0 : _d.length\n+  const [controlsVisible, setControlsVisible] = useState5(true)\n+  const [isInteracting, setIsInteracting] = useState5(false)\n+  const interactionTimeout = useRef3(null)\n+  const videoElementRef = useRef3(null)\n   useEffect4(() => {\n     if (video) {\n       if (isMuted !== video.muted) {\n-        video.muted = isMuted;\n+        video.muted = isMuted\n       }\n-      videoElementRef.current = video;\n+      videoElementRef.current = video\n       const updateCurrentTime = () => {\n-        setCurrentTime(video.currentTime);\n-      };\n-      video.addEventListener(\"timeupdate\", updateCurrentTime);\n+        setCurrentTime(video.currentTime)\n+      }\n+      video.addEventListener('timeupdate', updateCurrentTime)\n       return () => {\n-        video.removeEventListener(\"timeupdate\", updateCurrentTime);\n-      };\n+        video.removeEventListener('timeupdate', updateCurrentTime)\n+      }\n     }\n-  }, [video]);\n+  }, [video])\n   useEffect4(() => {\n     interactionTimeout.current = setTimeout(() => {\n-      setControlsVisible(false);\n-    }, 2e3);\n+      setControlsVisible(false)\n+    }, 2e3)\n     return () => {\n-      if (interactionTimeout.current)\n-        clearTimeout(interactionTimeout.current);\n-    };\n-  }, []);\n+      if (interactionTimeout.current) clearTimeout(interactionTimeout.current)\n+    }\n+  }, [])\n   const handleInteraction = () => {\n-    setControlsVisible(true);\n-    if (interactionTimeout.current)\n-      clearTimeout(interactionTimeout.current);\n+    setControlsVisible(true)\n+    if (interactionTimeout.current) clearTimeout(interactionTimeout.current)\n     interactionTimeout.current = setTimeout(() => {\n-      setControlsVisible(false);\n-    }, 2e3);\n-  };\n+      setControlsVisible(false)\n+    }, 2e3)\n+  }\n   const handleControlInteraction = () => {\n-    setIsInteracting(true);\n-    handleInteraction();\n-  };\n+    setIsInteracting(true)\n+    handleInteraction()\n+  }\n   const handleMouseUp = () => {\n-    setIsInteracting(false);\n-    handleInteraction();\n-  };\n+    setIsInteracting(false)\n+    handleInteraction()\n+  }\n   useEffect4(() => {\n-    var _a2;\n-    window.addEventListener(\"mousemove\", handleInteraction);\n-    window.addEventListener(\"keydown\", handleInteraction);\n-    (_a2 = xrState.session) == null ? void 0 : _a2.addEventListener(\"select\", handleInteraction);\n+    var _a2\n+    window.addEventListener('mousemove', handleInteraction)\n+    window.addEventListener('keydown', handleInteraction)\n+    ;(_a2 = xrState.session) == null ? void 0 : _a2.addEventListener('select', handleInteraction)\n     return () => {\n-      var _a3;\n-      window.removeEventListener(\"mousemove\", handleInteraction);\n-      window.removeEventListener(\"keydown\", handleInteraction);\n-      (_a3 = xrState.session) == null ? void 0 : _a3.removeEventListener(\"select\", handleInteraction);\n-    };\n-  }, [xrState]);\n-  const src = video.src;\n-  const type = src.startsWith(\"blob\") ? \"video\" : \"photo\";\n+      var _a3\n+      window.removeEventListener('mousemove', handleInteraction)\n+      window.removeEventListener('keydown', handleInteraction)\n+      ;(_a3 = xrState.session) == null ? void 0 : _a3.removeEventListener('select', handleInteraction)\n+    }\n+  }, [xrState])\n+  const src = video.src\n+  const type = src.startsWith('blob') ? 'video' : 'photo'\n   const handlePausePlay = () => {\n     if (videoElementRef.current) {\n-      if (currentMedia.type === \"video\") {\n+      if (currentMedia.type === 'video') {\n         if (videoElementRef.current.paused) {\n-          videoElementRef.current.play();\n-          setPaused(false);\n+          videoElementRef.current.play()\n+          setPaused(false)\n         } else {\n-          videoElementRef.current.pause();\n-          setPaused(true);\n+          videoElementRef.current.pause()\n+          setPaused(true)\n         }\n       } else {\n-        setPaused(!isPaused);\n+        setPaused(!isPaused)\n       }\n     }\n-  };\n+  }\n   const handleMuteUnmute = () => {\n     if (videoElementRef.current) {\n-      videoElementRef.current.muted = !videoElementRef.current.muted;\n-      setMuted(videoElementRef.current.muted);\n+      videoElementRef.current.muted = !videoElementRef.current.muted\n+      setMuted(videoElementRef.current.muted)\n     }\n-  };\n+  }\n   const exitVr = () => {\n     if (xrState.session) {\n-      xrState.session.end().then(() => {\n-        console.log(\"VR session ended.\");\n-        gl.xr.enabled = false;\n-        gl.setAnimationLoop(null);\n-        if (gl.xr.getSession()) {\n-          gl.xr.setSession(null);\n-        }\n-        if (camera instanceof THREE.PerspectiveCamera) {\n-          camera.position.set(0, 0, 150);\n-          camera.lookAt(0, 0, 0);\n-          camera.rotation.set(0, 0, 0);\n-          camera.updateProjectionMatrix();\n-          console.log(\"Camera position after VR:\", camera.position);\n-          console.log(\"Camera looking at:\", camera.getWorldDirection(new THREE.Vector3()));\n-        }\n-        if (controlsRefrence.current) {\n-          console.log(\"Reusing existing controls\");\n-          controlsRefrence.current.enabled = true;\n-          controlsRefrence.current.target.set(-30, 0, 0);\n-          controlsRefrence.current.enablePan = true;\n-          controlsRefrence.current.minPolarAngle = Math.PI / 4;\n-          controlsRefrence.current.maxPolarAngle = Math.PI / 2;\n-          controlsRefrence.current.minDistance = 50;\n-          controlsRefrence.current.maxDistance = 300;\n-          controlsRefrence.current.update();\n-          console.log(\"Updated controls target to (-30, 0, 0)\");\n-        }\n-        const sphereGeometry = new THREE.SphereGeometry(100, 100, 100);\n-        const sphereMaterial = new THREE.MeshBasicMaterial({\n-          map: videoTexture,\n-          // Ensure video texture is used\n-          side: THREE.BackSide\n-          // Render inside the sphere\n-        });\n-        const sphereMesh = new THREE.Mesh(sphereGeometry, sphereMaterial);\n-        sphereMesh.scale.set(-1, 1, 1);\n-        sphereMesh.position.set(0, 0, 0);\n-        scene.clear();\n-        scene.add(sphereMesh);\n-        console.log(\"Sphere added to the scene with video texture.\");\n-        const renderLoop = () => {\n+      xrState.session\n+        .end()\n+        .then(() => {\n+          console.log('VR session ended.')\n+          gl.xr.enabled = false\n+          gl.setAnimationLoop(null)\n+          if (gl.xr.getSession()) {\n+            gl.xr.setSession(null)\n+          }\n+          if (camera instanceof THREE.PerspectiveCamera) {\n+            camera.position.set(0, 0, 150)\n+            camera.lookAt(0, 0, 0)\n+            camera.rotation.set(0, 0, 0)\n+            camera.updateProjectionMatrix()\n+            console.log('Camera position after VR:', camera.position)\n+            console.log('Camera looking at:', camera.getWorldDirection(new THREE.Vector3()))\n+          }\n           if (controlsRefrence.current) {\n-            controlsRefrence.current.update();\n+            console.log('Reusing existing controls')\n+            controlsRefrence.current.enabled = true\n+            controlsRefrence.current.target.set(-30, 0, 0)\n+            controlsRefrence.current.enablePan = true\n+            controlsRefrence.current.minPolarAngle = Math.PI / 4\n+            controlsRefrence.current.maxPolarAngle = Math.PI / 2\n+            controlsRefrence.current.minDistance = 50\n+            controlsRefrence.current.maxDistance = 300\n+            controlsRefrence.current.update()\n+            console.log('Updated controls target to (-30, 0, 0)')\n           }\n-          gl.render(scene, camera);\n-          requestAnimationFrame(renderLoop);\n-        };\n-        renderLoop();\n-      }).catch(console.error);\n+          const sphereGeometry = new THREE.SphereGeometry(100, 100, 100)\n+          const sphereMaterial = new THREE.MeshBasicMaterial({\n+            map: videoTexture,\n+            // Ensure video texture is used\n+            side: THREE.BackSide,\n+            // Render inside the sphere\n+          })\n+          const sphereMesh = new THREE.Mesh(sphereGeometry, sphereMaterial)\n+          sphereMesh.scale.set(-1, 1, 1)\n+          sphereMesh.position.set(0, 0, 0)\n+          scene.clear()\n+          scene.add(sphereMesh)\n+          console.log('Sphere added to the scene with video texture.')\n+          const renderLoop = () => {\n+            if (controlsRefrence.current) {\n+              controlsRefrence.current.update()\n+            }\n+            gl.render(scene, camera)\n+            requestAnimationFrame(renderLoop)\n+          }\n+          renderLoop()\n+        })\n+        .catch(console.error)\n     }\n-  };\n-  return <mesh ref={controlRef} position={[0, 2, -6]}>{controlsVisible && <group\n-    position={[0, 1.5, -0.4]}\n-    scale={Math.min(1, aspectRatio * 20) / 1200 * 20}\n-  ><Suspense><RootContainer\n-    anchorX=\"center\"\n-    anchorY=\"center\"\n-    sizeX={1200}\n-    sizeY={700}\n-    pixelSize={1}\n-    positionType=\"relative\"\n-    display=\"flex\"\n-    flexDirection=\"row\"\n-    alignItems=\"stretch\"\n-  ><Container4\n-    positionType=\"absolute\"\n-    positionLeft={0}\n-    positionRight={0}\n-    positionBottom={-90}\n-    flexDirection=\"row\"\n-    justifyContent=\"center\"\n-  ><Glass_default\n-    borderRadius={32}\n-    padding={8}\n-    gapColumn={8}\n-    flexDirection=\"row\"\n-  >\n-    {!isSingle && <IconButton_default onClick={handlePrevClick}><ChevronLeft2\n-      height={16}\n-      width={16}\n-      color=\"white\"\n-      depth={0}\n-    /></IconButton_default>}\n-    <IconButton_default onClick={handlePausePlay}>{isPaused ? <Play2 height={16} width={16} color=\"white\" depth={0} /> : <Pause2 height={16} width={16} color=\"white\" depth={0} />}</IconButton_default>\n-    {!isSingle && <IconButton_default onClick={handleNextClick}><ChevronRight2\n-      height={16}\n-      width={16}\n-      color=\"white\"\n-      depth={0}\n-    /></IconButton_default>}\n-    {type === \"video\" && <Container4\n-      flexDirection=\"row\"\n-      justifyContent=\"center\"\n-      alignItems=\"center\"\n-    ><RangeBar_default video={video} /></Container4>}\n-    <IconButton_default onClick={handleMuteUnmute}>{isMuted ? <VolumeX2 height={16} width={16} color=\"white\" depth={0} /> : <Volume22 height={16} width={16} color=\"white\" depth={0} />}</IconButton_default>\n-    <Container4\n-      width={150}\n-      height={48}\n-      borderRadius={50}\n-      backgroundColor=\"white\"\n-      backgroundOpacity={0.8}\n-      flexDirection=\"row\"\n-      gapColumn={8}\n-      padding={6}\n-      onClick={() => exitVr()}\n-    ><Container4\n-      flexDirection=\"column\"\n-      justifyContent=\"center\"\n-      alignItems=\"center\"\n-      width=\"100%\"\n-      flexGrow={1}\n-    ><Text2 color=\"black\">Exit VR</Text2></Container4></Container4>\n-  </Glass_default></Container4></RootContainer></Suspense></group>}</mesh>;\n-};\n-var Rectangle_default = StickyRectangle;\n+  }\n+  return (\n+    <mesh ref={controlRef} position={[0, 2, -6]}>\n+      {controlsVisible && (\n+        <group position={[0, 1.5, -0.4]} scale={(Math.min(1, aspectRatio * 20) / 1200) * 20}>\n+          <Suspense>\n+            <RootContainer\n+              anchorX=\"center\"\n+              anchorY=\"center\"\n+              sizeX={1200}\n+              sizeY={700}\n+              pixelSize={1}\n+              positionType=\"relative\"\n+              display=\"flex\"\n+              flexDirection=\"row\"\n+              alignItems=\"stretch\"\n+            >\n+              <Container4 positionType=\"absolute\" positionLeft={0} positionRight={0} positionBottom={-90} flexDirection=\"row\" justifyContent=\"center\">\n+                <Glass_default borderRadius={32} padding={8} gapColumn={8} flexDirection=\"row\">\n+                  {!isSingle && (\n+                    <IconButton_default onClick={handlePrevClick}>\n+                      <ChevronLeft2 height={16} width={16} color=\"white\" depth={0} />\n+                    </IconButton_default>\n+                  )}\n+                  <IconButton_default onClick={handlePausePlay}>\n+                    {isPaused ? <Play2 height={16} width={16} color=\"white\" depth={0} /> : <Pause2 height={16} width={16} color=\"white\" depth={0} />}\n+                  </IconButton_default>\n+                  {!isSingle && (\n+                    <IconButton_default onClick={handleNextClick}>\n+                      <ChevronRight2 height={16} width={16} color=\"white\" depth={0} />\n+                    </IconButton_default>\n+                  )}\n+                  {type === 'video' && (\n+                    <Container4 flexDirection=\"row\" justifyContent=\"center\" alignItems=\"center\">\n+                      <RangeBar_default video={video} />\n+                    </Container4>\n+                  )}\n+                  <IconButton_default onClick={handleMuteUnmute}>\n+                    {isMuted ? <VolumeX2 height={16} width={16} color=\"white\" depth={0} /> : <Volume22 height={16} width={16} color=\"white\" depth={0} />}\n+                  </IconButton_default>\n+                  <Container4\n+                    width={150}\n+                    height={48}\n+                    borderRadius={50}\n+                    backgroundColor=\"white\"\n+                    backgroundOpacity={0.8}\n+                    flexDirection=\"row\"\n+                    gapColumn={8}\n+                    padding={6}\n+                    onClick={() => exitVr()}\n+                  >\n+                    <Container4 flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\" width=\"100%\" flexGrow={1}>\n+                      <Text2 color=\"black\">Exit VR</Text2>\n+                    </Container4>\n+                  </Container4>\n+                </Glass_default>\n+              </Container4>\n+            </RootContainer>\n+          </Suspense>\n+        </group>\n+      )}\n+    </mesh>\n+  )\n+}\n+var Rectangle_default = StickyRectangle\n \n // src/hooks/useNetworkQuality.tsx\n-import { useState as useState6, useEffect as useEffect5 } from \"react\";\n+import { useState as useState6, useEffect as useEffect5 } from 'react'\n var useNetworkQuality = () => {\n-  const [networkQuality, setNetworkQuality] = useState6(\"unknown\");\n-  const calculateDownloadSpeed = () => __async(void 0, null, function* () {\n-    const testFileUrl = \"https://d2ouax3dvpqfld.cloudfront.net/Empty_Red_Lacquer_Room_4d4d0c2a2b.jpeg\";\n-    const startTime = (/* @__PURE__ */ new Date()).getTime();\n-    try {\n-      const response = yield fetch(testFileUrl);\n-      const blob = yield response.blob();\n-      const endTime = (/* @__PURE__ */ new Date()).getTime();\n-      const durationInSeconds = (endTime - startTime) / 1e3;\n-      const fileSizeInBits = blob.size * 8;\n-      const speedInKbps = fileSizeInBits / durationInSeconds / 1024;\n-      console.log(`Download Speed: ${speedInKbps.toFixed(2)} Kbps`);\n-      if (speedInKbps >= 1e4) {\n-        return \"high\";\n-      } else if (speedInKbps >= 2e3) {\n-        return \"medium\";\n-      } else {\n-        return \"low\";\n+  const [networkQuality, setNetworkQuality] = useState6('unknown')\n+  const calculateDownloadSpeed = () =>\n+    __async(void 0, null, function* () {\n+      const testFileUrl = 'https://d2ouax3dvpqfld.cloudfront.net/Empty_Red_Lacquer_Room_4d4d0c2a2b.jpeg'\n+      const startTime = /* @__PURE__ */ new Date().getTime()\n+      try {\n+        const response = yield fetch(testFileUrl)\n+        const blob = yield response.blob()\n+        const endTime = /* @__PURE__ */ new Date().getTime()\n+        const durationInSeconds = (endTime - startTime) / 1e3\n+        const fileSizeInBits = blob.size * 8\n+        const speedInKbps = fileSizeInBits / durationInSeconds / 1024\n+        console.log(`Download Speed: ${speedInKbps.toFixed(2)} Kbps`)\n+        if (speedInKbps >= 1e4) {\n+          return 'high'\n+        } else if (speedInKbps >= 2e3) {\n+          return 'medium'\n+        } else {\n+          return 'low'\n+        }\n+      } catch (error) {\n+        console.error('Error while measuring download speed:', error)\n+        return 'medium'\n       }\n-    } catch (error) {\n-      console.error(\"Error while measuring download speed:\", error);\n-      return \"medium\";\n-    }\n-  });\n-  const getNetworkQuality = () => __async(void 0, null, function* () {\n-    if (\"connection\" in navigator) {\n-      const { downlink } = navigator.connection;\n-      console.log(\"Network Information API detected:\", navigator.connection);\n-      if (downlink >= 10) {\n-        return \"high\";\n-      } else if (downlink >= 2) {\n-        return \"medium\";\n+    })\n+  const getNetworkQuality = () =>\n+    __async(void 0, null, function* () {\n+      if ('connection' in navigator) {\n+        const { downlink } = navigator.connection\n+        console.log('Network Information API detected:', navigator.connection)\n+        if (downlink >= 10) {\n+          return 'high'\n+        } else if (downlink >= 2) {\n+          return 'medium'\n+        } else {\n+          return 'low'\n+        }\n       } else {\n-        return \"low\";\n+        return yield calculateDownloadSpeed()\n       }\n-    } else {\n-      return yield calculateDownloadSpeed();\n-    }\n-  });\n+    })\n   useEffect5(() => {\n-    const updateNetworkQuality = () => __async(void 0, null, function* () {\n-      const quality = yield getNetworkQuality();\n-      setNetworkQuality(quality);\n-    });\n-    updateNetworkQuality();\n+    const updateNetworkQuality = () =>\n+      __async(void 0, null, function* () {\n+        const quality = yield getNetworkQuality()\n+        setNetworkQuality(quality)\n+      })\n+    updateNetworkQuality()\n     if (navigator.connection) {\n-      navigator.connection.addEventListener(\"change\", updateNetworkQuality);\n+      navigator.connection.addEventListener('change', updateNetworkQuality)\n     }\n     return () => {\n       if (navigator.connection) {\n-        navigator.connection.removeEventListener(\"change\", updateNetworkQuality);\n+        navigator.connection.removeEventListener('change', updateNetworkQuality)\n       }\n-    };\n-  }, []);\n-  return networkQuality;\n-};\n-var useNetworkQuality_default = useNetworkQuality;\n+    }\n+  }, [])\n+  return networkQuality\n+}\n+var useNetworkQuality_default = useNetworkQuality\n \n // src/components/ui/progress.tsx\n-import * as React5 from \"react\";\n-import * as ProgressPrimitive from \"@radix-ui/react-progress\";\n+import * as React5 from 'react'\n+import * as ProgressPrimitive from '@radix-ui/react-progress'\n var Progress = React5.forwardRef((_a, ref) => {\n-  var _b = _a, { className, value } = _b, props = __objRest(_b, [\"className\", \"value\"]);\n-  return <ProgressPrimitive.Root\n-    ref={ref}\n-    className={cn(\n-      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n-      className\n-    )}\n-    {...props}\n-  ><ProgressPrimitive.Indicator\n-    className=\"h-full w-full flex-1 bg-white transition-all\"\n-    style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n-  /></ProgressPrimitive.Root>;\n-});\n-Progress.displayName = ProgressPrimitive.Root.displayName;\n+  var _b = _a,\n+    { className, value } = _b,\n+    props = __objRest(_b, ['className', 'value'])\n+  return (\n+    <ProgressPrimitive.Root ref={ref} className={cn('relative h-4 w-full overflow-hidden rounded-full bg-secondary', className)} {...props}>\n+      <ProgressPrimitive.Indicator className=\"h-full w-full flex-1 bg-white transition-all\" style={{ transform: `translateX(-${100 - (value || 0)}%)` }} />\n+    </ProgressPrimitive.Root>\n+  )\n+})\n+Progress.displayName = ProgressPrimitive.Root.displayName\n \n // src/components/player/StandAlonePlayer.tsx\n-var Player = ({\n-  mediaType,\n-  mediaId,\n-  viewMedia,\n-  moments,\n-  isXR,\n-  isSingle,\n-  viewOnly,\n-  standAloneVideoUrl\n-}) => {\n-  var _a, _b;\n-  const [imageProgress, setImageProgress] = useState7(0);\n-  const [isImageReady, setImageReady] = useState7(false);\n-  const [currentPlaying, setCurrentPlaying] = useState7(0);\n-  const currentMedia = (standAloneVideoUrl == null ? void 0 : standAloneVideoUrl.src) ? {\n-    src: standAloneVideoUrl.src,\n-    type: standAloneVideoUrl == null ? void 0 : standAloneVideoUrl.type,\n-    xr: standAloneVideoUrl == null ? void 0 : standAloneVideoUrl.xr\n-  } : viewMedia || ((_a = moments == null ? void 0 : moments.media) == null ? void 0 : _a[currentPlaying]);\n-  console.log(\"current media is\");\n-  console.log(currentMedia);\n-  const networkQuality = useNetworkQuality_default();\n-  const orbitControlsRefrence = useRef4(null);\n+var Player = ({ mediaType, mediaId, viewMedia, moments, isXR, isSingle, viewOnly, standAloneVideoUrl }) => {\n+  var _a, _b\n+  const [imageProgress, setImageProgress] = useState7(0)\n+  const [isImageReady, setImageReady] = useState7(false)\n+  const [currentPlaying, setCurrentPlaying] = useState7(0)\n+  const currentMedia = (standAloneVideoUrl == null ? void 0 : standAloneVideoUrl.src)\n+    ? {\n+        src: standAloneVideoUrl.src,\n+        type: standAloneVideoUrl == null ? void 0 : standAloneVideoUrl.type,\n+        xr: standAloneVideoUrl == null ? void 0 : standAloneVideoUrl.xr,\n+      }\n+    : viewMedia || ((_a = moments == null ? void 0 : moments.media) == null ? void 0 : _a[currentPlaying])\n+  console.log('current media is')\n+  console.log(currentMedia)\n+  const networkQuality = useNetworkQuality_default()\n+  const orbitControlsRefrence = useRef4(null)\n   const xrSrc = useMemo(() => {\n     if (viewMedia) {\n-      let src = (currentMedia == null ? void 0 : currentMedia.type) === \"photo\" ? currentMedia == null ? void 0 : currentMedia.srcArray[0][\"original\"] : currentMedia == null ? void 0 : currentMedia.src;\n-      return src == null ? void 0 : src.replace(/:$/, \"\");\n-    } else if ((moments == null ? void 0 : moments.media.length) > 0 && currentMedia.type === \"photo\") {\n-      const availableKeys = Object.keys((currentMedia == null ? void 0 : currentMedia.srcArray[0]) || {});\n-      if (networkQuality === \"high\") {\n-        return availableKeys.includes(\"large\") ? currentMedia == null ? void 0 : currentMedia.srcArray[0][\"large\"] : currentMedia == null ? void 0 : currentMedia.srcArray[0][\"original\"];\n+      let src =\n+        (currentMedia == null ? void 0 : currentMedia.type) === 'photo'\n+          ? currentMedia == null\n+            ? void 0\n+            : currentMedia.srcArray[0]['original']\n+          : currentMedia == null\n+          ? void 0\n+          : currentMedia.src\n+      return src == null ? void 0 : src.replace(/:$/, '')\n+    } else if ((moments == null ? void 0 : moments.media.length) > 0 && currentMedia.type === 'photo') {\n+      const availableKeys = Object.keys((currentMedia == null ? void 0 : currentMedia.srcArray[0]) || {})\n+      if (networkQuality === 'high') {\n+        return availableKeys.includes('large')\n+          ? currentMedia == null\n+            ? void 0\n+            : currentMedia.srcArray[0]['large']\n+          : currentMedia == null\n+          ? void 0\n+          : currentMedia.srcArray[0]['original']\n       }\n-      if (networkQuality === \"medium\") {\n-        return availableKeys.includes(\"medium\") ? currentMedia == null ? void 0 : currentMedia.srcArray[0][\"medium\"] : currentMedia == null ? void 0 : currentMedia.srcArray[0][\"original\"];\n+      if (networkQuality === 'medium') {\n+        return availableKeys.includes('medium')\n+          ? currentMedia == null\n+            ? void 0\n+            : currentMedia.srcArray[0]['medium']\n+          : currentMedia == null\n+          ? void 0\n+          : currentMedia.srcArray[0]['original']\n       }\n-      if (networkQuality === \"low\") {\n-        return availableKeys.includes(\"small\") ? currentMedia == null ? void 0 : currentMedia.srcArray[0][\"small\"] : currentMedia == null ? void 0 : currentMedia.srcArray[0][\"original\"];\n+      if (networkQuality === 'low') {\n+        return availableKeys.includes('small')\n+          ? currentMedia == null\n+            ? void 0\n+            : currentMedia.srcArray[0]['small']\n+          : currentMedia == null\n+          ? void 0\n+          : currentMedia.srcArray[0]['original']\n       }\n-      return currentMedia == null ? void 0 : currentMedia.srcArray[0][\"original\"];\n+      return currentMedia == null ? void 0 : currentMedia.srcArray[0]['original']\n     }\n-    return currentMedia == null ? void 0 : currentMedia.src;\n-  }, [currentMedia, networkQuality, viewMedia]);\n-  const isHLS = (xrSrc == null ? void 0 : xrSrc.endsWith(\".m3u8\")) || (xrSrc == null ? void 0 : xrSrc.includes(\".m3u8?token=\")) || (xrSrc == null ? void 0 : xrSrc.includes(\".m3u8\"));\n-  const inputSources = useInputSources();\n-  const videoTexture = useRef4();\n-  const [isVideoReady, setVideoReady] = useState7(false);\n-  const [isTimerPaused, setTimerPaused] = useState7(false);\n-  const [timer, setTimer] = useState7(null);\n-  const [isBuffering, setIsBuffering] = useState7(false);\n-  const [showShareModal, setShowShareModal] = useState7(false);\n-  const videoElement = useRef4(null);\n-  const xrState = useXR3.getState();\n-  const videoRef = useRef4();\n-  const pathname = usePathname();\n-  const [progress, setProgress] = useState7(0);\n+    return currentMedia == null ? void 0 : currentMedia.src\n+  }, [currentMedia, networkQuality, viewMedia])\n+  const isHLS =\n+    (xrSrc == null ? void 0 : xrSrc.endsWith('.m3u8')) ||\n+    (xrSrc == null ? void 0 : xrSrc.includes('.m3u8?token=')) ||\n+    (xrSrc == null ? void 0 : xrSrc.includes('.m3u8'))\n+  const inputSources = useInputSources()\n+  const videoTexture = useRef4()\n+  const [isVideoReady, setVideoReady] = useState7(false)\n+  const [isTimerPaused, setTimerPaused] = useState7(false)\n+  const [timer, setTimer] = useState7(null)\n+  const [isBuffering, setIsBuffering] = useState7(false)\n+  const [showShareModal, setShowShareModal] = useState7(false)\n+  const videoElement = useRef4(null)\n+  const xrState = useXR3.getState()\n+  const videoRef = useRef4()\n+  const pathname = usePathname()\n+  const [progress, setProgress] = useState7(0)\n   const originalCameraState = useRef4({\n     position: new Vector32(),\n     rotation: new Euler(),\n     fov: 50,\n     // default fov value\n-    projectionMatrix: new Matrix4()\n-  });\n+    projectionMatrix: new Matrix4(),\n+  })\n   const MyCameraComponent = ({ sphereRef }) => {\n-    const { gl, camera } = useThree2();\n-    const xrState2 = useXR3.getState();\n+    const { gl, camera } = useThree2()\n+    const xrState2 = useXR3.getState()\n     useFrame(() => {\n       if (xrState2.session && sphereRef.current) {\n-        const xrCamera = gl.xr.getCamera();\n-        console.log(\"Camera in VR: \", xrCamera);\n-        const initialRotation = new Euler(0, 11, 0);\n-        sphereRef.current.rotation.copy(initialRotation);\n+        const xrCamera = gl.xr.getCamera()\n+        console.log('Camera in VR: ', xrCamera)\n+        const initialRotation = new Euler(0, 11, 0)\n+        sphereRef.current.rotation.copy(initialRotation)\n       }\n-    });\n-    return null;\n-  };\n+    })\n+    return null\n+  }\n   useEffect6(() => {\n-    const currentVideoTexture = videoTexture.current;\n-    let currentVideoRef = videoRef.current;\n+    const currentVideoTexture = videoTexture.current\n+    let currentVideoRef = videoRef.current\n     return () => {\n       if (currentVideoTexture) {\n-        currentVideoTexture.dispose();\n+        currentVideoTexture.dispose()\n       }\n       if (currentVideoRef) {\n-        currentVideoRef = null;\n+        currentVideoRef = null\n       }\n-    };\n-  }, [pathname]);\n+    }\n+  }, [pathname])\n   useEffect6(() => {\n-    var _a2;\n-    const vid = document.createElement(\"video\");\n-    videoElement.current = vid;\n-    vid.src = xrSrc;\n-    vid.crossOrigin = \"Anonymous\";\n-    vid.loop = false;\n-    vid.muted = true;\n-    vid.autoPlay = true;\n-    vid.playsInline = true;\n-    vid.controls = false;\n-    setImageReady(true);\n+    var _a2\n+    const vid = document.createElement('video')\n+    videoElement.current = vid\n+    vid.src = xrSrc\n+    vid.crossOrigin = 'Anonymous'\n+    vid.loop = false\n+    vid.muted = true\n+    vid.autoPlay = true\n+    vid.playsInline = true\n+    vid.controls = false\n+    setImageReady(true)\n     if (isHLS) {\n       if (Hls.isSupported()) {\n-        const hls = new Hls();\n-        hls.loadSource(xrSrc);\n-        hls.attachMedia(vid);\n-        hls.on(Hls.Events.MANIFEST_PARSED, function() {\n+        const hls = new Hls()\n+        hls.loadSource(xrSrc)\n+        hls.attachMedia(vid)\n+        hls.on(Hls.Events.MANIFEST_PARSED, function () {\n           vid.play().then(() => {\n-            setVideoReady(true);\n-          });\n-        });\n-      } else if ((_a2 = videoElement.current) == null ? void 0 : _a2.canPlayType(\"application/vnd.apple.mpegurl\")) {\n-        videoElement.current.src = xrSrc;\n-        videoElement.current.play();\n+            setVideoReady(true)\n+          })\n+        })\n+      } else if ((_a2 = videoElement.current) == null ? void 0 : _a2.canPlayType('application/vnd.apple.mpegurl')) {\n+        videoElement.current.src = xrSrc\n+        videoElement.current.play()\n       }\n     } else {\n       if (videoElement.current) {\n-        videoElement.current.src = xrSrc;\n-        videoElement.current.play();\n+        videoElement.current.src = xrSrc\n+        videoElement.current.play()\n       }\n     }\n     if (videoTexture && videoElement.current) {\n-      videoTexture.current = new VideoTexture(videoElement.current);\n-      videoRef.current = vid;\n+      videoTexture.current = new VideoTexture(videoElement.current)\n+      videoRef.current = vid\n     }\n     return () => {\n-      vid.pause();\n-      vid.removeAttribute(\"src\");\n-      vid.load();\n+      vid.pause()\n+      vid.removeAttribute('src')\n+      vid.load()\n       if (videoTexture.current) {\n-        videoTexture.current.dispose();\n-        setVideoReady(false);\n+        videoTexture.current.dispose()\n+        setVideoReady(false)\n       }\n-    };\n-  }, [currentPlaying, xrSrc]);\n+    }\n+  }, [currentPlaying, xrSrc])\n   useEffect6(() => {\n     return () => {\n-      clearInterval(timer);\n-      setImageProgress(0);\n-    };\n-  }, [timer]);\n+      clearInterval(timer)\n+      setImageProgress(0)\n+    }\n+  }, [timer])\n   useEffect6(() => {\n-    if ((currentMedia == null ? void 0 : currentMedia.type) === \"photo\" && isImageReady) {\n-      const interval = 50;\n-      let currentTime = 0;\n+    if ((currentMedia == null ? void 0 : currentMedia.type) === 'photo' && isImageReady) {\n+      const interval = 50\n+      let currentTime = 0\n       const newTimer = setInterval(() => {\n-        var _a2;\n+        var _a2\n         if (!isTimerPaused) {\n-          currentTime += interval / 1e3;\n-          const newProgress = currentTime / 5 * 100;\n-          setImageProgress(newProgress);\n+          currentTime += interval / 1e3\n+          const newProgress = (currentTime / 5) * 100\n+          setImageProgress(newProgress)\n           if (newProgress >= 100) {\n-            clearInterval(newTimer);\n+            clearInterval(newTimer)\n             if (currentPlaying + 1 < ((_a2 = moments == null ? void 0 : moments.media) == null ? void 0 : _a2.length)) {\n-              setImageProgress(0);\n-              setCurrentPlaying(currentPlaying + 1);\n+              setImageProgress(0)\n+              setCurrentPlaying(currentPlaying + 1)\n             }\n           }\n         }\n-      }, interval);\n-      setTimer(newTimer);\n+      }, interval)\n+      setTimer(newTimer)\n       return () => {\n-        clearInterval(newTimer);\n-      };\n+        clearInterval(newTimer)\n+      }\n     }\n-  }, [xrSrc, currentMedia == null ? void 0 : currentMedia.type, isTimerPaused, isImageReady]);\n+  }, [xrSrc, currentMedia == null ? void 0 : currentMedia.type, isTimerPaused, isImageReady])\n   useEffect6(() => {\n-    var _a2;\n+    var _a2\n     const updateProgress = () => {\n-      var _a3, _b2, _c, _d, _e, _f, _g;\n-      if (currentMedia && currentMedia.type === \"video\") {\n-        setImageProgress(0);\n-        if (((_b2 = (_a3 = videoTexture.current) == null ? void 0 : _a3.image) == null ? void 0 : _b2.duration) && ((_d = (_c = videoTexture.current) == null ? void 0 : _c.image) == null ? void 0 : _d.currentTime) !== void 0) {\n-          const currentTime = videoTexture.current.image.currentTime;\n-          const duration = videoTexture.current.image.duration;\n-          const newProgress = currentTime / duration * 100;\n-          setProgress(newProgress);\n+      var _a3, _b2, _c, _d, _e, _f, _g\n+      if (currentMedia && currentMedia.type === 'video') {\n+        setImageProgress(0)\n+        if (\n+          ((_b2 = (_a3 = videoTexture.current) == null ? void 0 : _a3.image) == null ? void 0 : _b2.duration) &&\n+          ((_d = (_c = videoTexture.current) == null ? void 0 : _c.image) == null ? void 0 : _d.currentTime) !== void 0\n+        ) {\n+          const currentTime = videoTexture.current.image.currentTime\n+          const duration = videoTexture.current.image.duration\n+          const newProgress = (currentTime / duration) * 100\n+          setProgress(newProgress)\n           if (newProgress >= 97.9 && currentPlaying + 1 < ((_e = moments == null ? void 0 : moments.media) == null ? void 0 : _e.length)) {\n-            setProgress(0);\n-            setImageProgress(0);\n-            setCurrentPlaying(currentPlaying + 1);\n-          } else if (progress >= 97.9 && currentPlaying + 1 === ((_f = moments == null ? void 0 : moments.media) == null ? void 0 : _f.length) && xrState.session) {\n-            (_g = xrState.session) == null ? void 0 : _g.end().catch(console.error);\n+            setProgress(0)\n+            setImageProgress(0)\n+            setCurrentPlaying(currentPlaying + 1)\n+          } else if (\n+            progress >= 97.9 &&\n+            currentPlaying + 1 === ((_f = moments == null ? void 0 : moments.media) == null ? void 0 : _f.length) &&\n+            xrState.session\n+          ) {\n+            ;(_g = xrState.session) == null ? void 0 : _g.end().catch(console.error)\n           }\n         }\n       }\n-    };\n+    }\n     const handleLoadedMetadata = () => {\n-      updateProgress();\n-    };\n+      updateProgress()\n+    }\n     const handleTimeUpdate = () => {\n-      updateProgress();\n-    };\n+      updateProgress()\n+    }\n     if ((_a2 = videoTexture.current) == null ? void 0 : _a2.image) {\n-      videoTexture.current.image.addEventListener(\n-        \"loadedmetadata\",\n-        handleLoadedMetadata\n-      );\n-      videoTexture.current.image.addEventListener(\n-        \"timeupdate\",\n-        handleTimeUpdate\n-      );\n+      videoTexture.current.image.addEventListener('loadedmetadata', handleLoadedMetadata)\n+      videoTexture.current.image.addEventListener('timeupdate', handleTimeUpdate)\n       return () => {\n-        var _a3, _b2;\n-        (_a3 = videoTexture == null ? void 0 : videoTexture.current) == null ? void 0 : _a3.image.removeEventListener(\n-          \"loadedmetadata\",\n-          handleLoadedMetadata\n-        );\n-        (_b2 = videoTexture.current) == null ? void 0 : _b2.image.removeEventListener(\n-          \"timeupdate\",\n-          handleTimeUpdate\n-        );\n-      };\n+        var _a3, _b2\n+        ;(_a3 = videoTexture == null ? void 0 : videoTexture.current) == null ? void 0 : _a3.image.removeEventListener('loadedmetadata', handleLoadedMetadata)\n+        ;(_b2 = videoTexture.current) == null ? void 0 : _b2.image.removeEventListener('timeupdate', handleTimeUpdate)\n+      }\n     }\n-  }, [videoTexture, currentMedia == null ? void 0 : currentMedia.type]);\n+  }, [videoTexture, currentMedia == null ? void 0 : currentMedia.type])\n   const handleNextClick = () => {\n-    var _a2;\n+    var _a2\n     if (currentPlaying + 1 < ((_a2 = moments == null ? void 0 : moments.media) == null ? void 0 : _a2.length)) {\n-      setCurrentPlaying(currentPlaying + 1);\n+      setCurrentPlaying(currentPlaying + 1)\n     }\n-  };\n+  }\n   const handlePrevClick = () => {\n     if (currentPlaying > 0) {\n-      setCurrentPlaying(currentPlaying - 1);\n+      setCurrentPlaying(currentPlaying - 1)\n     }\n-  };\n+  }\n   const handlePointerDown = () => {\n-    var _a2;\n-    (_a2 = videoElement.current) == null ? void 0 : _a2.pause();\n-    setTimerPaused(true);\n-  };\n+    var _a2\n+    ;(_a2 = videoElement.current) == null ? void 0 : _a2.pause()\n+    setTimerPaused(true)\n+  }\n   const handlePointerUp = () => {\n-    var _a2;\n-    (_a2 = videoElement.current) == null ? void 0 : _a2.play();\n-    setTimerPaused(false);\n-  };\n+    var _a2\n+    ;(_a2 = videoElement.current) == null ? void 0 : _a2.play()\n+    setTimerPaused(false)\n+  }\n   return (\n     //@ts-ignore\n     <>\n       <SnackbarProvider preventDuplicate />\n       <div className=\"m-auto flex flex-col items-center justify-center h-auto\">\n-        {\n-          /* Ensure that momentName is not undefined */\n-        }\n-        {(moments == null ? void 0 : moments.momentName) && <div className=\"md:flex text-center text-black text-xl font-normal leading-snug\">{moments == null ? void 0 : moments.momentName}</div>}\n-        {!isSingle && ((_b = moments == null ? void 0 : moments.media) == null ? void 0 : _b.map((item, index) => <div className=\"flex flex-row gap-1 mt-4 bg-transparent\"><div key={index} className=\"bg-transparent\"><Progress\n-          color=\"blue\"\n-          value={index < currentPlaying ? 100 : index > currentPlaying ? 0 : (currentMedia == null ? void 0 : currentMedia.type) === \"photo\" ? imageProgress : progress}\n-          className=\"h-1 w-14 md:w-16 bg-black/10\"\n-        /></div></div>))}\n+        {/* Ensure that momentName is not undefined */}\n+        {(moments == null ? void 0 : moments.momentName) && (\n+          <div className=\"md:flex text-center text-black text-xl font-normal leading-snug\">{moments == null ? void 0 : moments.momentName}</div>\n+        )}\n+        {!isSingle &&\n+          ((_b = moments == null ? void 0 : moments.media) == null\n+            ? void 0\n+            : _b.map((item, index) => (\n+                <div className=\"flex flex-row gap-1 mt-4 bg-transparent\">\n+                  <div key={index} className=\"bg-transparent\">\n+                    <Progress\n+                      color=\"blue\"\n+                      value={\n+                        index < currentPlaying\n+                          ? 100\n+                          : index > currentPlaying\n+                          ? 0\n+                          : (currentMedia == null ? void 0 : currentMedia.type) === 'photo'\n+                          ? imageProgress\n+                          : progress\n+                      }\n+                      className=\"h-1 w-14 md:w-16 bg-black/10\"\n+                    />\n+                  </div>\n+                </div>\n+              )))}\n       </div>\n-      {(currentMedia == null ? void 0 : currentMedia.type) === \"photo\" && !isImageReady ? <div className=\"fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-50 \"><Loader2 className=\"animate-spin h-16 w-16 text-zinc-600\" /></div> : (currentMedia == null ? void 0 : currentMedia.type) === \"video\" && !isVideoReady && <div className=\"fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-50 \"><Loader2 className=\"animate-spin h-16 w-16 text-zinc-600\" /></div>}\n+      {(currentMedia == null ? void 0 : currentMedia.type) === 'photo' && !isImageReady ? (\n+        <div className=\"fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-50 \">\n+          <Loader2 className=\"animate-spin h-16 w-16 text-zinc-600\" />\n+        </div>\n+      ) : (\n+        (currentMedia == null ? void 0 : currentMedia.type) === 'video' &&\n+        !isVideoReady && (\n+          <div className=\"fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-50 \">\n+            <Loader2 className=\"animate-spin h-16 w-16 text-zinc-600\" />\n+          </div>\n+        )\n+      )}\n       <div className=\"\">\n-        {xrSrc && <XRCanvas\n-          style={{ width: \"100vw\", height: \"100vh\" }}\n-          events={clippingEvents}\n-          gl={{ antialias: true, localClippingEnabled: true }}\n-        >\n-          <>\n-            {\n-              /* device!='iPhone' && device!='iPad' ? (\n-              <OrbitControls enableRotate={true} target={[-30, 0, 0]} />) : null */\n-            }\n-            {!xrState.session && <OrbitControls enableRotate={true} target={[-30, 0, 0]} />}\n-            <ambientLight intensity={1} />\n-            <directionalLight castShadow position={[1, 2, 3]} intensity={2} />\n-            {inputSources.map((inputSource) => <PointerController\n-              id={getInputSourceId(inputSource)}\n-              key={getInputSourceId(inputSource)}\n-              inputSource={inputSource}\n-            />)}\n-            <pointLight position={[10, 10, 10]} />\n-            {(currentMedia == null ? void 0 : currentMedia.type) === \"video\" ? <Sphere2 args={[100, 100, 100]} scale-x={-1} ref={videoRef}>{isVideoReady && videoTexture.current && <><meshBasicMaterial\n-              map={videoTexture.current}\n-              toneMapped={false}\n-              side={BackSide3}\n-            /></>}</Sphere2> : <ImageMesh_default\n-              mediaId={mediaId}\n-              src={xrSrc}\n-              onPointerDown={handlePointerDown}\n-              onPointerUp={handlePointerUp}\n-              setImageReady={setImageReady}\n-              isXR={currentMedia == null ? void 0 : currentMedia.xr}\n-            />}\n-          </>\n-          {xrState.session && <Rectangle_default\n-            isSingle\n-            moments={[]}\n-            video={videoElement.current}\n-            videoRef={videoRef}\n-            videoTexture={videoTexture.current}\n-            originalCameraState={originalCameraState}\n-            controlsRefrence={orbitControlsRefrence}\n-            handleNextClick={handleNextClick}\n-            handlePrevClick={handlePrevClick}\n-            crm={currentMedia}\n-          />}\n-          <MyCameraComponent sphereRef={videoRef} />\n-        </XRCanvas>}\n+        {xrSrc && (\n+          <XRCanvas style={{ width: '100vw', height: '100vh' }} events={clippingEvents} gl={{ antialias: true, localClippingEnabled: true }}>\n+            <>\n+              {/* device!='iPhone' && device!='iPad' ? (\n+              <OrbitControls enableRotate={true} target={[-30, 0, 0]} />) : null */}\n+              {!xrState.session && <OrbitControls enableRotate={true} target={[-30, 0, 0]} />}\n+              <ambientLight intensity={1} />\n+              <directionalLight castShadow position={[1, 2, 3]} intensity={2} />\n+              {inputSources.map((inputSource) => (\n+                <PointerController id={getInputSourceId(inputSource)} key={getInputSourceId(inputSource)} inputSource={inputSource} />\n+              ))}\n+              <pointLight position={[10, 10, 10]} />\n+              {(currentMedia == null ? void 0 : currentMedia.type) === 'video' ? (\n+                <Sphere2 args={[100, 100, 100]} scale-x={-1} ref={videoRef}>\n+                  {isVideoReady && videoTexture.current && (\n+                    <>\n+                      <meshBasicMaterial map={videoTexture.current} toneMapped={false} side={BackSide3} />\n+                    </>\n+                  )}\n+                </Sphere2>\n+              ) : (\n+                <ImageMesh_default\n+                  mediaId={mediaId}\n+                  src={xrSrc}\n+                  onPointerDown={handlePointerDown}\n+                  onPointerUp={handlePointerUp}\n+                  setImageReady={setImageReady}\n+                  isXR={currentMedia == null ? void 0 : currentMedia.xr}\n+                />\n+              )}\n+            </>\n+            {xrState.session && (\n+              <Rectangle_default\n+                isSingle\n+                moments={[]}\n+                video={videoElement.current}\n+                videoRef={videoRef}\n+                videoTexture={videoTexture.current}\n+                originalCameraState={originalCameraState}\n+                controlsRefrence={orbitControlsRefrence}\n+                handleNextClick={handleNextClick}\n+                handlePrevClick={handlePrevClick}\n+                crm={currentMedia}\n+              />\n+            )}\n+            <MyCameraComponent sphereRef={videoRef} />\n+          </XRCanvas>\n+        )}\n         <NewControls_default\n           videoTexture={videoTexture}\n           video={videoElement.current}\n           moments={moments}\n@@ -3533,34 +4174,25 @@\n           crm={currentMedia}\n         />\n       </div>\n     </>\n-  );\n-};\n-var StandAlonePlayer_default = Player;\n+  )\n+}\n+var StandAlonePlayer_default = Player\n \n // src/index.tsx\n-var ImmersiveVideoPlayer = ({\n-  mediaType,\n-  mediaId,\n-  viewMedia,\n-  moments,\n-  isXR,\n-  isSingle,\n-  viewOnly,\n-  standAloneVideoUrl\n-}) => {\n-  return <StandAlonePlayer_default\n-    mediaType={mediaType}\n-    mediaId={mediaId}\n-    viewMedia={viewMedia}\n-    moments={moments}\n-    isXR={isXR}\n-    isSingle={isSingle}\n-    viewOnly={viewOnly}\n-    standAloneVideoUrl={standAloneVideoUrl}\n-  />;\n-};\n-var src_default = ImmersiveVideoPlayer;\n-export {\n-  src_default as default\n-};\n+var ImmersiveVideoPlayer = ({ mediaType, mediaId, viewMedia, moments, isXR, isSingle, viewOnly, standAloneVideoUrl }) => {\n+  return (\n+    <StandAlonePlayer_default\n+      mediaType={mediaType}\n+      mediaId={mediaId}\n+      viewMedia={viewMedia}\n+      moments={moments}\n+      isXR={isXR}\n+      isSingle={isSingle}\n+      viewOnly={viewOnly}\n+      standAloneVideoUrl={standAloneVideoUrl}\n+    />\n+  )\n+}\n+var src_default = ImmersiveVideoPlayer\n+export { src_default as default }\n"
                }
            ],
            "date": 1727947542753,
            "name": "Commit-0",
            "content": "\"use client\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\n\n// src/components/player/StandAlonePlayer.tsx\nimport { useEffect as useEffect6, useMemo, useRef as useRef4, useState as useState7 } from \"react\";\nimport { clippingEvents } from \"@coconut-xr/koestlich\";\nimport { getInputSourceId } from \"@coconut-xr/natuerlich\";\nimport { PointerController, XRCanvas } from \"@coconut-xr/natuerlich/defaults\";\nimport { useXR as useXR3 } from \"@coconut-xr/natuerlich/react\";\nimport Hls from \"hls.js\";\nimport { useInputSources } from \"@coconut-xr/natuerlich/react\";\n\n// src/components/360videoplayer/imageMesh.tsx\nimport { Sphere, useTexture } from \"@react-three/drei\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { BackSide } from \"three\";\nvar ImageMesh = ({\n  src,\n  onPointerDown,\n  onPointerUp,\n  setImageReady,\n  mediaId,\n  isXR\n}) => {\n  console.log(\"Set Image Ready\");\n  console.log(setImageReady);\n  const _texture = useTexture(src, (loader) => {\n    if (setImageReady) {\n      setImageReady(true);\n    }\n  });\n  const meshRef = useRef();\n  const [isAnimating, setIsAnimating] = useState(true);\n  const imageBuffer = [];\n  useEffect(() => {\n    let animationFrameId;\n    const animate = () => {\n      if (isAnimating && meshRef.current && isXR) {\n        meshRef.current.rotation.y += 2e-3;\n        if (meshRef.current.rotation.y >= Math.PI * 2) {\n          meshRef.current.rotation.y = Math.PI * 2;\n          meshRef.current.rotation.y = 0;\n        }\n        animationFrameId = requestAnimationFrame(animate);\n      }\n    };\n    animate();\n    return () => {\n      if (animationFrameId) {\n        cancelAnimationFrame(animationFrameId);\n      }\n      if (setImageReady) {\n        setImageReady(true);\n      }\n    };\n  }, [isAnimating]);\n  useEffect(() => {\n    if (mediaId) {\n      if (!imageBuffer.length) {\n        imageBuffer.push(1e3);\n      }\n    }\n  }, []);\n  const handleUserPan = () => {\n    setIsAnimating(false);\n  };\n  useEffect(() => {\n    setIsAnimating(true);\n    onPointerDown();\n  }, []);\n  return <Sphere\n    args={[100, 100, 100]}\n    scale-x={-1}\n    ref={meshRef}\n    onPointerMove={handleUserPan}\n    onPointerDown={onPointerDown}\n    onPointerUp={onPointerUp}\n  ><meshBasicMaterial map={_texture} toneMapped={false} side={BackSide} /></Sphere>;\n};\nvar ImageMesh_default = ImageMesh;\n\n// src/components/player/StandAlonePlayer.tsx\nimport { useThree as useThree2, useFrame } from \"@react-three/fiber\";\nimport { Euler, Matrix4, Vector3 as Vector32 } from \"three\";\nimport { OrbitControls, Sphere as Sphere2 } from \"@react-three/drei\";\nimport { Loader2 } from \"lucide-react\";\nimport { BackSide as BackSide3, VideoTexture } from \"three\";\nimport { SnackbarProvider } from \"notistack\";\nimport { usePathname } from \"next/navigation\";\n\nimport React from 'react'\n\n// src/components/player/NewControls.tsx\nimport {\n  ChevronLeft,\n  ChevronRight,\n  Pause,\n  Play,\n  Volume2,\n  VolumeX\n} from \"lucide-react\";\nimport { useEffect as useEffect2, useState as useState2, useRef as useRef2 } from \"react\";\nimport { useEnterXR, useXR, useSessionSupported } from \"@coconut-xr/natuerlich/react\";\n\n// src/lib/utils.ts\nimport { clsx } from \"clsx\";\n\n// ../../node_modules/.pnpm/tailwind-merge@2.5.2/node_modules/tailwind-merge/dist/bundle-mjs.mjs\nvar CLASS_PART_SEPARATOR = \"-\";\nvar createClassGroupUtils = (config) => {\n  const classMap = createClassMap(config);\n  const {\n    conflictingClassGroups,\n    conflictingClassGroupModifiers\n  } = config;\n  const getClassGroupId = (className) => {\n    const classParts = className.split(CLASS_PART_SEPARATOR);\n    if (classParts[0] === \"\" && classParts.length !== 1) {\n      classParts.shift();\n    }\n    return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);\n  };\n  const getConflictingClassGroupIds = (classGroupId, hasPostfixModifier) => {\n    const conflicts = conflictingClassGroups[classGroupId] || [];\n    if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {\n      return [...conflicts, ...conflictingClassGroupModifiers[classGroupId]];\n    }\n    return conflicts;\n  };\n  return {\n    getClassGroupId,\n    getConflictingClassGroupIds\n  };\n};\nvar getGroupRecursive = (classParts, classPartObject) => {\n  var _a;\n  if (classParts.length === 0) {\n    return classPartObject.classGroupId;\n  }\n  const currentClassPart = classParts[0];\n  const nextClassPartObject = classPartObject.nextPart.get(currentClassPart);\n  const classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : void 0;\n  if (classGroupFromNextClassPart) {\n    return classGroupFromNextClassPart;\n  }\n  if (classPartObject.validators.length === 0) {\n    return void 0;\n  }\n  const classRest = classParts.join(CLASS_PART_SEPARATOR);\n  return (_a = classPartObject.validators.find(({\n    validator\n  }) => validator(classRest))) == null ? void 0 : _a.classGroupId;\n};\nvar arbitraryPropertyRegex = /^\\[(.+)\\]$/;\nvar getGroupIdForArbitraryProperty = (className) => {\n  if (arbitraryPropertyRegex.test(className)) {\n    const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];\n    const property = arbitraryPropertyClassName == null ? void 0 : arbitraryPropertyClassName.substring(0, arbitraryPropertyClassName.indexOf(\":\"));\n    if (property) {\n      return \"arbitrary..\" + property;\n    }\n  }\n};\nvar createClassMap = (config) => {\n  const {\n    theme,\n    prefix\n  } = config;\n  const classMap = {\n    nextPart: /* @__PURE__ */ new Map(),\n    validators: []\n  };\n  const prefixedClassGroupEntries = getPrefixedClassGroupEntries(Object.entries(config.classGroups), prefix);\n  prefixedClassGroupEntries.forEach(([classGroupId, classGroup]) => {\n    processClassesRecursively(classGroup, classMap, classGroupId, theme);\n  });\n  return classMap;\n};\nvar processClassesRecursively = (classGroup, classPartObject, classGroupId, theme) => {\n  classGroup.forEach((classDefinition) => {\n    if (typeof classDefinition === \"string\") {\n      const classPartObjectToEdit = classDefinition === \"\" ? classPartObject : getPart(classPartObject, classDefinition);\n      classPartObjectToEdit.classGroupId = classGroupId;\n      return;\n    }\n    if (typeof classDefinition === \"function\") {\n      if (isThemeGetter(classDefinition)) {\n        processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);\n        return;\n      }\n      classPartObject.validators.push({\n        validator: classDefinition,\n        classGroupId\n      });\n      return;\n    }\n    Object.entries(classDefinition).forEach(([key, classGroup2]) => {\n      processClassesRecursively(classGroup2, getPart(classPartObject, key), classGroupId, theme);\n    });\n  });\n};\nvar getPart = (classPartObject, path) => {\n  let currentClassPartObject = classPartObject;\n  path.split(CLASS_PART_SEPARATOR).forEach((pathPart) => {\n    if (!currentClassPartObject.nextPart.has(pathPart)) {\n      currentClassPartObject.nextPart.set(pathPart, {\n        nextPart: /* @__PURE__ */ new Map(),\n        validators: []\n      });\n    }\n    currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);\n  });\n  return currentClassPartObject;\n};\nvar isThemeGetter = (func) => func.isThemeGetter;\nvar getPrefixedClassGroupEntries = (classGroupEntries, prefix) => {\n  if (!prefix) {\n    return classGroupEntries;\n  }\n  return classGroupEntries.map(([classGroupId, classGroup]) => {\n    const prefixedClassGroup = classGroup.map((classDefinition) => {\n      if (typeof classDefinition === \"string\") {\n        return prefix + classDefinition;\n      }\n      if (typeof classDefinition === \"object\") {\n        return Object.fromEntries(Object.entries(classDefinition).map(([key, value]) => [prefix + key, value]));\n      }\n      return classDefinition;\n    });\n    return [classGroupId, prefixedClassGroup];\n  });\n};\nvar createLruCache = (maxCacheSize) => {\n  if (maxCacheSize < 1) {\n    return {\n      get: () => void 0,\n      set: () => {\n      }\n    };\n  }\n  let cacheSize = 0;\n  let cache = /* @__PURE__ */ new Map();\n  let previousCache = /* @__PURE__ */ new Map();\n  const update = (key, value) => {\n    cache.set(key, value);\n    cacheSize++;\n    if (cacheSize > maxCacheSize) {\n      cacheSize = 0;\n      previousCache = cache;\n      cache = /* @__PURE__ */ new Map();\n    }\n  };\n  return {\n    get(key) {\n      let value = cache.get(key);\n      if (value !== void 0) {\n        return value;\n      }\n      if ((value = previousCache.get(key)) !== void 0) {\n        update(key, value);\n        return value;\n      }\n    },\n    set(key, value) {\n      if (cache.has(key)) {\n        cache.set(key, value);\n      } else {\n        update(key, value);\n      }\n    }\n  };\n};\nvar IMPORTANT_MODIFIER = \"!\";\nvar createParseClassName = (config) => {\n  const {\n    separator,\n    experimentalParseClassName\n  } = config;\n  const isSeparatorSingleCharacter = separator.length === 1;\n  const firstSeparatorCharacter = separator[0];\n  const separatorLength = separator.length;\n  const parseClassName = (className) => {\n    const modifiers = [];\n    let bracketDepth = 0;\n    let modifierStart = 0;\n    let postfixModifierPosition;\n    for (let index = 0; index < className.length; index++) {\n      let currentCharacter = className[index];\n      if (bracketDepth === 0) {\n        if (currentCharacter === firstSeparatorCharacter && (isSeparatorSingleCharacter || className.slice(index, index + separatorLength) === separator)) {\n          modifiers.push(className.slice(modifierStart, index));\n          modifierStart = index + separatorLength;\n          continue;\n        }\n        if (currentCharacter === \"/\") {\n          postfixModifierPosition = index;\n          continue;\n        }\n      }\n      if (currentCharacter === \"[\") {\n        bracketDepth++;\n      } else if (currentCharacter === \"]\") {\n        bracketDepth--;\n      }\n    }\n    const baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);\n    const hasImportantModifier = baseClassNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER);\n    const baseClassName = hasImportantModifier ? baseClassNameWithImportantModifier.substring(1) : baseClassNameWithImportantModifier;\n    const maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : void 0;\n    return {\n      modifiers,\n      hasImportantModifier,\n      baseClassName,\n      maybePostfixModifierPosition\n    };\n  };\n  if (experimentalParseClassName) {\n    return (className) => experimentalParseClassName({\n      className,\n      parseClassName\n    });\n  }\n  return parseClassName;\n};\nvar sortModifiers = (modifiers) => {\n  if (modifiers.length <= 1) {\n    return modifiers;\n  }\n  const sortedModifiers = [];\n  let unsortedModifiers = [];\n  modifiers.forEach((modifier) => {\n    const isArbitraryVariant = modifier[0] === \"[\";\n    if (isArbitraryVariant) {\n      sortedModifiers.push(...unsortedModifiers.sort(), modifier);\n      unsortedModifiers = [];\n    } else {\n      unsortedModifiers.push(modifier);\n    }\n  });\n  sortedModifiers.push(...unsortedModifiers.sort());\n  return sortedModifiers;\n};\nvar createConfigUtils = (config) => __spreadValues({\n  cache: createLruCache(config.cacheSize),\n  parseClassName: createParseClassName(config)\n}, createClassGroupUtils(config));\nvar SPLIT_CLASSES_REGEX = /\\s+/;\nvar mergeClassList = (classList, configUtils) => {\n  const {\n    parseClassName,\n    getClassGroupId,\n    getConflictingClassGroupIds\n  } = configUtils;\n  const classGroupsInConflict = [];\n  const classNames = classList.trim().split(SPLIT_CLASSES_REGEX);\n  let result = \"\";\n  for (let index = classNames.length - 1; index >= 0; index -= 1) {\n    const originalClassName = classNames[index];\n    const {\n      modifiers,\n      hasImportantModifier,\n      baseClassName,\n      maybePostfixModifierPosition\n    } = parseClassName(originalClassName);\n    let hasPostfixModifier = Boolean(maybePostfixModifierPosition);\n    let classGroupId = getClassGroupId(hasPostfixModifier ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);\n    if (!classGroupId) {\n      if (!hasPostfixModifier) {\n        result = originalClassName + (result.length > 0 ? \" \" + result : result);\n        continue;\n      }\n      classGroupId = getClassGroupId(baseClassName);\n      if (!classGroupId) {\n        result = originalClassName + (result.length > 0 ? \" \" + result : result);\n        continue;\n      }\n      hasPostfixModifier = false;\n    }\n    const variantModifier = sortModifiers(modifiers).join(\":\");\n    const modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;\n    const classId = modifierId + classGroupId;\n    if (classGroupsInConflict.includes(classId)) {\n      continue;\n    }\n    classGroupsInConflict.push(classId);\n    const conflictGroups = getConflictingClassGroupIds(classGroupId, hasPostfixModifier);\n    for (let i = 0; i < conflictGroups.length; ++i) {\n      const group = conflictGroups[i];\n      classGroupsInConflict.push(modifierId + group);\n    }\n    result = originalClassName + (result.length > 0 ? \" \" + result : result);\n  }\n  return result;\n};\nfunction twJoin() {\n  let index = 0;\n  let argument;\n  let resolvedValue;\n  let string = \"\";\n  while (index < arguments.length) {\n    if (argument = arguments[index++]) {\n      if (resolvedValue = toValue(argument)) {\n        string && (string += \" \");\n        string += resolvedValue;\n      }\n    }\n  }\n  return string;\n}\nvar toValue = (mix) => {\n  if (typeof mix === \"string\") {\n    return mix;\n  }\n  let resolvedValue;\n  let string = \"\";\n  for (let k = 0; k < mix.length; k++) {\n    if (mix[k]) {\n      if (resolvedValue = toValue(mix[k])) {\n        string && (string += \" \");\n        string += resolvedValue;\n      }\n    }\n  }\n  return string;\n};\nfunction createTailwindMerge(createConfigFirst, ...createConfigRest) {\n  let configUtils;\n  let cacheGet;\n  let cacheSet;\n  let functionToCall = initTailwindMerge;\n  function initTailwindMerge(classList) {\n    const config = createConfigRest.reduce((previousConfig, createConfigCurrent) => createConfigCurrent(previousConfig), createConfigFirst());\n    configUtils = createConfigUtils(config);\n    cacheGet = configUtils.cache.get;\n    cacheSet = configUtils.cache.set;\n    functionToCall = tailwindMerge;\n    return tailwindMerge(classList);\n  }\n  function tailwindMerge(classList) {\n    const cachedResult = cacheGet(classList);\n    if (cachedResult) {\n      return cachedResult;\n    }\n    const result = mergeClassList(classList, configUtils);\n    cacheSet(classList, result);\n    return result;\n  }\n  return function callTailwindMerge() {\n    return functionToCall(twJoin.apply(null, arguments));\n  };\n}\nvar fromTheme = (key) => {\n  const themeGetter = (theme) => theme[key] || [];\n  themeGetter.isThemeGetter = true;\n  return themeGetter;\n};\nvar arbitraryValueRegex = /^\\[(?:([a-z-]+):)?(.+)\\]$/i;\nvar fractionRegex = /^\\d+\\/\\d+$/;\nvar stringLengths = /* @__PURE__ */ new Set([\"px\", \"full\", \"screen\"]);\nvar tshirtUnitRegex = /^(\\d+(\\.\\d+)?)?(xs|sm|md|lg|xl)$/;\nvar lengthUnitRegex = /\\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\\b(calc|min|max|clamp)\\(.+\\)|^0$/;\nvar colorFunctionRegex = /^(rgba?|hsla?|hwb|(ok)?(lab|lch))\\(.+\\)$/;\nvar shadowRegex = /^(inset_)?-?((\\d+)?\\.?(\\d+)[a-z]+|0)_-?((\\d+)?\\.?(\\d+)[a-z]+|0)/;\nvar imageRegex = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\\(.+\\)$/;\nvar isLength = (value) => isNumber(value) || stringLengths.has(value) || fractionRegex.test(value);\nvar isArbitraryLength = (value) => getIsArbitraryValue(value, \"length\", isLengthOnly);\nvar isNumber = (value) => Boolean(value) && !Number.isNaN(Number(value));\nvar isArbitraryNumber = (value) => getIsArbitraryValue(value, \"number\", isNumber);\nvar isInteger = (value) => Boolean(value) && Number.isInteger(Number(value));\nvar isPercent = (value) => value.endsWith(\"%\") && isNumber(value.slice(0, -1));\nvar isArbitraryValue = (value) => arbitraryValueRegex.test(value);\nvar isTshirtSize = (value) => tshirtUnitRegex.test(value);\nvar sizeLabels = /* @__PURE__ */ new Set([\"length\", \"size\", \"percentage\"]);\nvar isArbitrarySize = (value) => getIsArbitraryValue(value, sizeLabels, isNever);\nvar isArbitraryPosition = (value) => getIsArbitraryValue(value, \"position\", isNever);\nvar imageLabels = /* @__PURE__ */ new Set([\"image\", \"url\"]);\nvar isArbitraryImage = (value) => getIsArbitraryValue(value, imageLabels, isImage);\nvar isArbitraryShadow = (value) => getIsArbitraryValue(value, \"\", isShadow);\nvar isAny = () => true;\nvar getIsArbitraryValue = (value, label, testValue) => {\n  const result = arbitraryValueRegex.exec(value);\n  if (result) {\n    if (result[1]) {\n      return typeof label === \"string\" ? result[1] === label : label.has(result[1]);\n    }\n    return testValue(result[2]);\n  }\n  return false;\n};\nvar isLengthOnly = (value) => (\n  // `colorFunctionRegex` check is necessary because color functions can have percentages in them which which would be incorrectly classified as lengths.\n  // For example, `hsl(0 0% 0%)` would be classified as a length without this check.\n  // I could also use lookbehind assertion in `lengthUnitRegex` but that isn't supported widely enough.\n  lengthUnitRegex.test(value) && !colorFunctionRegex.test(value)\n);\nvar isNever = () => false;\nvar isShadow = (value) => shadowRegex.test(value);\nvar isImage = (value) => imageRegex.test(value);\nvar getDefaultConfig = () => {\n  const colors = fromTheme(\"colors\");\n  const spacing = fromTheme(\"spacing\");\n  const blur = fromTheme(\"blur\");\n  const brightness = fromTheme(\"brightness\");\n  const borderColor = fromTheme(\"borderColor\");\n  const borderRadius = fromTheme(\"borderRadius\");\n  const borderSpacing = fromTheme(\"borderSpacing\");\n  const borderWidth = fromTheme(\"borderWidth\");\n  const contrast = fromTheme(\"contrast\");\n  const grayscale = fromTheme(\"grayscale\");\n  const hueRotate = fromTheme(\"hueRotate\");\n  const invert = fromTheme(\"invert\");\n  const gap = fromTheme(\"gap\");\n  const gradientColorStops = fromTheme(\"gradientColorStops\");\n  const gradientColorStopPositions = fromTheme(\"gradientColorStopPositions\");\n  const inset = fromTheme(\"inset\");\n  const margin = fromTheme(\"margin\");\n  const opacity = fromTheme(\"opacity\");\n  const padding = fromTheme(\"padding\");\n  const saturate = fromTheme(\"saturate\");\n  const scale = fromTheme(\"scale\");\n  const sepia = fromTheme(\"sepia\");\n  const skew = fromTheme(\"skew\");\n  const space = fromTheme(\"space\");\n  const translate = fromTheme(\"translate\");\n  const getOverscroll = () => [\"auto\", \"contain\", \"none\"];\n  const getOverflow = () => [\"auto\", \"hidden\", \"clip\", \"visible\", \"scroll\"];\n  const getSpacingWithAutoAndArbitrary = () => [\"auto\", isArbitraryValue, spacing];\n  const getSpacingWithArbitrary = () => [isArbitraryValue, spacing];\n  const getLengthWithEmptyAndArbitrary = () => [\"\", isLength, isArbitraryLength];\n  const getNumberWithAutoAndArbitrary = () => [\"auto\", isNumber, isArbitraryValue];\n  const getPositions = () => [\"bottom\", \"center\", \"left\", \"left-bottom\", \"left-top\", \"right\", \"right-bottom\", \"right-top\", \"top\"];\n  const getLineStyles = () => [\"solid\", \"dashed\", \"dotted\", \"double\", \"none\"];\n  const getBlendModes = () => [\"normal\", \"multiply\", \"screen\", \"overlay\", \"darken\", \"lighten\", \"color-dodge\", \"color-burn\", \"hard-light\", \"soft-light\", \"difference\", \"exclusion\", \"hue\", \"saturation\", \"color\", \"luminosity\"];\n  const getAlign = () => [\"start\", \"end\", \"center\", \"between\", \"around\", \"evenly\", \"stretch\"];\n  const getZeroAndEmpty = () => [\"\", \"0\", isArbitraryValue];\n  const getBreaks = () => [\"auto\", \"avoid\", \"all\", \"avoid-page\", \"page\", \"left\", \"right\", \"column\"];\n  const getNumberAndArbitrary = () => [isNumber, isArbitraryValue];\n  return {\n    cacheSize: 500,\n    separator: \":\",\n    theme: {\n      colors: [isAny],\n      spacing: [isLength, isArbitraryLength],\n      blur: [\"none\", \"\", isTshirtSize, isArbitraryValue],\n      brightness: getNumberAndArbitrary(),\n      borderColor: [colors],\n      borderRadius: [\"none\", \"\", \"full\", isTshirtSize, isArbitraryValue],\n      borderSpacing: getSpacingWithArbitrary(),\n      borderWidth: getLengthWithEmptyAndArbitrary(),\n      contrast: getNumberAndArbitrary(),\n      grayscale: getZeroAndEmpty(),\n      hueRotate: getNumberAndArbitrary(),\n      invert: getZeroAndEmpty(),\n      gap: getSpacingWithArbitrary(),\n      gradientColorStops: [colors],\n      gradientColorStopPositions: [isPercent, isArbitraryLength],\n      inset: getSpacingWithAutoAndArbitrary(),\n      margin: getSpacingWithAutoAndArbitrary(),\n      opacity: getNumberAndArbitrary(),\n      padding: getSpacingWithArbitrary(),\n      saturate: getNumberAndArbitrary(),\n      scale: getNumberAndArbitrary(),\n      sepia: getZeroAndEmpty(),\n      skew: getNumberAndArbitrary(),\n      space: getSpacingWithArbitrary(),\n      translate: getSpacingWithArbitrary()\n    },\n    classGroups: {\n      // Layout\n      /**\n       * Aspect Ratio\n       * @see https://tailwindcss.com/docs/aspect-ratio\n       */\n      aspect: [{\n        aspect: [\"auto\", \"square\", \"video\", isArbitraryValue]\n      }],\n      /**\n       * Container\n       * @see https://tailwindcss.com/docs/container\n       */\n      container: [\"container\"],\n      /**\n       * Columns\n       * @see https://tailwindcss.com/docs/columns\n       */\n      columns: [{\n        columns: [isTshirtSize]\n      }],\n      /**\n       * Break After\n       * @see https://tailwindcss.com/docs/break-after\n       */\n      \"break-after\": [{\n        \"break-after\": getBreaks()\n      }],\n      /**\n       * Break Before\n       * @see https://tailwindcss.com/docs/break-before\n       */\n      \"break-before\": [{\n        \"break-before\": getBreaks()\n      }],\n      /**\n       * Break Inside\n       * @see https://tailwindcss.com/docs/break-inside\n       */\n      \"break-inside\": [{\n        \"break-inside\": [\"auto\", \"avoid\", \"avoid-page\", \"avoid-column\"]\n      }],\n      /**\n       * Box Decoration Break\n       * @see https://tailwindcss.com/docs/box-decoration-break\n       */\n      \"box-decoration\": [{\n        \"box-decoration\": [\"slice\", \"clone\"]\n      }],\n      /**\n       * Box Sizing\n       * @see https://tailwindcss.com/docs/box-sizing\n       */\n      box: [{\n        box: [\"border\", \"content\"]\n      }],\n      /**\n       * Display\n       * @see https://tailwindcss.com/docs/display\n       */\n      display: [\"block\", \"inline-block\", \"inline\", \"flex\", \"inline-flex\", \"table\", \"inline-table\", \"table-caption\", \"table-cell\", \"table-column\", \"table-column-group\", \"table-footer-group\", \"table-header-group\", \"table-row-group\", \"table-row\", \"flow-root\", \"grid\", \"inline-grid\", \"contents\", \"list-item\", \"hidden\"],\n      /**\n       * Floats\n       * @see https://tailwindcss.com/docs/float\n       */\n      float: [{\n        float: [\"right\", \"left\", \"none\", \"start\", \"end\"]\n      }],\n      /**\n       * Clear\n       * @see https://tailwindcss.com/docs/clear\n       */\n      clear: [{\n        clear: [\"left\", \"right\", \"both\", \"none\", \"start\", \"end\"]\n      }],\n      /**\n       * Isolation\n       * @see https://tailwindcss.com/docs/isolation\n       */\n      isolation: [\"isolate\", \"isolation-auto\"],\n      /**\n       * Object Fit\n       * @see https://tailwindcss.com/docs/object-fit\n       */\n      \"object-fit\": [{\n        object: [\"contain\", \"cover\", \"fill\", \"none\", \"scale-down\"]\n      }],\n      /**\n       * Object Position\n       * @see https://tailwindcss.com/docs/object-position\n       */\n      \"object-position\": [{\n        object: [...getPositions(), isArbitraryValue]\n      }],\n      /**\n       * Overflow\n       * @see https://tailwindcss.com/docs/overflow\n       */\n      overflow: [{\n        overflow: getOverflow()\n      }],\n      /**\n       * Overflow X\n       * @see https://tailwindcss.com/docs/overflow\n       */\n      \"overflow-x\": [{\n        \"overflow-x\": getOverflow()\n      }],\n      /**\n       * Overflow Y\n       * @see https://tailwindcss.com/docs/overflow\n       */\n      \"overflow-y\": [{\n        \"overflow-y\": getOverflow()\n      }],\n      /**\n       * Overscroll Behavior\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */\n      overscroll: [{\n        overscroll: getOverscroll()\n      }],\n      /**\n       * Overscroll Behavior X\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */\n      \"overscroll-x\": [{\n        \"overscroll-x\": getOverscroll()\n      }],\n      /**\n       * Overscroll Behavior Y\n       * @see https://tailwindcss.com/docs/overscroll-behavior\n       */\n      \"overscroll-y\": [{\n        \"overscroll-y\": getOverscroll()\n      }],\n      /**\n       * Position\n       * @see https://tailwindcss.com/docs/position\n       */\n      position: [\"static\", \"fixed\", \"absolute\", \"relative\", \"sticky\"],\n      /**\n       * Top / Right / Bottom / Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      inset: [{\n        inset: [inset]\n      }],\n      /**\n       * Right / Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      \"inset-x\": [{\n        \"inset-x\": [inset]\n      }],\n      /**\n       * Top / Bottom\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      \"inset-y\": [{\n        \"inset-y\": [inset]\n      }],\n      /**\n       * Start\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      start: [{\n        start: [inset]\n      }],\n      /**\n       * End\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      end: [{\n        end: [inset]\n      }],\n      /**\n       * Top\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      top: [{\n        top: [inset]\n      }],\n      /**\n       * Right\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      right: [{\n        right: [inset]\n      }],\n      /**\n       * Bottom\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      bottom: [{\n        bottom: [inset]\n      }],\n      /**\n       * Left\n       * @see https://tailwindcss.com/docs/top-right-bottom-left\n       */\n      left: [{\n        left: [inset]\n      }],\n      /**\n       * Visibility\n       * @see https://tailwindcss.com/docs/visibility\n       */\n      visibility: [\"visible\", \"invisible\", \"collapse\"],\n      /**\n       * Z-Index\n       * @see https://tailwindcss.com/docs/z-index\n       */\n      z: [{\n        z: [\"auto\", isInteger, isArbitraryValue]\n      }],\n      // Flexbox and Grid\n      /**\n       * Flex Basis\n       * @see https://tailwindcss.com/docs/flex-basis\n       */\n      basis: [{\n        basis: getSpacingWithAutoAndArbitrary()\n      }],\n      /**\n       * Flex Direction\n       * @see https://tailwindcss.com/docs/flex-direction\n       */\n      \"flex-direction\": [{\n        flex: [\"row\", \"row-reverse\", \"col\", \"col-reverse\"]\n      }],\n      /**\n       * Flex Wrap\n       * @see https://tailwindcss.com/docs/flex-wrap\n       */\n      \"flex-wrap\": [{\n        flex: [\"wrap\", \"wrap-reverse\", \"nowrap\"]\n      }],\n      /**\n       * Flex\n       * @see https://tailwindcss.com/docs/flex\n       */\n      flex: [{\n        flex: [\"1\", \"auto\", \"initial\", \"none\", isArbitraryValue]\n      }],\n      /**\n       * Flex Grow\n       * @see https://tailwindcss.com/docs/flex-grow\n       */\n      grow: [{\n        grow: getZeroAndEmpty()\n      }],\n      /**\n       * Flex Shrink\n       * @see https://tailwindcss.com/docs/flex-shrink\n       */\n      shrink: [{\n        shrink: getZeroAndEmpty()\n      }],\n      /**\n       * Order\n       * @see https://tailwindcss.com/docs/order\n       */\n      order: [{\n        order: [\"first\", \"last\", \"none\", isInteger, isArbitraryValue]\n      }],\n      /**\n       * Grid Template Columns\n       * @see https://tailwindcss.com/docs/grid-template-columns\n       */\n      \"grid-cols\": [{\n        \"grid-cols\": [isAny]\n      }],\n      /**\n       * Grid Column Start / End\n       * @see https://tailwindcss.com/docs/grid-column\n       */\n      \"col-start-end\": [{\n        col: [\"auto\", {\n          span: [\"full\", isInteger, isArbitraryValue]\n        }, isArbitraryValue]\n      }],\n      /**\n       * Grid Column Start\n       * @see https://tailwindcss.com/docs/grid-column\n       */\n      \"col-start\": [{\n        \"col-start\": getNumberWithAutoAndArbitrary()\n      }],\n      /**\n       * Grid Column End\n       * @see https://tailwindcss.com/docs/grid-column\n       */\n      \"col-end\": [{\n        \"col-end\": getNumberWithAutoAndArbitrary()\n      }],\n      /**\n       * Grid Template Rows\n       * @see https://tailwindcss.com/docs/grid-template-rows\n       */\n      \"grid-rows\": [{\n        \"grid-rows\": [isAny]\n      }],\n      /**\n       * Grid Row Start / End\n       * @see https://tailwindcss.com/docs/grid-row\n       */\n      \"row-start-end\": [{\n        row: [\"auto\", {\n          span: [isInteger, isArbitraryValue]\n        }, isArbitraryValue]\n      }],\n      /**\n       * Grid Row Start\n       * @see https://tailwindcss.com/docs/grid-row\n       */\n      \"row-start\": [{\n        \"row-start\": getNumberWithAutoAndArbitrary()\n      }],\n      /**\n       * Grid Row End\n       * @see https://tailwindcss.com/docs/grid-row\n       */\n      \"row-end\": [{\n        \"row-end\": getNumberWithAutoAndArbitrary()\n      }],\n      /**\n       * Grid Auto Flow\n       * @see https://tailwindcss.com/docs/grid-auto-flow\n       */\n      \"grid-flow\": [{\n        \"grid-flow\": [\"row\", \"col\", \"dense\", \"row-dense\", \"col-dense\"]\n      }],\n      /**\n       * Grid Auto Columns\n       * @see https://tailwindcss.com/docs/grid-auto-columns\n       */\n      \"auto-cols\": [{\n        \"auto-cols\": [\"auto\", \"min\", \"max\", \"fr\", isArbitraryValue]\n      }],\n      /**\n       * Grid Auto Rows\n       * @see https://tailwindcss.com/docs/grid-auto-rows\n       */\n      \"auto-rows\": [{\n        \"auto-rows\": [\"auto\", \"min\", \"max\", \"fr\", isArbitraryValue]\n      }],\n      /**\n       * Gap\n       * @see https://tailwindcss.com/docs/gap\n       */\n      gap: [{\n        gap: [gap]\n      }],\n      /**\n       * Gap X\n       * @see https://tailwindcss.com/docs/gap\n       */\n      \"gap-x\": [{\n        \"gap-x\": [gap]\n      }],\n      /**\n       * Gap Y\n       * @see https://tailwindcss.com/docs/gap\n       */\n      \"gap-y\": [{\n        \"gap-y\": [gap]\n      }],\n      /**\n       * Justify Content\n       * @see https://tailwindcss.com/docs/justify-content\n       */\n      \"justify-content\": [{\n        justify: [\"normal\", ...getAlign()]\n      }],\n      /**\n       * Justify Items\n       * @see https://tailwindcss.com/docs/justify-items\n       */\n      \"justify-items\": [{\n        \"justify-items\": [\"start\", \"end\", \"center\", \"stretch\"]\n      }],\n      /**\n       * Justify Self\n       * @see https://tailwindcss.com/docs/justify-self\n       */\n      \"justify-self\": [{\n        \"justify-self\": [\"auto\", \"start\", \"end\", \"center\", \"stretch\"]\n      }],\n      /**\n       * Align Content\n       * @see https://tailwindcss.com/docs/align-content\n       */\n      \"align-content\": [{\n        content: [\"normal\", ...getAlign(), \"baseline\"]\n      }],\n      /**\n       * Align Items\n       * @see https://tailwindcss.com/docs/align-items\n       */\n      \"align-items\": [{\n        items: [\"start\", \"end\", \"center\", \"baseline\", \"stretch\"]\n      }],\n      /**\n       * Align Self\n       * @see https://tailwindcss.com/docs/align-self\n       */\n      \"align-self\": [{\n        self: [\"auto\", \"start\", \"end\", \"center\", \"stretch\", \"baseline\"]\n      }],\n      /**\n       * Place Content\n       * @see https://tailwindcss.com/docs/place-content\n       */\n      \"place-content\": [{\n        \"place-content\": [...getAlign(), \"baseline\"]\n      }],\n      /**\n       * Place Items\n       * @see https://tailwindcss.com/docs/place-items\n       */\n      \"place-items\": [{\n        \"place-items\": [\"start\", \"end\", \"center\", \"baseline\", \"stretch\"]\n      }],\n      /**\n       * Place Self\n       * @see https://tailwindcss.com/docs/place-self\n       */\n      \"place-self\": [{\n        \"place-self\": [\"auto\", \"start\", \"end\", \"center\", \"stretch\"]\n      }],\n      // Spacing\n      /**\n       * Padding\n       * @see https://tailwindcss.com/docs/padding\n       */\n      p: [{\n        p: [padding]\n      }],\n      /**\n       * Padding X\n       * @see https://tailwindcss.com/docs/padding\n       */\n      px: [{\n        px: [padding]\n      }],\n      /**\n       * Padding Y\n       * @see https://tailwindcss.com/docs/padding\n       */\n      py: [{\n        py: [padding]\n      }],\n      /**\n       * Padding Start\n       * @see https://tailwindcss.com/docs/padding\n       */\n      ps: [{\n        ps: [padding]\n      }],\n      /**\n       * Padding End\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pe: [{\n        pe: [padding]\n      }],\n      /**\n       * Padding Top\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pt: [{\n        pt: [padding]\n      }],\n      /**\n       * Padding Right\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pr: [{\n        pr: [padding]\n      }],\n      /**\n       * Padding Bottom\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pb: [{\n        pb: [padding]\n      }],\n      /**\n       * Padding Left\n       * @see https://tailwindcss.com/docs/padding\n       */\n      pl: [{\n        pl: [padding]\n      }],\n      /**\n       * Margin\n       * @see https://tailwindcss.com/docs/margin\n       */\n      m: [{\n        m: [margin]\n      }],\n      /**\n       * Margin X\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mx: [{\n        mx: [margin]\n      }],\n      /**\n       * Margin Y\n       * @see https://tailwindcss.com/docs/margin\n       */\n      my: [{\n        my: [margin]\n      }],\n      /**\n       * Margin Start\n       * @see https://tailwindcss.com/docs/margin\n       */\n      ms: [{\n        ms: [margin]\n      }],\n      /**\n       * Margin End\n       * @see https://tailwindcss.com/docs/margin\n       */\n      me: [{\n        me: [margin]\n      }],\n      /**\n       * Margin Top\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mt: [{\n        mt: [margin]\n      }],\n      /**\n       * Margin Right\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mr: [{\n        mr: [margin]\n      }],\n      /**\n       * Margin Bottom\n       * @see https://tailwindcss.com/docs/margin\n       */\n      mb: [{\n        mb: [margin]\n      }],\n      /**\n       * Margin Left\n       * @see https://tailwindcss.com/docs/margin\n       */\n      ml: [{\n        ml: [margin]\n      }],\n      /**\n       * Space Between X\n       * @see https://tailwindcss.com/docs/space\n       */\n      \"space-x\": [{\n        \"space-x\": [space]\n      }],\n      /**\n       * Space Between X Reverse\n       * @see https://tailwindcss.com/docs/space\n       */\n      \"space-x-reverse\": [\"space-x-reverse\"],\n      /**\n       * Space Between Y\n       * @see https://tailwindcss.com/docs/space\n       */\n      \"space-y\": [{\n        \"space-y\": [space]\n      }],\n      /**\n       * Space Between Y Reverse\n       * @see https://tailwindcss.com/docs/space\n       */\n      \"space-y-reverse\": [\"space-y-reverse\"],\n      // Sizing\n      /**\n       * Width\n       * @see https://tailwindcss.com/docs/width\n       */\n      w: [{\n        w: [\"auto\", \"min\", \"max\", \"fit\", \"svw\", \"lvw\", \"dvw\", isArbitraryValue, spacing]\n      }],\n      /**\n       * Min-Width\n       * @see https://tailwindcss.com/docs/min-width\n       */\n      \"min-w\": [{\n        \"min-w\": [isArbitraryValue, spacing, \"min\", \"max\", \"fit\"]\n      }],\n      /**\n       * Max-Width\n       * @see https://tailwindcss.com/docs/max-width\n       */\n      \"max-w\": [{\n        \"max-w\": [isArbitraryValue, spacing, \"none\", \"full\", \"min\", \"max\", \"fit\", \"prose\", {\n          screen: [isTshirtSize]\n        }, isTshirtSize]\n      }],\n      /**\n       * Height\n       * @see https://tailwindcss.com/docs/height\n       */\n      h: [{\n        h: [isArbitraryValue, spacing, \"auto\", \"min\", \"max\", \"fit\", \"svh\", \"lvh\", \"dvh\"]\n      }],\n      /**\n       * Min-Height\n       * @see https://tailwindcss.com/docs/min-height\n       */\n      \"min-h\": [{\n        \"min-h\": [isArbitraryValue, spacing, \"min\", \"max\", \"fit\", \"svh\", \"lvh\", \"dvh\"]\n      }],\n      /**\n       * Max-Height\n       * @see https://tailwindcss.com/docs/max-height\n       */\n      \"max-h\": [{\n        \"max-h\": [isArbitraryValue, spacing, \"min\", \"max\", \"fit\", \"svh\", \"lvh\", \"dvh\"]\n      }],\n      /**\n       * Size\n       * @see https://tailwindcss.com/docs/size\n       */\n      size: [{\n        size: [isArbitraryValue, spacing, \"auto\", \"min\", \"max\", \"fit\"]\n      }],\n      // Typography\n      /**\n       * Font Size\n       * @see https://tailwindcss.com/docs/font-size\n       */\n      \"font-size\": [{\n        text: [\"base\", isTshirtSize, isArbitraryLength]\n      }],\n      /**\n       * Font Smoothing\n       * @see https://tailwindcss.com/docs/font-smoothing\n       */\n      \"font-smoothing\": [\"antialiased\", \"subpixel-antialiased\"],\n      /**\n       * Font Style\n       * @see https://tailwindcss.com/docs/font-style\n       */\n      \"font-style\": [\"italic\", \"not-italic\"],\n      /**\n       * Font Weight\n       * @see https://tailwindcss.com/docs/font-weight\n       */\n      \"font-weight\": [{\n        font: [\"thin\", \"extralight\", \"light\", \"normal\", \"medium\", \"semibold\", \"bold\", \"extrabold\", \"black\", isArbitraryNumber]\n      }],\n      /**\n       * Font Family\n       * @see https://tailwindcss.com/docs/font-family\n       */\n      \"font-family\": [{\n        font: [isAny]\n      }],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      \"fvn-normal\": [\"normal-nums\"],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      \"fvn-ordinal\": [\"ordinal\"],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      \"fvn-slashed-zero\": [\"slashed-zero\"],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      \"fvn-figure\": [\"lining-nums\", \"oldstyle-nums\"],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      \"fvn-spacing\": [\"proportional-nums\", \"tabular-nums\"],\n      /**\n       * Font Variant Numeric\n       * @see https://tailwindcss.com/docs/font-variant-numeric\n       */\n      \"fvn-fraction\": [\"diagonal-fractions\", \"stacked-fractons\"],\n      /**\n       * Letter Spacing\n       * @see https://tailwindcss.com/docs/letter-spacing\n       */\n      tracking: [{\n        tracking: [\"tighter\", \"tight\", \"normal\", \"wide\", \"wider\", \"widest\", isArbitraryValue]\n      }],\n      /**\n       * Line Clamp\n       * @see https://tailwindcss.com/docs/line-clamp\n       */\n      \"line-clamp\": [{\n        \"line-clamp\": [\"none\", isNumber, isArbitraryNumber]\n      }],\n      /**\n       * Line Height\n       * @see https://tailwindcss.com/docs/line-height\n       */\n      leading: [{\n        leading: [\"none\", \"tight\", \"snug\", \"normal\", \"relaxed\", \"loose\", isLength, isArbitraryValue]\n      }],\n      /**\n       * List Style Image\n       * @see https://tailwindcss.com/docs/list-style-image\n       */\n      \"list-image\": [{\n        \"list-image\": [\"none\", isArbitraryValue]\n      }],\n      /**\n       * List Style Type\n       * @see https://tailwindcss.com/docs/list-style-type\n       */\n      \"list-style-type\": [{\n        list: [\"none\", \"disc\", \"decimal\", isArbitraryValue]\n      }],\n      /**\n       * List Style Position\n       * @see https://tailwindcss.com/docs/list-style-position\n       */\n      \"list-style-position\": [{\n        list: [\"inside\", \"outside\"]\n      }],\n      /**\n       * Placeholder Color\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://tailwindcss.com/docs/placeholder-color\n       */\n      \"placeholder-color\": [{\n        placeholder: [colors]\n      }],\n      /**\n       * Placeholder Opacity\n       * @see https://tailwindcss.com/docs/placeholder-opacity\n       */\n      \"placeholder-opacity\": [{\n        \"placeholder-opacity\": [opacity]\n      }],\n      /**\n       * Text Alignment\n       * @see https://tailwindcss.com/docs/text-align\n       */\n      \"text-alignment\": [{\n        text: [\"left\", \"center\", \"right\", \"justify\", \"start\", \"end\"]\n      }],\n      /**\n       * Text Color\n       * @see https://tailwindcss.com/docs/text-color\n       */\n      \"text-color\": [{\n        text: [colors]\n      }],\n      /**\n       * Text Opacity\n       * @see https://tailwindcss.com/docs/text-opacity\n       */\n      \"text-opacity\": [{\n        \"text-opacity\": [opacity]\n      }],\n      /**\n       * Text Decoration\n       * @see https://tailwindcss.com/docs/text-decoration\n       */\n      \"text-decoration\": [\"underline\", \"overline\", \"line-through\", \"no-underline\"],\n      /**\n       * Text Decoration Style\n       * @see https://tailwindcss.com/docs/text-decoration-style\n       */\n      \"text-decoration-style\": [{\n        decoration: [...getLineStyles(), \"wavy\"]\n      }],\n      /**\n       * Text Decoration Thickness\n       * @see https://tailwindcss.com/docs/text-decoration-thickness\n       */\n      \"text-decoration-thickness\": [{\n        decoration: [\"auto\", \"from-font\", isLength, isArbitraryLength]\n      }],\n      /**\n       * Text Underline Offset\n       * @see https://tailwindcss.com/docs/text-underline-offset\n       */\n      \"underline-offset\": [{\n        \"underline-offset\": [\"auto\", isLength, isArbitraryValue]\n      }],\n      /**\n       * Text Decoration Color\n       * @see https://tailwindcss.com/docs/text-decoration-color\n       */\n      \"text-decoration-color\": [{\n        decoration: [colors]\n      }],\n      /**\n       * Text Transform\n       * @see https://tailwindcss.com/docs/text-transform\n       */\n      \"text-transform\": [\"uppercase\", \"lowercase\", \"capitalize\", \"normal-case\"],\n      /**\n       * Text Overflow\n       * @see https://tailwindcss.com/docs/text-overflow\n       */\n      \"text-overflow\": [\"truncate\", \"text-ellipsis\", \"text-clip\"],\n      /**\n       * Text Wrap\n       * @see https://tailwindcss.com/docs/text-wrap\n       */\n      \"text-wrap\": [{\n        text: [\"wrap\", \"nowrap\", \"balance\", \"pretty\"]\n      }],\n      /**\n       * Text Indent\n       * @see https://tailwindcss.com/docs/text-indent\n       */\n      indent: [{\n        indent: getSpacingWithArbitrary()\n      }],\n      /**\n       * Vertical Alignment\n       * @see https://tailwindcss.com/docs/vertical-align\n       */\n      \"vertical-align\": [{\n        align: [\"baseline\", \"top\", \"middle\", \"bottom\", \"text-top\", \"text-bottom\", \"sub\", \"super\", isArbitraryValue]\n      }],\n      /**\n       * Whitespace\n       * @see https://tailwindcss.com/docs/whitespace\n       */\n      whitespace: [{\n        whitespace: [\"normal\", \"nowrap\", \"pre\", \"pre-line\", \"pre-wrap\", \"break-spaces\"]\n      }],\n      /**\n       * Word Break\n       * @see https://tailwindcss.com/docs/word-break\n       */\n      break: [{\n        break: [\"normal\", \"words\", \"all\", \"keep\"]\n      }],\n      /**\n       * Hyphens\n       * @see https://tailwindcss.com/docs/hyphens\n       */\n      hyphens: [{\n        hyphens: [\"none\", \"manual\", \"auto\"]\n      }],\n      /**\n       * Content\n       * @see https://tailwindcss.com/docs/content\n       */\n      content: [{\n        content: [\"none\", isArbitraryValue]\n      }],\n      // Backgrounds\n      /**\n       * Background Attachment\n       * @see https://tailwindcss.com/docs/background-attachment\n       */\n      \"bg-attachment\": [{\n        bg: [\"fixed\", \"local\", \"scroll\"]\n      }],\n      /**\n       * Background Clip\n       * @see https://tailwindcss.com/docs/background-clip\n       */\n      \"bg-clip\": [{\n        \"bg-clip\": [\"border\", \"padding\", \"content\", \"text\"]\n      }],\n      /**\n       * Background Opacity\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://tailwindcss.com/docs/background-opacity\n       */\n      \"bg-opacity\": [{\n        \"bg-opacity\": [opacity]\n      }],\n      /**\n       * Background Origin\n       * @see https://tailwindcss.com/docs/background-origin\n       */\n      \"bg-origin\": [{\n        \"bg-origin\": [\"border\", \"padding\", \"content\"]\n      }],\n      /**\n       * Background Position\n       * @see https://tailwindcss.com/docs/background-position\n       */\n      \"bg-position\": [{\n        bg: [...getPositions(), isArbitraryPosition]\n      }],\n      /**\n       * Background Repeat\n       * @see https://tailwindcss.com/docs/background-repeat\n       */\n      \"bg-repeat\": [{\n        bg: [\"no-repeat\", {\n          repeat: [\"\", \"x\", \"y\", \"round\", \"space\"]\n        }]\n      }],\n      /**\n       * Background Size\n       * @see https://tailwindcss.com/docs/background-size\n       */\n      \"bg-size\": [{\n        bg: [\"auto\", \"cover\", \"contain\", isArbitrarySize]\n      }],\n      /**\n       * Background Image\n       * @see https://tailwindcss.com/docs/background-image\n       */\n      \"bg-image\": [{\n        bg: [\"none\", {\n          \"gradient-to\": [\"t\", \"tr\", \"r\", \"br\", \"b\", \"bl\", \"l\", \"tl\"]\n        }, isArbitraryImage]\n      }],\n      /**\n       * Background Color\n       * @see https://tailwindcss.com/docs/background-color\n       */\n      \"bg-color\": [{\n        bg: [colors]\n      }],\n      /**\n       * Gradient Color Stops From Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      \"gradient-from-pos\": [{\n        from: [gradientColorStopPositions]\n      }],\n      /**\n       * Gradient Color Stops Via Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      \"gradient-via-pos\": [{\n        via: [gradientColorStopPositions]\n      }],\n      /**\n       * Gradient Color Stops To Position\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      \"gradient-to-pos\": [{\n        to: [gradientColorStopPositions]\n      }],\n      /**\n       * Gradient Color Stops From\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      \"gradient-from\": [{\n        from: [gradientColorStops]\n      }],\n      /**\n       * Gradient Color Stops Via\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      \"gradient-via\": [{\n        via: [gradientColorStops]\n      }],\n      /**\n       * Gradient Color Stops To\n       * @see https://tailwindcss.com/docs/gradient-color-stops\n       */\n      \"gradient-to\": [{\n        to: [gradientColorStops]\n      }],\n      // Borders\n      /**\n       * Border Radius\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      rounded: [{\n        rounded: [borderRadius]\n      }],\n      /**\n       * Border Radius Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-s\": [{\n        \"rounded-s\": [borderRadius]\n      }],\n      /**\n       * Border Radius End\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-e\": [{\n        \"rounded-e\": [borderRadius]\n      }],\n      /**\n       * Border Radius Top\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-t\": [{\n        \"rounded-t\": [borderRadius]\n      }],\n      /**\n       * Border Radius Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-r\": [{\n        \"rounded-r\": [borderRadius]\n      }],\n      /**\n       * Border Radius Bottom\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-b\": [{\n        \"rounded-b\": [borderRadius]\n      }],\n      /**\n       * Border Radius Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-l\": [{\n        \"rounded-l\": [borderRadius]\n      }],\n      /**\n       * Border Radius Start Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-ss\": [{\n        \"rounded-ss\": [borderRadius]\n      }],\n      /**\n       * Border Radius Start End\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-se\": [{\n        \"rounded-se\": [borderRadius]\n      }],\n      /**\n       * Border Radius End End\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-ee\": [{\n        \"rounded-ee\": [borderRadius]\n      }],\n      /**\n       * Border Radius End Start\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-es\": [{\n        \"rounded-es\": [borderRadius]\n      }],\n      /**\n       * Border Radius Top Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-tl\": [{\n        \"rounded-tl\": [borderRadius]\n      }],\n      /**\n       * Border Radius Top Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-tr\": [{\n        \"rounded-tr\": [borderRadius]\n      }],\n      /**\n       * Border Radius Bottom Right\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-br\": [{\n        \"rounded-br\": [borderRadius]\n      }],\n      /**\n       * Border Radius Bottom Left\n       * @see https://tailwindcss.com/docs/border-radius\n       */\n      \"rounded-bl\": [{\n        \"rounded-bl\": [borderRadius]\n      }],\n      /**\n       * Border Width\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w\": [{\n        border: [borderWidth]\n      }],\n      /**\n       * Border Width X\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-x\": [{\n        \"border-x\": [borderWidth]\n      }],\n      /**\n       * Border Width Y\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-y\": [{\n        \"border-y\": [borderWidth]\n      }],\n      /**\n       * Border Width Start\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-s\": [{\n        \"border-s\": [borderWidth]\n      }],\n      /**\n       * Border Width End\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-e\": [{\n        \"border-e\": [borderWidth]\n      }],\n      /**\n       * Border Width Top\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-t\": [{\n        \"border-t\": [borderWidth]\n      }],\n      /**\n       * Border Width Right\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-r\": [{\n        \"border-r\": [borderWidth]\n      }],\n      /**\n       * Border Width Bottom\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-b\": [{\n        \"border-b\": [borderWidth]\n      }],\n      /**\n       * Border Width Left\n       * @see https://tailwindcss.com/docs/border-width\n       */\n      \"border-w-l\": [{\n        \"border-l\": [borderWidth]\n      }],\n      /**\n       * Border Opacity\n       * @see https://tailwindcss.com/docs/border-opacity\n       */\n      \"border-opacity\": [{\n        \"border-opacity\": [opacity]\n      }],\n      /**\n       * Border Style\n       * @see https://tailwindcss.com/docs/border-style\n       */\n      \"border-style\": [{\n        border: [...getLineStyles(), \"hidden\"]\n      }],\n      /**\n       * Divide Width X\n       * @see https://tailwindcss.com/docs/divide-width\n       */\n      \"divide-x\": [{\n        \"divide-x\": [borderWidth]\n      }],\n      /**\n       * Divide Width X Reverse\n       * @see https://tailwindcss.com/docs/divide-width\n       */\n      \"divide-x-reverse\": [\"divide-x-reverse\"],\n      /**\n       * Divide Width Y\n       * @see https://tailwindcss.com/docs/divide-width\n       */\n      \"divide-y\": [{\n        \"divide-y\": [borderWidth]\n      }],\n      /**\n       * Divide Width Y Reverse\n       * @see https://tailwindcss.com/docs/divide-width\n       */\n      \"divide-y-reverse\": [\"divide-y-reverse\"],\n      /**\n       * Divide Opacity\n       * @see https://tailwindcss.com/docs/divide-opacity\n       */\n      \"divide-opacity\": [{\n        \"divide-opacity\": [opacity]\n      }],\n      /**\n       * Divide Style\n       * @see https://tailwindcss.com/docs/divide-style\n       */\n      \"divide-style\": [{\n        divide: getLineStyles()\n      }],\n      /**\n       * Border Color\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color\": [{\n        border: [borderColor]\n      }],\n      /**\n       * Border Color X\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color-x\": [{\n        \"border-x\": [borderColor]\n      }],\n      /**\n       * Border Color Y\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color-y\": [{\n        \"border-y\": [borderColor]\n      }],\n      /**\n       * Border Color Top\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color-t\": [{\n        \"border-t\": [borderColor]\n      }],\n      /**\n       * Border Color Right\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color-r\": [{\n        \"border-r\": [borderColor]\n      }],\n      /**\n       * Border Color Bottom\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color-b\": [{\n        \"border-b\": [borderColor]\n      }],\n      /**\n       * Border Color Left\n       * @see https://tailwindcss.com/docs/border-color\n       */\n      \"border-color-l\": [{\n        \"border-l\": [borderColor]\n      }],\n      /**\n       * Divide Color\n       * @see https://tailwindcss.com/docs/divide-color\n       */\n      \"divide-color\": [{\n        divide: [borderColor]\n      }],\n      /**\n       * Outline Style\n       * @see https://tailwindcss.com/docs/outline-style\n       */\n      \"outline-style\": [{\n        outline: [\"\", ...getLineStyles()]\n      }],\n      /**\n       * Outline Offset\n       * @see https://tailwindcss.com/docs/outline-offset\n       */\n      \"outline-offset\": [{\n        \"outline-offset\": [isLength, isArbitraryValue]\n      }],\n      /**\n       * Outline Width\n       * @see https://tailwindcss.com/docs/outline-width\n       */\n      \"outline-w\": [{\n        outline: [isLength, isArbitraryLength]\n      }],\n      /**\n       * Outline Color\n       * @see https://tailwindcss.com/docs/outline-color\n       */\n      \"outline-color\": [{\n        outline: [colors]\n      }],\n      /**\n       * Ring Width\n       * @see https://tailwindcss.com/docs/ring-width\n       */\n      \"ring-w\": [{\n        ring: getLengthWithEmptyAndArbitrary()\n      }],\n      /**\n       * Ring Width Inset\n       * @see https://tailwindcss.com/docs/ring-width\n       */\n      \"ring-w-inset\": [\"ring-inset\"],\n      /**\n       * Ring Color\n       * @see https://tailwindcss.com/docs/ring-color\n       */\n      \"ring-color\": [{\n        ring: [colors]\n      }],\n      /**\n       * Ring Opacity\n       * @see https://tailwindcss.com/docs/ring-opacity\n       */\n      \"ring-opacity\": [{\n        \"ring-opacity\": [opacity]\n      }],\n      /**\n       * Ring Offset Width\n       * @see https://tailwindcss.com/docs/ring-offset-width\n       */\n      \"ring-offset-w\": [{\n        \"ring-offset\": [isLength, isArbitraryLength]\n      }],\n      /**\n       * Ring Offset Color\n       * @see https://tailwindcss.com/docs/ring-offset-color\n       */\n      \"ring-offset-color\": [{\n        \"ring-offset\": [colors]\n      }],\n      // Effects\n      /**\n       * Box Shadow\n       * @see https://tailwindcss.com/docs/box-shadow\n       */\n      shadow: [{\n        shadow: [\"\", \"inner\", \"none\", isTshirtSize, isArbitraryShadow]\n      }],\n      /**\n       * Box Shadow Color\n       * @see https://tailwindcss.com/docs/box-shadow-color\n       */\n      \"shadow-color\": [{\n        shadow: [isAny]\n      }],\n      /**\n       * Opacity\n       * @see https://tailwindcss.com/docs/opacity\n       */\n      opacity: [{\n        opacity: [opacity]\n      }],\n      /**\n       * Mix Blend Mode\n       * @see https://tailwindcss.com/docs/mix-blend-mode\n       */\n      \"mix-blend\": [{\n        \"mix-blend\": [...getBlendModes(), \"plus-lighter\", \"plus-darker\"]\n      }],\n      /**\n       * Background Blend Mode\n       * @see https://tailwindcss.com/docs/background-blend-mode\n       */\n      \"bg-blend\": [{\n        \"bg-blend\": getBlendModes()\n      }],\n      // Filters\n      /**\n       * Filter\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://tailwindcss.com/docs/filter\n       */\n      filter: [{\n        filter: [\"\", \"none\"]\n      }],\n      /**\n       * Blur\n       * @see https://tailwindcss.com/docs/blur\n       */\n      blur: [{\n        blur: [blur]\n      }],\n      /**\n       * Brightness\n       * @see https://tailwindcss.com/docs/brightness\n       */\n      brightness: [{\n        brightness: [brightness]\n      }],\n      /**\n       * Contrast\n       * @see https://tailwindcss.com/docs/contrast\n       */\n      contrast: [{\n        contrast: [contrast]\n      }],\n      /**\n       * Drop Shadow\n       * @see https://tailwindcss.com/docs/drop-shadow\n       */\n      \"drop-shadow\": [{\n        \"drop-shadow\": [\"\", \"none\", isTshirtSize, isArbitraryValue]\n      }],\n      /**\n       * Grayscale\n       * @see https://tailwindcss.com/docs/grayscale\n       */\n      grayscale: [{\n        grayscale: [grayscale]\n      }],\n      /**\n       * Hue Rotate\n       * @see https://tailwindcss.com/docs/hue-rotate\n       */\n      \"hue-rotate\": [{\n        \"hue-rotate\": [hueRotate]\n      }],\n      /**\n       * Invert\n       * @see https://tailwindcss.com/docs/invert\n       */\n      invert: [{\n        invert: [invert]\n      }],\n      /**\n       * Saturate\n       * @see https://tailwindcss.com/docs/saturate\n       */\n      saturate: [{\n        saturate: [saturate]\n      }],\n      /**\n       * Sepia\n       * @see https://tailwindcss.com/docs/sepia\n       */\n      sepia: [{\n        sepia: [sepia]\n      }],\n      /**\n       * Backdrop Filter\n       * @deprecated since Tailwind CSS v3.0.0\n       * @see https://tailwindcss.com/docs/backdrop-filter\n       */\n      \"backdrop-filter\": [{\n        \"backdrop-filter\": [\"\", \"none\"]\n      }],\n      /**\n       * Backdrop Blur\n       * @see https://tailwindcss.com/docs/backdrop-blur\n       */\n      \"backdrop-blur\": [{\n        \"backdrop-blur\": [blur]\n      }],\n      /**\n       * Backdrop Brightness\n       * @see https://tailwindcss.com/docs/backdrop-brightness\n       */\n      \"backdrop-brightness\": [{\n        \"backdrop-brightness\": [brightness]\n      }],\n      /**\n       * Backdrop Contrast\n       * @see https://tailwindcss.com/docs/backdrop-contrast\n       */\n      \"backdrop-contrast\": [{\n        \"backdrop-contrast\": [contrast]\n      }],\n      /**\n       * Backdrop Grayscale\n       * @see https://tailwindcss.com/docs/backdrop-grayscale\n       */\n      \"backdrop-grayscale\": [{\n        \"backdrop-grayscale\": [grayscale]\n      }],\n      /**\n       * Backdrop Hue Rotate\n       * @see https://tailwindcss.com/docs/backdrop-hue-rotate\n       */\n      \"backdrop-hue-rotate\": [{\n        \"backdrop-hue-rotate\": [hueRotate]\n      }],\n      /**\n       * Backdrop Invert\n       * @see https://tailwindcss.com/docs/backdrop-invert\n       */\n      \"backdrop-invert\": [{\n        \"backdrop-invert\": [invert]\n      }],\n      /**\n       * Backdrop Opacity\n       * @see https://tailwindcss.com/docs/backdrop-opacity\n       */\n      \"backdrop-opacity\": [{\n        \"backdrop-opacity\": [opacity]\n      }],\n      /**\n       * Backdrop Saturate\n       * @see https://tailwindcss.com/docs/backdrop-saturate\n       */\n      \"backdrop-saturate\": [{\n        \"backdrop-saturate\": [saturate]\n      }],\n      /**\n       * Backdrop Sepia\n       * @see https://tailwindcss.com/docs/backdrop-sepia\n       */\n      \"backdrop-sepia\": [{\n        \"backdrop-sepia\": [sepia]\n      }],\n      // Tables\n      /**\n       * Border Collapse\n       * @see https://tailwindcss.com/docs/border-collapse\n       */\n      \"border-collapse\": [{\n        border: [\"collapse\", \"separate\"]\n      }],\n      /**\n       * Border Spacing\n       * @see https://tailwindcss.com/docs/border-spacing\n       */\n      \"border-spacing\": [{\n        \"border-spacing\": [borderSpacing]\n      }],\n      /**\n       * Border Spacing X\n       * @see https://tailwindcss.com/docs/border-spacing\n       */\n      \"border-spacing-x\": [{\n        \"border-spacing-x\": [borderSpacing]\n      }],\n      /**\n       * Border Spacing Y\n       * @see https://tailwindcss.com/docs/border-spacing\n       */\n      \"border-spacing-y\": [{\n        \"border-spacing-y\": [borderSpacing]\n      }],\n      /**\n       * Table Layout\n       * @see https://tailwindcss.com/docs/table-layout\n       */\n      \"table-layout\": [{\n        table: [\"auto\", \"fixed\"]\n      }],\n      /**\n       * Caption Side\n       * @see https://tailwindcss.com/docs/caption-side\n       */\n      caption: [{\n        caption: [\"top\", \"bottom\"]\n      }],\n      // Transitions and Animation\n      /**\n       * Tranisition Property\n       * @see https://tailwindcss.com/docs/transition-property\n       */\n      transition: [{\n        transition: [\"none\", \"all\", \"\", \"colors\", \"opacity\", \"shadow\", \"transform\", isArbitraryValue]\n      }],\n      /**\n       * Transition Duration\n       * @see https://tailwindcss.com/docs/transition-duration\n       */\n      duration: [{\n        duration: getNumberAndArbitrary()\n      }],\n      /**\n       * Transition Timing Function\n       * @see https://tailwindcss.com/docs/transition-timing-function\n       */\n      ease: [{\n        ease: [\"linear\", \"in\", \"out\", \"in-out\", isArbitraryValue]\n      }],\n      /**\n       * Transition Delay\n       * @see https://tailwindcss.com/docs/transition-delay\n       */\n      delay: [{\n        delay: getNumberAndArbitrary()\n      }],\n      /**\n       * Animation\n       * @see https://tailwindcss.com/docs/animation\n       */\n      animate: [{\n        animate: [\"none\", \"spin\", \"ping\", \"pulse\", \"bounce\", isArbitraryValue]\n      }],\n      // Transforms\n      /**\n       * Transform\n       * @see https://tailwindcss.com/docs/transform\n       */\n      transform: [{\n        transform: [\"\", \"gpu\", \"none\"]\n      }],\n      /**\n       * Scale\n       * @see https://tailwindcss.com/docs/scale\n       */\n      scale: [{\n        scale: [scale]\n      }],\n      /**\n       * Scale X\n       * @see https://tailwindcss.com/docs/scale\n       */\n      \"scale-x\": [{\n        \"scale-x\": [scale]\n      }],\n      /**\n       * Scale Y\n       * @see https://tailwindcss.com/docs/scale\n       */\n      \"scale-y\": [{\n        \"scale-y\": [scale]\n      }],\n      /**\n       * Rotate\n       * @see https://tailwindcss.com/docs/rotate\n       */\n      rotate: [{\n        rotate: [isInteger, isArbitraryValue]\n      }],\n      /**\n       * Translate X\n       * @see https://tailwindcss.com/docs/translate\n       */\n      \"translate-x\": [{\n        \"translate-x\": [translate]\n      }],\n      /**\n       * Translate Y\n       * @see https://tailwindcss.com/docs/translate\n       */\n      \"translate-y\": [{\n        \"translate-y\": [translate]\n      }],\n      /**\n       * Skew X\n       * @see https://tailwindcss.com/docs/skew\n       */\n      \"skew-x\": [{\n        \"skew-x\": [skew]\n      }],\n      /**\n       * Skew Y\n       * @see https://tailwindcss.com/docs/skew\n       */\n      \"skew-y\": [{\n        \"skew-y\": [skew]\n      }],\n      /**\n       * Transform Origin\n       * @see https://tailwindcss.com/docs/transform-origin\n       */\n      \"transform-origin\": [{\n        origin: [\"center\", \"top\", \"top-right\", \"right\", \"bottom-right\", \"bottom\", \"bottom-left\", \"left\", \"top-left\", isArbitraryValue]\n      }],\n      // Interactivity\n      /**\n       * Accent Color\n       * @see https://tailwindcss.com/docs/accent-color\n       */\n      accent: [{\n        accent: [\"auto\", colors]\n      }],\n      /**\n       * Appearance\n       * @see https://tailwindcss.com/docs/appearance\n       */\n      appearance: [{\n        appearance: [\"none\", \"auto\"]\n      }],\n      /**\n       * Cursor\n       * @see https://tailwindcss.com/docs/cursor\n       */\n      cursor: [{\n        cursor: [\"auto\", \"default\", \"pointer\", \"wait\", \"text\", \"move\", \"help\", \"not-allowed\", \"none\", \"context-menu\", \"progress\", \"cell\", \"crosshair\", \"vertical-text\", \"alias\", \"copy\", \"no-drop\", \"grab\", \"grabbing\", \"all-scroll\", \"col-resize\", \"row-resize\", \"n-resize\", \"e-resize\", \"s-resize\", \"w-resize\", \"ne-resize\", \"nw-resize\", \"se-resize\", \"sw-resize\", \"ew-resize\", \"ns-resize\", \"nesw-resize\", \"nwse-resize\", \"zoom-in\", \"zoom-out\", isArbitraryValue]\n      }],\n      /**\n       * Caret Color\n       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities\n       */\n      \"caret-color\": [{\n        caret: [colors]\n      }],\n      /**\n       * Pointer Events\n       * @see https://tailwindcss.com/docs/pointer-events\n       */\n      \"pointer-events\": [{\n        \"pointer-events\": [\"none\", \"auto\"]\n      }],\n      /**\n       * Resize\n       * @see https://tailwindcss.com/docs/resize\n       */\n      resize: [{\n        resize: [\"none\", \"y\", \"x\", \"\"]\n      }],\n      /**\n       * Scroll Behavior\n       * @see https://tailwindcss.com/docs/scroll-behavior\n       */\n      \"scroll-behavior\": [{\n        scroll: [\"auto\", \"smooth\"]\n      }],\n      /**\n       * Scroll Margin\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-m\": [{\n        \"scroll-m\": getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Margin X\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-mx\": [{\n        \"scroll-mx\": getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Margin Y\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-my\": [{\n        \"scroll-my\": getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Margin Start\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-ms\": [{\n        \"scroll-ms\": getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Margin End\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-me\": [{\n        \"scroll-me\": getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Margin Top\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-mt\": [{\n        \"scroll-mt\": getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Margin Right\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-mr\": [{\n        \"scroll-mr\": getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Margin Bottom\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-mb\": [{\n        \"scroll-mb\": getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Margin Left\n       * @see https://tailwindcss.com/docs/scroll-margin\n       */\n      \"scroll-ml\": [{\n        \"scroll-ml\": getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Padding\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-p\": [{\n        \"scroll-p\": getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Padding X\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-px\": [{\n        \"scroll-px\": getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Padding Y\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-py\": [{\n        \"scroll-py\": getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Padding Start\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-ps\": [{\n        \"scroll-ps\": getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Padding End\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-pe\": [{\n        \"scroll-pe\": getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Padding Top\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-pt\": [{\n        \"scroll-pt\": getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Padding Right\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-pr\": [{\n        \"scroll-pr\": getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Padding Bottom\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-pb\": [{\n        \"scroll-pb\": getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Padding Left\n       * @see https://tailwindcss.com/docs/scroll-padding\n       */\n      \"scroll-pl\": [{\n        \"scroll-pl\": getSpacingWithArbitrary()\n      }],\n      /**\n       * Scroll Snap Align\n       * @see https://tailwindcss.com/docs/scroll-snap-align\n       */\n      \"snap-align\": [{\n        snap: [\"start\", \"end\", \"center\", \"align-none\"]\n      }],\n      /**\n       * Scroll Snap Stop\n       * @see https://tailwindcss.com/docs/scroll-snap-stop\n       */\n      \"snap-stop\": [{\n        snap: [\"normal\", \"always\"]\n      }],\n      /**\n       * Scroll Snap Type\n       * @see https://tailwindcss.com/docs/scroll-snap-type\n       */\n      \"snap-type\": [{\n        snap: [\"none\", \"x\", \"y\", \"both\"]\n      }],\n      /**\n       * Scroll Snap Type Strictness\n       * @see https://tailwindcss.com/docs/scroll-snap-type\n       */\n      \"snap-strictness\": [{\n        snap: [\"mandatory\", \"proximity\"]\n      }],\n      /**\n       * Touch Action\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      touch: [{\n        touch: [\"auto\", \"none\", \"manipulation\"]\n      }],\n      /**\n       * Touch Action X\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      \"touch-x\": [{\n        \"touch-pan\": [\"x\", \"left\", \"right\"]\n      }],\n      /**\n       * Touch Action Y\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      \"touch-y\": [{\n        \"touch-pan\": [\"y\", \"up\", \"down\"]\n      }],\n      /**\n       * Touch Action Pinch Zoom\n       * @see https://tailwindcss.com/docs/touch-action\n       */\n      \"touch-pz\": [\"touch-pinch-zoom\"],\n      /**\n       * User Select\n       * @see https://tailwindcss.com/docs/user-select\n       */\n      select: [{\n        select: [\"none\", \"text\", \"all\", \"auto\"]\n      }],\n      /**\n       * Will Change\n       * @see https://tailwindcss.com/docs/will-change\n       */\n      \"will-change\": [{\n        \"will-change\": [\"auto\", \"scroll\", \"contents\", \"transform\", isArbitraryValue]\n      }],\n      // SVG\n      /**\n       * Fill\n       * @see https://tailwindcss.com/docs/fill\n       */\n      fill: [{\n        fill: [colors, \"none\"]\n      }],\n      /**\n       * Stroke Width\n       * @see https://tailwindcss.com/docs/stroke-width\n       */\n      \"stroke-w\": [{\n        stroke: [isLength, isArbitraryLength, isArbitraryNumber]\n      }],\n      /**\n       * Stroke\n       * @see https://tailwindcss.com/docs/stroke\n       */\n      stroke: [{\n        stroke: [colors, \"none\"]\n      }],\n      // Accessibility\n      /**\n       * Screen Readers\n       * @see https://tailwindcss.com/docs/screen-readers\n       */\n      sr: [\"sr-only\", \"not-sr-only\"],\n      /**\n       * Forced Color Adjust\n       * @see https://tailwindcss.com/docs/forced-color-adjust\n       */\n      \"forced-color-adjust\": [{\n        \"forced-color-adjust\": [\"auto\", \"none\"]\n      }]\n    },\n    conflictingClassGroups: {\n      overflow: [\"overflow-x\", \"overflow-y\"],\n      overscroll: [\"overscroll-x\", \"overscroll-y\"],\n      inset: [\"inset-x\", \"inset-y\", \"start\", \"end\", \"top\", \"right\", \"bottom\", \"left\"],\n      \"inset-x\": [\"right\", \"left\"],\n      \"inset-y\": [\"top\", \"bottom\"],\n      flex: [\"basis\", \"grow\", \"shrink\"],\n      gap: [\"gap-x\", \"gap-y\"],\n      p: [\"px\", \"py\", \"ps\", \"pe\", \"pt\", \"pr\", \"pb\", \"pl\"],\n      px: [\"pr\", \"pl\"],\n      py: [\"pt\", \"pb\"],\n      m: [\"mx\", \"my\", \"ms\", \"me\", \"mt\", \"mr\", \"mb\", \"ml\"],\n      mx: [\"mr\", \"ml\"],\n      my: [\"mt\", \"mb\"],\n      size: [\"w\", \"h\"],\n      \"font-size\": [\"leading\"],\n      \"fvn-normal\": [\"fvn-ordinal\", \"fvn-slashed-zero\", \"fvn-figure\", \"fvn-spacing\", \"fvn-fraction\"],\n      \"fvn-ordinal\": [\"fvn-normal\"],\n      \"fvn-slashed-zero\": [\"fvn-normal\"],\n      \"fvn-figure\": [\"fvn-normal\"],\n      \"fvn-spacing\": [\"fvn-normal\"],\n      \"fvn-fraction\": [\"fvn-normal\"],\n      \"line-clamp\": [\"display\", \"overflow\"],\n      rounded: [\"rounded-s\", \"rounded-e\", \"rounded-t\", \"rounded-r\", \"rounded-b\", \"rounded-l\", \"rounded-ss\", \"rounded-se\", \"rounded-ee\", \"rounded-es\", \"rounded-tl\", \"rounded-tr\", \"rounded-br\", \"rounded-bl\"],\n      \"rounded-s\": [\"rounded-ss\", \"rounded-es\"],\n      \"rounded-e\": [\"rounded-se\", \"rounded-ee\"],\n      \"rounded-t\": [\"rounded-tl\", \"rounded-tr\"],\n      \"rounded-r\": [\"rounded-tr\", \"rounded-br\"],\n      \"rounded-b\": [\"rounded-br\", \"rounded-bl\"],\n      \"rounded-l\": [\"rounded-tl\", \"rounded-bl\"],\n      \"border-spacing\": [\"border-spacing-x\", \"border-spacing-y\"],\n      \"border-w\": [\"border-w-s\", \"border-w-e\", \"border-w-t\", \"border-w-r\", \"border-w-b\", \"border-w-l\"],\n      \"border-w-x\": [\"border-w-r\", \"border-w-l\"],\n      \"border-w-y\": [\"border-w-t\", \"border-w-b\"],\n      \"border-color\": [\"border-color-t\", \"border-color-r\", \"border-color-b\", \"border-color-l\"],\n      \"border-color-x\": [\"border-color-r\", \"border-color-l\"],\n      \"border-color-y\": [\"border-color-t\", \"border-color-b\"],\n      \"scroll-m\": [\"scroll-mx\", \"scroll-my\", \"scroll-ms\", \"scroll-me\", \"scroll-mt\", \"scroll-mr\", \"scroll-mb\", \"scroll-ml\"],\n      \"scroll-mx\": [\"scroll-mr\", \"scroll-ml\"],\n      \"scroll-my\": [\"scroll-mt\", \"scroll-mb\"],\n      \"scroll-p\": [\"scroll-px\", \"scroll-py\", \"scroll-ps\", \"scroll-pe\", \"scroll-pt\", \"scroll-pr\", \"scroll-pb\", \"scroll-pl\"],\n      \"scroll-px\": [\"scroll-pr\", \"scroll-pl\"],\n      \"scroll-py\": [\"scroll-pt\", \"scroll-pb\"],\n      touch: [\"touch-x\", \"touch-y\", \"touch-pz\"],\n      \"touch-x\": [\"touch\"],\n      \"touch-y\": [\"touch\"],\n      \"touch-pz\": [\"touch\"]\n    },\n    conflictingClassGroupModifiers: {\n      \"font-size\": [\"leading\"]\n    }\n  };\n};\nvar twMerge = /* @__PURE__ */ createTailwindMerge(getDefaultConfig);\n\n// src/lib/utils.ts\nfunction cn(...inputs) {\n  return twMerge(clsx(inputs));\n}\n\n// src/components/MaxWidthWrapper.tsx\nimport { useRouter } from \"next/navigation\";\nvar MaxWidthWrapper = ({\n  className,\n  children,\n  styles\n}) => {\n  const router = useRouter();\n  return <div\n    className={cn(\n      \"mx-auto w-full max-w-screen-xl px-2 md:px-10\",\n      className\n    )}\n    style={styles}\n  >{children}</div>;\n};\nvar MaxWidthWrapper_default = MaxWidthWrapper;\n\n// src/components/ui/button.tsx\nimport * as React2 from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva } from \"class-variance-authority\";\nvar buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline: \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\"\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\"\n      }\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\"\n    }\n  }\n);\nvar Button = React2.forwardRef(\n  (_a, ref) => {\n    var _b = _a, { className, variant, size, asChild = false } = _b, props = __objRest(_b, [\"className\", \"variant\", \"size\", \"asChild\"]);\n    const Comp = asChild ? Slot : \"button\";\n    return <Comp\n      className={cn(buttonVariants({ variant, size, className }))}\n      ref={ref}\n      {...props}\n    />;\n  }\n);\nButton.displayName = \"Button\";\n\n// src/components/player/NewControls.tsx\nvar sessionOptionsMain = {\n  requiredFeatures: [\"local-floor\"],\n  optionalFeatures: [\"bounded-floor\", \"hand-tracking\"]\n};\nvar Controls = ({ moments, isSingle, videoTexture, video, viewOnly, isXR, handleNextClick, handlePrevClick, crm }) => {\n  var _a, _b, _c, _d;\n  const [isPaused, setPaused] = useState2(false);\n  const [isMuted, setMuted] = useState2(true);\n  const [currentTime, setCurrentTime] = useState2(0);\n  const [currentPlaying, setCurrentPlaying] = useState2(0);\n  const totalMedia = (_a = moments == null ? void 0 : moments.media) == null ? void 0 : _a.length;\n  let currentMedia = (_c = (_b = moments == null ? void 0 : moments.media) == null ? void 0 : _b[currentPlaying]) != null ? _c : moments == null ? void 0 : moments.media;\n  if (!((_d = moments == null ? void 0 : moments.media) == null ? void 0 : _d.length)) {\n    currentMedia = crm;\n  }\n  const isVR = currentMedia == null ? void 0 : currentMedia.xr;\n  const enterAR = useEnterXR(\"immersive-ar\", sessionOptionsMain);\n  const xrState = useXR.getState();\n  const supported = useSessionSupported(\"immersive-vr\");\n  const videoElementRef = useRef2(null);\n  useEffect2(() => {\n    if (video) {\n      if (isMuted !== video.muted) {\n        video.muted = isMuted;\n      }\n      videoElementRef.current = video;\n      const updateCurrentTime = () => {\n        setCurrentTime(video.currentTime);\n      };\n      video.addEventListener(\"timeupdate\", updateCurrentTime);\n      return () => {\n        video.removeEventListener(\"timeupdate\", updateCurrentTime);\n      };\n    }\n  }, [video]);\n  const handlePausePlay = () => {\n    if (videoElementRef.current) {\n      if (currentMedia.type === \"video\") {\n        if (videoElementRef.current.paused) {\n          videoElementRef.current.play();\n          setPaused(false);\n        } else {\n          videoElementRef.current.pause();\n          setPaused(true);\n        }\n      } else {\n        setPaused(!isPaused);\n      }\n    }\n  };\n  const handleMuteUnmute = () => {\n    if (videoElementRef.current) {\n      videoElementRef.current.muted = !videoElementRef.current.muted;\n      setMuted(videoElementRef.current.muted);\n    }\n  };\n  const handleSeek = (event) => {\n    const newTime = parseFloat(event.target.value);\n    if (videoElementRef.current) {\n      videoElementRef.current.currentTime = newTime;\n      setCurrentTime(newTime);\n    }\n  };\n  const formatTime = (time) => {\n    if (isNaN(time))\n      return \"0:00\";\n    const minutes = Math.floor(time / 60);\n    const seconds = Math.floor(time % 60);\n    return `${minutes}:${seconds < 10 ? \"0\" : \"\"}${seconds}`;\n  };\n  const handleEnterVR = () => __async(void 0, null, function* () {\n    try {\n      yield enterAR();\n    } catch (error) {\n      console.error(\"Failed to enter VR:\", error);\n    }\n  });\n  return <div className=\"fixed left-0 bottom-0 z-30 w-full gradient-controls from-zinc-900 to-zinc-900\"><MaxWidthWrapper_default className=\"pb-10 px-4 flex flex-col items-center justify-center\"><div className=\"w-full flex flex-row justify-between items-center mb-4\">{(isXR || (currentMedia == null ? void 0 : currentMedia.type) === \"video\" || !isSingle) && <div className=\"flex gap-2 md:gap-5 items-center justify-center w-full\"><div className=\"flex items-center bg-black bg-opacity-20 backdrop-blur-md rounded-full px-4 py-2 justify-center\">\n    <div className=\"flex gap-2 md:gap-5\">\n      {\n        /* Prev Button */\n      }\n      {!isSingle && totalMedia > 1 && <div\n        onClick={handlePrevClick}\n        className=\"inline-flex w-10 h-10 md:w-12 md:h-12 cursor-pointer justify-center items-center gap-2.5 hover:bg-opacity-40 transition-all duration-300 ease-in-out\"\n      ><ChevronLeft className=\"w-6 h-6 text-white z-20\" /></div>}\n      {\n        /* Play/Pause Button */\n      }\n      <div\n        onClick={handlePausePlay}\n        className=\"w-10 h-10 md:w-12 md:h-12 cursor-pointer justify-center items-center gap-2.5 inline-flex hover:bg-opacity-40 transition-all duration-300 ease-in-out\"\n      >{isPaused ? <Play className=\"md:w-6 md:h-6 w-5 h-5 text-white z-20\" /> : <Pause className=\"md:w-6 md:h-6 w-5 h-5 text-white z-20\" />}</div>\n      {\n        /* Next Button */\n      }\n      {!isSingle && totalMedia > 1 && <div\n        onClick={handleNextClick}\n        className=\"inline-flex w-10 h-10 md:w-12 md:h-12 cursor-pointer justify-center items-center gap-2.5 hover:bg-opacity-40 transition-all duration-300 ease-in-out\"\n      ><ChevronRight className=\"w-6 h-6 text-white z-20\" /></div>}\n    </div>\n    {\n      /* Time and Seek Bar */\n    }\n    {(crm == null ? void 0 : crm.type) === \"video\" && <div className=\"w-3/5 flex justify-center items-center\">\n      <span className=\"text-white mr-2\" style={{ width: \"50px\", textAlign: \"center\" }}>{formatTime(currentTime)}</span>\n      <input\n        type=\"range\"\n        min=\"0\"\n        max={(video == null ? void 0 : video.duration) || 0}\n        value={currentTime}\n        onChange={handleSeek}\n        className=\"w-full h-2 appearance-none cursor-pointer\"\n        style={{\n          background: `linear-gradient(to right, white ${currentTime / (video == null ? void 0 : video.duration) * 100}%, rgba(255, 255, 255, 0.5) ${currentTime / (video == null ? void 0 : video.duration) * 100}%)`,\n          borderRadius: \"14px\",\n          height: \"8px\",\n          transition: \"background 0.3s ease\"\n        }}\n      />\n      <span className=\"text-white ml-2\" style={{ width: \"50px\", textAlign: \"center\" }}>{formatTime((video == null ? void 0 : video.duration) || 0)}</span>\n    </div>}\n    {\n      /* Mute/Unmute Button */\n    }\n    <div\n      onClick={handleMuteUnmute}\n      className=\"w-10 h-10 md:w-12 md:h-12 cursor-pointer justify-center items-center gap-2.5 inline-flex hover:bg-opacity-40 transition-all duration-300 ease-in-out\"\n    >{isMuted ? <VolumeX className=\"md:w-6 md:h-6 w-5 h-5 text-white z-20\" /> : <Volume2 className=\"md:w-6 md:h-6 w-5 h-5 text-white z-20\" />}</div>\n    {isVR && supported && !(xrState == null ? void 0 : xrState.session) && <Button\n      onClick={handleEnterVR}\n      className=\"rounded-full p-6 text-zinc-900 bg-white hover:bg-white/75\"\n    ><div className=\"text-sm font-semibold uppercase leading-tight tracking-wide\">Enter VR</div></Button>}\n  </div></div>}</div></MaxWidthWrapper_default></div>;\n};\nvar NewControls_default = Controls;\n\n// src/components/360videoplayer/Rectangle.tsx\nimport { useRef as useRef3, useState as useState5, useEffect as useEffect4, Suspense } from \"react\";\nimport { useThree } from \"@react-three/fiber\";\nimport {\n  Play as Play2,\n  Pause as Pause2,\n  Volume2 as Volume22,\n  VolumeX as VolumeX2,\n  ChevronLeft as ChevronLeft2,\n  ChevronRight as ChevronRight2\n} from \"@coconut-xr/lucide-koestlich\";\nimport { Container as Container4, RootContainer, Text as Text2 } from \"@coconut-xr/koestlich\";\n\n// src/components/360videoplayer/Glass.tsx\nimport { Container } from \"@coconut-xr/koestlich\";\nimport { makeBorderMaterial } from \"@coconut-xr/xmaterials\";\nimport { MeshPhongMaterial } from \"three\";\nvar GlassMaterial = makeBorderMaterial(MeshPhongMaterial, {\n  specular: \"#555\",\n  shininess: 100\n});\nfunction Glass(_a) {\n  var _b = _a, { backgroundColor = 8947848 } = _b, props = __objRest(_b, [\"backgroundColor\"]);\n  return <Container\n    backgroundColor={backgroundColor}\n    backgroundOpacity={0.8}\n    borderColor={backgroundColor}\n    border={4}\n    borderOpacity={0.8}\n    borderBend={0.3}\n    material={GlassMaterial}\n    {...props}\n  />;\n}\nvar Glass_default = Glass;\n\n// src/components/360videoplayer/IconButton.tsx\nimport { Container as Container2 } from \"@coconut-xr/koestlich\";\nimport { useState as useState3 } from \"react\";\nfunction IconButton(_a) {\n  var _b = _a, { active, size = \"medium\" } = _b, props = __objRest(_b, [\"active\", \"size\"]);\n  const [hoverCount, setHoverCount] = useState3(0);\n  const radius = { small: 20, medium: 24, large: 28 }[size];\n  return <Container2\n    height={2 * radius}\n    width={2 * radius}\n    borderRadius={radius}\n    justifyContent=\"center\"\n    alignItems=\"center\"\n    backgroundColor=\"white\"\n    backgroundOpacity={active ? 0.2 : hoverCount > 0 ? 0.1 : 0}\n    onPointerEnter={() => {\n    }}\n    onPointerLeave={() => {\n    }}\n    {...props}\n  />;\n}\nvar IconButton_default = IconButton;\n\n// src/components/360videoplayer/RangeBar.tsx\nimport { Slider } from \"@coconut-xr/apfel-kruemel\";\nimport { Container as Container3 } from \"@coconut-xr/koestlich\";\nimport { Text } from \"@coconut-xr/koestlich\";\nimport { useEffect as useEffect3, useState as useState4 } from \"react\";\nvar Seekbar = ({ video, onClick }) => {\n  const [currentTime, setCurrentTime] = useState4(0);\n  const [duration, setDuration] = useState4(video.duration);\n  useEffect3(() => {\n    console.log(\"Video Changing Duration\");\n    const handleTimeUpdate = () => setCurrentTime((video == null ? void 0 : video.currentTime) || 0);\n    video.addEventListener(\"timeupdate\", handleTimeUpdate);\n    if (video.readyState >= 1) {\n      setDuration((video == null ? void 0 : video.duration) || 0);\n      setCurrentTime((video == null ? void 0 : video.currentTime) || 0);\n    }\n    return () => {\n      video.removeEventListener(\"timeupdate\", handleTimeUpdate);\n    };\n  }, [video]);\n  const formatTime = (time) => {\n    const minutes = Math.floor(time / 60);\n    const seconds = Math.floor(time % 60);\n    return `${minutes}:${seconds < 10 ? \"0\" : \"\"}${seconds}`;\n  };\n  const updateProgress = (value) => {\n    const newTime = value / 100 * video.duration;\n    if (video.readyState >= 2) {\n      video.currentTime = newTime;\n    } else {\n      const seekListener = () => {\n        video.currentTime = newTime;\n        video.removeEventListener(\"canplay\", seekListener);\n      };\n      video.addEventListener(\"canplay\", seekListener);\n    }\n  };\n  const progressValue = duration > 0 ? currentTime / duration : 0;\n  const width = Math.max(100, duration * 10);\n  return <Container3 width={200} height={40} flexDirection=\"row\" alignItems=\"center\"><Container3 flexDirection=\"row\" justifyContent=\"space-between\" alignItems=\"center\" width=\"100%\">\n    <Text color=\"white\">{formatTime(currentTime)}</Text>\n    <Container3\n      width={100}\n      height={40}\n      flexDirection=\"row\"\n      alignItems=\"center\"\n      onPointerEnter={() => {\n      }}\n      onPointerLeave={() => {\n      }}\n    ><Slider size=\"xs\" width={100} minWidth={0} range={100} maxWidth={100} onValueChange={updateProgress} value={progressValue * 100} /></Container3>\n    <Text color=\"white\">{formatTime(duration)}</Text>\n  </Container3></Container3>;\n};\nvar RangeBar_default = Seekbar;\n\n// src/components/360videoplayer/Rectangle.tsx\nimport { useXR as useXR2 } from \"@coconut-xr/natuerlich/react\";\nimport * as THREE from \"three\";\nvar StickyRectangle = ({\n  moments,\n  isSingle,\n  video,\n  videoRef,\n  videoTexture,\n  originalCameraState,\n  controlsRefrence,\n  handleNextClick,\n  handlePrevClick,\n  crm\n}) => {\n  var _a, _b, _c, _d;\n  const controlRef = useRef3(null);\n  let orbitControls = null;\n  const { camera, size, scene, gl, controls } = useThree();\n  const [isPaused, setPaused] = useState5(false);\n  const [isMuted, setMuted] = useState5(true);\n  const [currentTime, setCurrentTime] = useState5(0);\n  const [currentPlaying, setCurrentPlaying] = useState5(0);\n  let currentMedia = (_b = (_a = moments == null ? void 0 : moments.media) == null ? void 0 : _a[currentPlaying]) != null ? _b : moments == null ? void 0 : moments.media;\n  if (!((_c = moments == null ? void 0 : moments.media) == null ? void 0 : _c.length)) {\n    currentMedia = crm;\n  }\n  const aspectRatio = size.width / size.height;\n  const xrState = useXR2.getState();\n  const totalMedia = (_d = moments == null ? void 0 : moments.media) == null ? void 0 : _d.length;\n  const [controlsVisible, setControlsVisible] = useState5(true);\n  const [isInteracting, setIsInteracting] = useState5(false);\n  const interactionTimeout = useRef3(null);\n  const videoElementRef = useRef3(null);\n  useEffect4(() => {\n    if (video) {\n      if (isMuted !== video.muted) {\n        video.muted = isMuted;\n      }\n      videoElementRef.current = video;\n      const updateCurrentTime = () => {\n        setCurrentTime(video.currentTime);\n      };\n      video.addEventListener(\"timeupdate\", updateCurrentTime);\n      return () => {\n        video.removeEventListener(\"timeupdate\", updateCurrentTime);\n      };\n    }\n  }, [video]);\n  useEffect4(() => {\n    interactionTimeout.current = setTimeout(() => {\n      setControlsVisible(false);\n    }, 2e3);\n    return () => {\n      if (interactionTimeout.current)\n        clearTimeout(interactionTimeout.current);\n    };\n  }, []);\n  const handleInteraction = () => {\n    setControlsVisible(true);\n    if (interactionTimeout.current)\n      clearTimeout(interactionTimeout.current);\n    interactionTimeout.current = setTimeout(() => {\n      setControlsVisible(false);\n    }, 2e3);\n  };\n  const handleControlInteraction = () => {\n    setIsInteracting(true);\n    handleInteraction();\n  };\n  const handleMouseUp = () => {\n    setIsInteracting(false);\n    handleInteraction();\n  };\n  useEffect4(() => {\n    var _a2;\n    window.addEventListener(\"mousemove\", handleInteraction);\n    window.addEventListener(\"keydown\", handleInteraction);\n    (_a2 = xrState.session) == null ? void 0 : _a2.addEventListener(\"select\", handleInteraction);\n    return () => {\n      var _a3;\n      window.removeEventListener(\"mousemove\", handleInteraction);\n      window.removeEventListener(\"keydown\", handleInteraction);\n      (_a3 = xrState.session) == null ? void 0 : _a3.removeEventListener(\"select\", handleInteraction);\n    };\n  }, [xrState]);\n  const src = video.src;\n  const type = src.startsWith(\"blob\") ? \"video\" : \"photo\";\n  const handlePausePlay = () => {\n    if (videoElementRef.current) {\n      if (currentMedia.type === \"video\") {\n        if (videoElementRef.current.paused) {\n          videoElementRef.current.play();\n          setPaused(false);\n        } else {\n          videoElementRef.current.pause();\n          setPaused(true);\n        }\n      } else {\n        setPaused(!isPaused);\n      }\n    }\n  };\n  const handleMuteUnmute = () => {\n    if (videoElementRef.current) {\n      videoElementRef.current.muted = !videoElementRef.current.muted;\n      setMuted(videoElementRef.current.muted);\n    }\n  };\n  const exitVr = () => {\n    if (xrState.session) {\n      xrState.session.end().then(() => {\n        console.log(\"VR session ended.\");\n        gl.xr.enabled = false;\n        gl.setAnimationLoop(null);\n        if (gl.xr.getSession()) {\n          gl.xr.setSession(null);\n        }\n        if (camera instanceof THREE.PerspectiveCamera) {\n          camera.position.set(0, 0, 150);\n          camera.lookAt(0, 0, 0);\n          camera.rotation.set(0, 0, 0);\n          camera.updateProjectionMatrix();\n          console.log(\"Camera position after VR:\", camera.position);\n          console.log(\"Camera looking at:\", camera.getWorldDirection(new THREE.Vector3()));\n        }\n        if (controlsRefrence.current) {\n          console.log(\"Reusing existing controls\");\n          controlsRefrence.current.enabled = true;\n          controlsRefrence.current.target.set(-30, 0, 0);\n          controlsRefrence.current.enablePan = true;\n          controlsRefrence.current.minPolarAngle = Math.PI / 4;\n          controlsRefrence.current.maxPolarAngle = Math.PI / 2;\n          controlsRefrence.current.minDistance = 50;\n          controlsRefrence.current.maxDistance = 300;\n          controlsRefrence.current.update();\n          console.log(\"Updated controls target to (-30, 0, 0)\");\n        }\n        const sphereGeometry = new THREE.SphereGeometry(100, 100, 100);\n        const sphereMaterial = new THREE.MeshBasicMaterial({\n          map: videoTexture,\n          // Ensure video texture is used\n          side: THREE.BackSide\n          // Render inside the sphere\n        });\n        const sphereMesh = new THREE.Mesh(sphereGeometry, sphereMaterial);\n        sphereMesh.scale.set(-1, 1, 1);\n        sphereMesh.position.set(0, 0, 0);\n        scene.clear();\n        scene.add(sphereMesh);\n        console.log(\"Sphere added to the scene with video texture.\");\n        const renderLoop = () => {\n          if (controlsRefrence.current) {\n            controlsRefrence.current.update();\n          }\n          gl.render(scene, camera);\n          requestAnimationFrame(renderLoop);\n        };\n        renderLoop();\n      }).catch(console.error);\n    }\n  };\n  return <mesh ref={controlRef} position={[0, 2, -6]}>{controlsVisible && <group\n    position={[0, 1.5, -0.4]}\n    scale={Math.min(1, aspectRatio * 20) / 1200 * 20}\n  ><Suspense><RootContainer\n    anchorX=\"center\"\n    anchorY=\"center\"\n    sizeX={1200}\n    sizeY={700}\n    pixelSize={1}\n    positionType=\"relative\"\n    display=\"flex\"\n    flexDirection=\"row\"\n    alignItems=\"stretch\"\n  ><Container4\n    positionType=\"absolute\"\n    positionLeft={0}\n    positionRight={0}\n    positionBottom={-90}\n    flexDirection=\"row\"\n    justifyContent=\"center\"\n  ><Glass_default\n    borderRadius={32}\n    padding={8}\n    gapColumn={8}\n    flexDirection=\"row\"\n  >\n    {!isSingle && <IconButton_default onClick={handlePrevClick}><ChevronLeft2\n      height={16}\n      width={16}\n      color=\"white\"\n      depth={0}\n    /></IconButton_default>}\n    <IconButton_default onClick={handlePausePlay}>{isPaused ? <Play2 height={16} width={16} color=\"white\" depth={0} /> : <Pause2 height={16} width={16} color=\"white\" depth={0} />}</IconButton_default>\n    {!isSingle && <IconButton_default onClick={handleNextClick}><ChevronRight2\n      height={16}\n      width={16}\n      color=\"white\"\n      depth={0}\n    /></IconButton_default>}\n    {type === \"video\" && <Container4\n      flexDirection=\"row\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n    ><RangeBar_default video={video} /></Container4>}\n    <IconButton_default onClick={handleMuteUnmute}>{isMuted ? <VolumeX2 height={16} width={16} color=\"white\" depth={0} /> : <Volume22 height={16} width={16} color=\"white\" depth={0} />}</IconButton_default>\n    <Container4\n      width={150}\n      height={48}\n      borderRadius={50}\n      backgroundColor=\"white\"\n      backgroundOpacity={0.8}\n      flexDirection=\"row\"\n      gapColumn={8}\n      padding={6}\n      onClick={() => exitVr()}\n    ><Container4\n      flexDirection=\"column\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      width=\"100%\"\n      flexGrow={1}\n    ><Text2 color=\"black\">Exit VR</Text2></Container4></Container4>\n  </Glass_default></Container4></RootContainer></Suspense></group>}</mesh>;\n};\nvar Rectangle_default = StickyRectangle;\n\n// src/hooks/useNetworkQuality.tsx\nimport { useState as useState6, useEffect as useEffect5 } from \"react\";\nvar useNetworkQuality = () => {\n  const [networkQuality, setNetworkQuality] = useState6(\"unknown\");\n  const calculateDownloadSpeed = () => __async(void 0, null, function* () {\n    const testFileUrl = \"https://d2ouax3dvpqfld.cloudfront.net/Empty_Red_Lacquer_Room_4d4d0c2a2b.jpeg\";\n    const startTime = (/* @__PURE__ */ new Date()).getTime();\n    try {\n      const response = yield fetch(testFileUrl);\n      const blob = yield response.blob();\n      const endTime = (/* @__PURE__ */ new Date()).getTime();\n      const durationInSeconds = (endTime - startTime) / 1e3;\n      const fileSizeInBits = blob.size * 8;\n      const speedInKbps = fileSizeInBits / durationInSeconds / 1024;\n      console.log(`Download Speed: ${speedInKbps.toFixed(2)} Kbps`);\n      if (speedInKbps >= 1e4) {\n        return \"high\";\n      } else if (speedInKbps >= 2e3) {\n        return \"medium\";\n      } else {\n        return \"low\";\n      }\n    } catch (error) {\n      console.error(\"Error while measuring download speed:\", error);\n      return \"medium\";\n    }\n  });\n  const getNetworkQuality = () => __async(void 0, null, function* () {\n    if (\"connection\" in navigator) {\n      const { downlink } = navigator.connection;\n      console.log(\"Network Information API detected:\", navigator.connection);\n      if (downlink >= 10) {\n        return \"high\";\n      } else if (downlink >= 2) {\n        return \"medium\";\n      } else {\n        return \"low\";\n      }\n    } else {\n      return yield calculateDownloadSpeed();\n    }\n  });\n  useEffect5(() => {\n    const updateNetworkQuality = () => __async(void 0, null, function* () {\n      const quality = yield getNetworkQuality();\n      setNetworkQuality(quality);\n    });\n    updateNetworkQuality();\n    if (navigator.connection) {\n      navigator.connection.addEventListener(\"change\", updateNetworkQuality);\n    }\n    return () => {\n      if (navigator.connection) {\n        navigator.connection.removeEventListener(\"change\", updateNetworkQuality);\n      }\n    };\n  }, []);\n  return networkQuality;\n};\nvar useNetworkQuality_default = useNetworkQuality;\n\n// src/components/ui/progress.tsx\nimport * as React5 from \"react\";\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\";\nvar Progress = React5.forwardRef((_a, ref) => {\n  var _b = _a, { className, value } = _b, props = __objRest(_b, [\"className\", \"value\"]);\n  return <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  ><ProgressPrimitive.Indicator\n    className=\"h-full w-full flex-1 bg-white transition-all\"\n    style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n  /></ProgressPrimitive.Root>;\n});\nProgress.displayName = ProgressPrimitive.Root.displayName;\n\n// src/components/player/StandAlonePlayer.tsx\nvar Player = ({\n  mediaType,\n  mediaId,\n  viewMedia,\n  moments,\n  isXR,\n  isSingle,\n  viewOnly,\n  standAloneVideoUrl\n}) => {\n  var _a, _b;\n  const [imageProgress, setImageProgress] = useState7(0);\n  const [isImageReady, setImageReady] = useState7(false);\n  const [currentPlaying, setCurrentPlaying] = useState7(0);\n  const currentMedia = (standAloneVideoUrl == null ? void 0 : standAloneVideoUrl.src) ? {\n    src: standAloneVideoUrl.src,\n    type: standAloneVideoUrl == null ? void 0 : standAloneVideoUrl.type,\n    xr: standAloneVideoUrl == null ? void 0 : standAloneVideoUrl.xr\n  } : viewMedia || ((_a = moments == null ? void 0 : moments.media) == null ? void 0 : _a[currentPlaying]);\n  console.log(\"current media is\");\n  console.log(currentMedia);\n  const networkQuality = useNetworkQuality_default();\n  const orbitControlsRefrence = useRef4(null);\n  const xrSrc = useMemo(() => {\n    if (viewMedia) {\n      let src = (currentMedia == null ? void 0 : currentMedia.type) === \"photo\" ? currentMedia == null ? void 0 : currentMedia.srcArray[0][\"original\"] : currentMedia == null ? void 0 : currentMedia.src;\n      return src == null ? void 0 : src.replace(/:$/, \"\");\n    } else if ((moments == null ? void 0 : moments.media.length) > 0 && currentMedia.type === \"photo\") {\n      const availableKeys = Object.keys((currentMedia == null ? void 0 : currentMedia.srcArray[0]) || {});\n      if (networkQuality === \"high\") {\n        return availableKeys.includes(\"large\") ? currentMedia == null ? void 0 : currentMedia.srcArray[0][\"large\"] : currentMedia == null ? void 0 : currentMedia.srcArray[0][\"original\"];\n      }\n      if (networkQuality === \"medium\") {\n        return availableKeys.includes(\"medium\") ? currentMedia == null ? void 0 : currentMedia.srcArray[0][\"medium\"] : currentMedia == null ? void 0 : currentMedia.srcArray[0][\"original\"];\n      }\n      if (networkQuality === \"low\") {\n        return availableKeys.includes(\"small\") ? currentMedia == null ? void 0 : currentMedia.srcArray[0][\"small\"] : currentMedia == null ? void 0 : currentMedia.srcArray[0][\"original\"];\n      }\n      return currentMedia == null ? void 0 : currentMedia.srcArray[0][\"original\"];\n    }\n    return currentMedia == null ? void 0 : currentMedia.src;\n  }, [currentMedia, networkQuality, viewMedia]);\n  const isHLS = (xrSrc == null ? void 0 : xrSrc.endsWith(\".m3u8\")) || (xrSrc == null ? void 0 : xrSrc.includes(\".m3u8?token=\")) || (xrSrc == null ? void 0 : xrSrc.includes(\".m3u8\"));\n  const inputSources = useInputSources();\n  const videoTexture = useRef4();\n  const [isVideoReady, setVideoReady] = useState7(false);\n  const [isTimerPaused, setTimerPaused] = useState7(false);\n  const [timer, setTimer] = useState7(null);\n  const [isBuffering, setIsBuffering] = useState7(false);\n  const [showShareModal, setShowShareModal] = useState7(false);\n  const videoElement = useRef4(null);\n  const xrState = useXR3.getState();\n  const videoRef = useRef4();\n  const pathname = usePathname();\n  const [progress, setProgress] = useState7(0);\n  const originalCameraState = useRef4({\n    position: new Vector32(),\n    rotation: new Euler(),\n    fov: 50,\n    // default fov value\n    projectionMatrix: new Matrix4()\n  });\n  const MyCameraComponent = ({ sphereRef }) => {\n    const { gl, camera } = useThree2();\n    const xrState2 = useXR3.getState();\n    useFrame(() => {\n      if (xrState2.session && sphereRef.current) {\n        const xrCamera = gl.xr.getCamera();\n        console.log(\"Camera in VR: \", xrCamera);\n        const initialRotation = new Euler(0, 11, 0);\n        sphereRef.current.rotation.copy(initialRotation);\n      }\n    });\n    return null;\n  };\n  useEffect6(() => {\n    const currentVideoTexture = videoTexture.current;\n    let currentVideoRef = videoRef.current;\n    return () => {\n      if (currentVideoTexture) {\n        currentVideoTexture.dispose();\n      }\n      if (currentVideoRef) {\n        currentVideoRef = null;\n      }\n    };\n  }, [pathname]);\n  useEffect6(() => {\n    var _a2;\n    const vid = document.createElement(\"video\");\n    videoElement.current = vid;\n    vid.src = xrSrc;\n    vid.crossOrigin = \"Anonymous\";\n    vid.loop = false;\n    vid.muted = true;\n    vid.autoPlay = true;\n    vid.playsInline = true;\n    vid.controls = false;\n    setImageReady(true);\n    if (isHLS) {\n      if (Hls.isSupported()) {\n        const hls = new Hls();\n        hls.loadSource(xrSrc);\n        hls.attachMedia(vid);\n        hls.on(Hls.Events.MANIFEST_PARSED, function() {\n          vid.play().then(() => {\n            setVideoReady(true);\n          });\n        });\n      } else if ((_a2 = videoElement.current) == null ? void 0 : _a2.canPlayType(\"application/vnd.apple.mpegurl\")) {\n        videoElement.current.src = xrSrc;\n        videoElement.current.play();\n      }\n    } else {\n      if (videoElement.current) {\n        videoElement.current.src = xrSrc;\n        videoElement.current.play();\n      }\n    }\n    if (videoTexture && videoElement.current) {\n      videoTexture.current = new VideoTexture(videoElement.current);\n      videoRef.current = vid;\n    }\n    return () => {\n      vid.pause();\n      vid.removeAttribute(\"src\");\n      vid.load();\n      if (videoTexture.current) {\n        videoTexture.current.dispose();\n        setVideoReady(false);\n      }\n    };\n  }, [currentPlaying, xrSrc]);\n  useEffect6(() => {\n    return () => {\n      clearInterval(timer);\n      setImageProgress(0);\n    };\n  }, [timer]);\n  useEffect6(() => {\n    if ((currentMedia == null ? void 0 : currentMedia.type) === \"photo\" && isImageReady) {\n      const interval = 50;\n      let currentTime = 0;\n      const newTimer = setInterval(() => {\n        var _a2;\n        if (!isTimerPaused) {\n          currentTime += interval / 1e3;\n          const newProgress = currentTime / 5 * 100;\n          setImageProgress(newProgress);\n          if (newProgress >= 100) {\n            clearInterval(newTimer);\n            if (currentPlaying + 1 < ((_a2 = moments == null ? void 0 : moments.media) == null ? void 0 : _a2.length)) {\n              setImageProgress(0);\n              setCurrentPlaying(currentPlaying + 1);\n            }\n          }\n        }\n      }, interval);\n      setTimer(newTimer);\n      return () => {\n        clearInterval(newTimer);\n      };\n    }\n  }, [xrSrc, currentMedia == null ? void 0 : currentMedia.type, isTimerPaused, isImageReady]);\n  useEffect6(() => {\n    var _a2;\n    const updateProgress = () => {\n      var _a3, _b2, _c, _d, _e, _f, _g;\n      if (currentMedia && currentMedia.type === \"video\") {\n        setImageProgress(0);\n        if (((_b2 = (_a3 = videoTexture.current) == null ? void 0 : _a3.image) == null ? void 0 : _b2.duration) && ((_d = (_c = videoTexture.current) == null ? void 0 : _c.image) == null ? void 0 : _d.currentTime) !== void 0) {\n          const currentTime = videoTexture.current.image.currentTime;\n          const duration = videoTexture.current.image.duration;\n          const newProgress = currentTime / duration * 100;\n          setProgress(newProgress);\n          if (newProgress >= 97.9 && currentPlaying + 1 < ((_e = moments == null ? void 0 : moments.media) == null ? void 0 : _e.length)) {\n            setProgress(0);\n            setImageProgress(0);\n            setCurrentPlaying(currentPlaying + 1);\n          } else if (progress >= 97.9 && currentPlaying + 1 === ((_f = moments == null ? void 0 : moments.media) == null ? void 0 : _f.length) && xrState.session) {\n            (_g = xrState.session) == null ? void 0 : _g.end().catch(console.error);\n          }\n        }\n      }\n    };\n    const handleLoadedMetadata = () => {\n      updateProgress();\n    };\n    const handleTimeUpdate = () => {\n      updateProgress();\n    };\n    if ((_a2 = videoTexture.current) == null ? void 0 : _a2.image) {\n      videoTexture.current.image.addEventListener(\n        \"loadedmetadata\",\n        handleLoadedMetadata\n      );\n      videoTexture.current.image.addEventListener(\n        \"timeupdate\",\n        handleTimeUpdate\n      );\n      return () => {\n        var _a3, _b2;\n        (_a3 = videoTexture == null ? void 0 : videoTexture.current) == null ? void 0 : _a3.image.removeEventListener(\n          \"loadedmetadata\",\n          handleLoadedMetadata\n        );\n        (_b2 = videoTexture.current) == null ? void 0 : _b2.image.removeEventListener(\n          \"timeupdate\",\n          handleTimeUpdate\n        );\n      };\n    }\n  }, [videoTexture, currentMedia == null ? void 0 : currentMedia.type]);\n  const handleNextClick = () => {\n    var _a2;\n    if (currentPlaying + 1 < ((_a2 = moments == null ? void 0 : moments.media) == null ? void 0 : _a2.length)) {\n      setCurrentPlaying(currentPlaying + 1);\n    }\n  };\n  const handlePrevClick = () => {\n    if (currentPlaying > 0) {\n      setCurrentPlaying(currentPlaying - 1);\n    }\n  };\n  const handlePointerDown = () => {\n    var _a2;\n    (_a2 = videoElement.current) == null ? void 0 : _a2.pause();\n    setTimerPaused(true);\n  };\n  const handlePointerUp = () => {\n    var _a2;\n    (_a2 = videoElement.current) == null ? void 0 : _a2.play();\n    setTimerPaused(false);\n  };\n  return (\n    //@ts-ignore\n    <>\n      <SnackbarProvider preventDuplicate />\n      <div className=\"m-auto flex flex-col items-center justify-center h-auto\">\n        {\n          /* Ensure that momentName is not undefined */\n        }\n        {(moments == null ? void 0 : moments.momentName) && <div className=\"md:flex text-center text-black text-xl font-normal leading-snug\">{moments == null ? void 0 : moments.momentName}</div>}\n        {!isSingle && ((_b = moments == null ? void 0 : moments.media) == null ? void 0 : _b.map((item, index) => <div className=\"flex flex-row gap-1 mt-4 bg-transparent\"><div key={index} className=\"bg-transparent\"><Progress\n          color=\"blue\"\n          value={index < currentPlaying ? 100 : index > currentPlaying ? 0 : (currentMedia == null ? void 0 : currentMedia.type) === \"photo\" ? imageProgress : progress}\n          className=\"h-1 w-14 md:w-16 bg-black/10\"\n        /></div></div>))}\n      </div>\n      {(currentMedia == null ? void 0 : currentMedia.type) === \"photo\" && !isImageReady ? <div className=\"fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-50 \"><Loader2 className=\"animate-spin h-16 w-16 text-zinc-600\" /></div> : (currentMedia == null ? void 0 : currentMedia.type) === \"video\" && !isVideoReady && <div className=\"fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-50 \"><Loader2 className=\"animate-spin h-16 w-16 text-zinc-600\" /></div>}\n      <div className=\"\">\n        {xrSrc && <XRCanvas\n          style={{ width: \"100vw\", height: \"100vh\" }}\n          events={clippingEvents}\n          gl={{ antialias: true, localClippingEnabled: true }}\n        >\n          <>\n            {\n              /* device!='iPhone' && device!='iPad' ? (\n              <OrbitControls enableRotate={true} target={[-30, 0, 0]} />) : null */\n            }\n            {!xrState.session && <OrbitControls enableRotate={true} target={[-30, 0, 0]} />}\n            <ambientLight intensity={1} />\n            <directionalLight castShadow position={[1, 2, 3]} intensity={2} />\n            {inputSources.map((inputSource) => <PointerController\n              id={getInputSourceId(inputSource)}\n              key={getInputSourceId(inputSource)}\n              inputSource={inputSource}\n            />)}\n            <pointLight position={[10, 10, 10]} />\n            {(currentMedia == null ? void 0 : currentMedia.type) === \"video\" ? <Sphere2 args={[100, 100, 100]} scale-x={-1} ref={videoRef}>{isVideoReady && videoTexture.current && <><meshBasicMaterial\n              map={videoTexture.current}\n              toneMapped={false}\n              side={BackSide3}\n            /></>}</Sphere2> : <ImageMesh_default\n              mediaId={mediaId}\n              src={xrSrc}\n              onPointerDown={handlePointerDown}\n              onPointerUp={handlePointerUp}\n              setImageReady={setImageReady}\n              isXR={currentMedia == null ? void 0 : currentMedia.xr}\n            />}\n          </>\n          {xrState.session && <Rectangle_default\n            isSingle\n            moments={[]}\n            video={videoElement.current}\n            videoRef={videoRef}\n            videoTexture={videoTexture.current}\n            originalCameraState={originalCameraState}\n            controlsRefrence={orbitControlsRefrence}\n            handleNextClick={handleNextClick}\n            handlePrevClick={handlePrevClick}\n            crm={currentMedia}\n          />}\n          <MyCameraComponent sphereRef={videoRef} />\n        </XRCanvas>}\n        <NewControls_default\n          videoTexture={videoTexture}\n          video={videoElement.current}\n          moments={moments}\n          isXR={isXR}\n          handleNextClick={handleNextClick}\n          handlePrevClick={handlePrevClick}\n          crm={currentMedia}\n        />\n      </div>\n    </>\n  );\n};\nvar StandAlonePlayer_default = Player;\n\n// src/index.tsx\nvar ImmersiveVideoPlayer = ({\n  mediaType,\n  mediaId,\n  viewMedia,\n  moments,\n  isXR,\n  isSingle,\n  viewOnly,\n  standAloneVideoUrl\n}) => {\n  return <StandAlonePlayer_default\n    mediaType={mediaType}\n    mediaId={mediaId}\n    viewMedia={viewMedia}\n    moments={moments}\n    isXR={isXR}\n    isSingle={isSingle}\n    viewOnly={viewOnly}\n    standAloneVideoUrl={standAloneVideoUrl}\n  />;\n};\nvar src_default = ImmersiveVideoPlayer;\nexport {\n  src_default as default\n};\n"
        }
    ]
}